0
00:00:04,080 --> 00:00:07,310
In this video, we're going to wrap up our discussion of SLR parsing, we're going to

1
00:00:07,310 --> 00:00:11,059
give the full SLR parsing algorithm, and also talk about some important

2
00:00:11,059 --> 00:00:18,059
improvements. The SLR parsing algorithm we discussed in the last video has one major

3
00:00:20,020 --> 00:00:24,470
inefficiency. And that is that most of the work that the automation does when it,

4
00:00:24,470 --> 00:00:28,439
when it reads the stack is actually redundant. And to see this, think about

5
00:00:28,439 --> 00:00:34,100
the stack. So we have our stack, and this is the bottom over here. And this is the

6
00:00:34,100 --> 00:00:38,650
top of the stack over here. And, what is going on in each step? In each step we

7
00:00:38,650 --> 00:00:43,260
might, shift something onto the stacks, we might add one symbol, or we might pop some

8
00:00:43,260 --> 00:00:47,979
symbols, and, and push one symbol onto the stack. But basically there's going to be

9
00:00:47,979 --> 00:00:51,909
some small number of symbols that change at the top of the stack at each step. But

10
00:00:51,909 --> 00:00:56,180
most of the stack stays the same. And then we rerun the automaton on the entire

11
00:00:56,180 --> 00:01:01,140
stack. And so, this work is all repeated. Everything that stayed the same From the

12
00:01:01,140 --> 00:01:05,760
previous stack is repeated work, and then we do a little bit of new work, just at

13
00:01:05,760 --> 00:01:09,850
the very top of the stack. And clearly, if we could avoid this, we could make the

14
00:01:09,850 --> 00:01:15,280
algorithm run much, much more quickly. The way to exploit the observation that most

15
00:01:15,280 --> 00:01:19,560
of the work of the automaton is repeated at each step, is to simply remember the

16
00:01:19,560 --> 00:01:23,640
state of the automaton on each stack prefix. So we're going to change the

17
00:01:23,640 --> 00:01:26,560
representation of the stack, we're going to change what goes in the stack, so

18
00:01:26,560 --> 00:01:30,570
before we just had symbols on the stack, but now we're going to have pairs. Each

19
00:01:30,570 --> 00:01:37,020
element of the stack will be a pair of a symbol, and a DFA state. Thus the stack

20
00:01:37,020 --> 00:01:40,780
now is going to be a stack of pairs and whereas before a stack would have

21
00:01:40,780 --> 00:01:46,330
consisted just of the symbols, sym1 up to sym n, now we're going to have the same

22
00:01:46,330 --> 00:01:51,990
symbols but each one of them is going to be paired with a DFA state and that DFA

23
00:01:51,990 --> 00:01:56,979
state is going to be the result of running the DFA and all the symbols to its left,

24
00:01:56,979 --> 00:02:01,400
So all the symbols below it in the stack. So if I think about my stack and if I draw

25
00:02:01,400 --> 00:02:06,659
a little picture of the stack as a line then the DFA state here. Let's call this

26
00:02:06,659 --> 00:02:13,100
state I, will be the result of running the DFA on the entire, stack contents to the

27
00:02:13,100 --> 00:02:16,080
left of that point. And again, if I look at some other point in the stack, at the

28
00:02:16,080 --> 00:02:20,520
state, stack state that's stored there. That would be running, the results of

29
00:02:20,520 --> 00:02:26,760
running the DFA on the entire stack context, contents, up to that point. And

30
00:02:26,760 --> 00:02:30,250
one small detail here is that the bottom of the stack, we have to get started. We

31
00:02:30,250 --> 00:02:33,569
need to have the start state stored at the bottom of the stack. And we just store

32
00:02:33,569 --> 00:02:40,550
that with any dummy symbol. It doesn't matter what symbol we pick. So now we're

33
00:02:40,550 --> 00:02:45,319
ready to actually give the details of the parsing algorithm. And the first step is

34
00:02:45,319 --> 00:02:51,319
to define a table go to. And this maps a state and a symbol to another state. And

35
00:02:51,319 --> 00:02:55,200
this is just the transition function of the DFA. This is the graph of the DFA

36
00:02:55,200 --> 00:03:02,200
written out as an array. Our SLR parsing algorithm will have four possible moves. A

37
00:03:03,890 --> 00:03:09,700
shift X move will push a pair on the stack. X is a DFA state, so that's named

38
00:03:09,700 --> 00:03:15,790
in the shift move now. And then the other element of the pair is the current input.

39
00:03:15,790 --> 00:03:20,140
And then we'll also have reduce moves, which are just as before. So, to recall, a

40
00:03:20,140 --> 00:03:24,069
reduce move will pop, the, a number of elements from the stack equal to the

41
00:03:24,069 --> 00:03:27,810
length of the right hand side. And then it will push the left hand side onto the

42
00:03:27,810 --> 00:03:32,970
stack. And then finally, accept an error moves for when we've successfully parsed

43
00:03:32,970 --> 00:03:38,760
the input, and for when the parser gets stuck. The second parsing table is the

44
00:03:38,760 --> 00:03:43,800
action table which tells us which kind of move to make in every possible state. The

45
00:03:43,800 --> 00:03:49,940
action table's indexed by a state of the automaton and the next input symbol. And

46
00:03:49,940 --> 00:03:56,120
then the possible moves are things like shift, reduce, accept, or error. So let's

47
00:03:56,120 --> 00:04:00,720
consider if we do shifts, if the final state of the automaton at the top of the

48
00:04:00,720 --> 00:04:07,379
stack has an item that says it would be okay to shift an A. And go to that is from

49
00:04:07,379 --> 00:04:14,379
this state we can go to state J on input A. Then the move in state I on input A

50
00:04:16,099 --> 00:04:20,829
will be to shift AJ onto the stack And th ink about what that means for a second.

51
00:04:20,829 --> 00:04:26,789
What that says is that we have a stack. And then the next input is A. And then at

52
00:04:26,789 --> 00:04:31,569
this point, it's okay to shift an A onto the stack. And furthermore, that the state

53
00:04:31,569 --> 00:04:36,749
of the automaton at this point is SI. Okay. So the state of Irarta [inaudible]

54
00:04:36,749 --> 00:04:41,419
the top of the stack is SI. The next input is A. Remember that the go to table is a

55
00:04:41,419 --> 00:04:47,199
transition function of the machine. So if we move the vertical bar over, if we shift

56
00:04:47,199 --> 00:04:51,249
that A on to the stack, well, now, we don't just put A on the stack, we have to

57
00:04:51,249 --> 00:04:55,439
put a pair on the stack. And the question is what machine state should go there.

58
00:04:55,439 --> 00:05:00,389
Well, it's going to be state that we would reach from state I from state SI on input

59
00:05:00,389 --> 00:05:05,839
A, which. The go to table tells us, in this case, is state SJ. And for that

60
00:05:05,839 --> 00:05:11,150
reason, the action, when we terminate in state I, and the next input is A, is to

61
00:05:11,150 --> 00:05:18,150
shift the pair A, J, onto the stack. The other three moves that go into the action

62
00:05:18,909 --> 00:05:23,050
table are things we've already seen. So if the final state of the automaton at the

63
00:05:23,050 --> 00:05:27,229
top of the stack has an item that says that we can reduce, and the follow up

64
00:05:27,229 --> 00:05:32,300
condition requirement is satisfied. Mainly, that the, next input can follow,

65
00:05:32,300 --> 00:05:38,919
the left hand side non terminal of the production. Then in the entry I, for,

66
00:05:38,919 --> 00:05:43,099
[inaudible] if we're in state SI and we have input a, we can reduce by the

67
00:05:43,099 --> 00:05:47,800
production x goes to alpha. And there's one exception here, we're not going to do

68
00:05:47,800 --> 00:05:52,879
that reduction, if the left-hand side is the special start symbol, the new start

69
00:05:52,879 --> 00:05:58,289
symbol that we add to the grammar, is prime. Because, in that case, if the item

70
00:05:58,289 --> 00:06:02,800
that we're going to reduce by is s-prime goes to s-dot, and we're at the end of the

71
00:06:02,800 --> 00:06:09,449
input, then we want to accept. And any other Situation is an error. So in any

72
00:06:09,449 --> 00:06:14,639
other situation, if we're in state I and we have the next the next input is A,

73
00:06:14,639 --> 00:06:18,869
well, we don't know whether to shift, reduce, or accept. And so, that is an

74
00:06:18,869 --> 00:06:25,399
error state. Finally, here is the full SLR parsing algorithm. And I'm just going to

75
00:06:25,399 --> 00:06:28,460
walk you through it, so that we can see how all of the ideas we've been di

76
00:06:28,460 --> 00:06:32,979
scussing, and all the various pieces fit together. Let's let our initial input be

77
00:06:32,979 --> 00:06:36,779
called I. And we'll just give it a name, and it's gonna be treated as an array that

78
00:06:36,779 --> 00:06:41,669
we can index. The index will be called J, and initially, it's zero so that we're

79
00:06:41,669 --> 00:06:46,819
pointing to the first token in the input string. We'll just assume that the first

80
00:06:46,819 --> 00:06:51,009
state of the DFA is called state one. And, that means our initial stack is going to

81
00:06:51,009 --> 00:06:56,029
have state one for the state of the automaton and some other dummy symbol that

82
00:06:56,029 --> 00:07:00,649
we don't care about In the, in the first position. So, the stack is just a pair

83
00:07:00,649 --> 00:07:04,529
with [inaudible] in the start state of the DFA. And now, were going to repeat the

84
00:07:04,529 --> 00:07:09,599
following loop until we've either successfully pars the input or we detect

85
00:07:09,599 --> 00:07:14,149
an error. And at its steps, what we're going to do? Well, we're going to look at

86
00:07:14,149 --> 00:07:19,569
the next input symbol and we're going to look at the final state of the automaton

87
00:07:19,569 --> 00:07:23,679
on the stack contents and that's always the state of the pair that's on the top of

88
00:07:23,679 --> 00:07:27,119
the stack and we're gonna look those two things up in the action table and that's

89
00:07:27,119 --> 00:07:30,909
gonna tell us what kind of move to make. So, let's just go through the moves in

90
00:07:30,909 --> 00:07:36,969
order. Let's consider the shift move first. So, what happens? If were, if it

91
00:07:36,969 --> 00:07:42,119
says we're supposed to shift and going to state K, then what we're going to do is

92
00:07:42,119 --> 00:07:45,490
we're going to shift the input, that means we're going to take the next input symbol

93
00:07:45,490 --> 00:07:49,740
and, or the current input symbol, excuse me, and we're going to push that on to the

94
00:07:49,740 --> 00:07:53,879
stack together with state K of the [inaudible]. That pair goes on to the

95
00:07:53,879 --> 00:07:58,709
stack, and we also bumb the input pointer so that we're looking at the next

96
00:07:58,709 --> 00:08:03,689
character of input. Now. Let me erase that so you can continue to read it. Now what

97
00:08:03,689 --> 00:08:09,619
about the reduce moves? So this one's a little bit interesting. First thing we're

98
00:08:09,619 --> 00:08:14,580
going to do is we're going to pop a number of pairs off the, off the stack that's

99
00:08:14,580 --> 00:08:18,699
equal to the length of the right-hand side. So we pop a number of items off the

100
00:08:18,699 --> 00:08:21,569
stack that's going to the right that's equal to the right-hand side of the

101
00:08:21,569 --> 00:08:25,580
production, and then what do w e push on to the stack? Well we're gonna push the

102
00:08:25,580 --> 00:08:29,949
non-terminal on the left-hand side of the stack. And now the question is: what state

103
00:08:29,949 --> 00:08:36,410
goes on to the stack? What DFA state? Well. With that we've popped the stack. We

104
00:08:36,409 --> 00:08:41,440
can look at the new top state of the stack. So the DFA state was now the top

105
00:08:41,440 --> 00:08:45,380
state. After we've done the pops we'll tell us what the final state of the DFA

106
00:08:45,380 --> 00:08:49,430
was and what is left of the stack. And then now that we're pushing X under the

107
00:08:49,430 --> 00:08:55,170
stack we want to know what state the DFA would go into on the transition labeled X.

108
00:08:55,170 --> 00:08:59,750
And so we use the Go To table to look that up, The current top state of the stack. On

109
00:08:59,750 --> 00:09:05,050
symbol X, where does the FA go? That is the state that gets pushed onto the stack.

110
00:09:05,050 --> 00:09:09,500
And then finally, if, if the move is accept, we halt normally. And if the move

111
00:09:09,500 --> 00:09:16,500
is error, we halt and report an error, or execute our error recovery procedure. One

112
00:09:16,860 --> 00:09:21,090
interesting fact about this algorithm is that it only uses the DFA state and the

113
00:09:21,090 --> 00:09:26,370
input. The stack symbols are not used in really interesting way. And so, we could

114
00:09:26,370 --> 00:09:31,110
actually get rid of the stack symbols and just do parsings with the DFA states on

115
00:09:31,110 --> 00:09:35,090
the stack. But, that of course would be throwing away the program and we still

116
00:09:35,090 --> 00:09:38,780
actually need to program for the later stages of the compiler. And so to do the

117
00:09:38,780 --> 00:09:45,520
type checking and co-generation, we need to keep the symbols around. Now simple LR

118
00:09:45,520 --> 00:09:49,680
parsing is called simple for a reason. And in fact, in practice, it's a bit too

119
00:09:49,680 --> 00:09:54,310
simple. The widely used bottom-up parsing algorithms are based on a more powerful

120
00:09:54,310 --> 00:09:59,840
class of grammars called the LR grammars. And the basic difference between the LR

121
00:09:59,840 --> 00:10:04,740
grammars and the SLR grammars is that look ahead is built into the items. So what

122
00:10:04,740 --> 00:10:11,740
does that mean? Well, a LR1 item is going to be a pair which consists of an item,

123
00:10:12,930 --> 00:10:17,680
Just like we saw before. And this means exactly the same thing as before. And a

124
00:10:17,680 --> 00:10:23,110
look-ahead, In case of an LR1 item there's just one token of look-ahead. If this was

125
00:10:23,110 --> 00:10:26,970
an LR2 item there could be two tokens of look-ahead in there. And the meaning of

126
00:10:26,970 --> 00:10:32,920
this pair is that, if we ever get aroun d to state where we have seen all of this

127
00:10:32,920 --> 00:10:36,340
production, all the right-hand side of this production. Then it's going to be

128
00:10:36,340 --> 00:10:41,030
okay to reduce, if the look-ahead at that point is Dollar that's the end of the

129
00:10:41,030 --> 00:10:45,500
input. And of course, there could be any other token in there any other terminal

130
00:10:45,500 --> 00:10:49,790
symbol in there besides dollar. And this turns out to be more accurate than just

131
00:10:49,790 --> 00:10:54,650
using follow sense recall that the point where a reduction decision is made in SLR

132
00:10:54,650 --> 00:10:59,940
parsing, we just look at the entire follow set for the symbol on the left hand side

133
00:10:59,940 --> 00:11:04,980
of the production. And this mechanism of encoding the look-ahead in to the items

134
00:11:04,980 --> 00:11:10,110
allow us to track and find the [inaudible] which look-aheads are actually possible in

135
00:11:10,110 --> 00:11:17,080
particular production sequences. And if you look at the automaton for your parser,

136
00:11:17,080 --> 00:11:23,360
actually it's not an LR1 automaton. It's an LALR1 automaton, which is something

137
00:11:23,360 --> 00:11:30,070
very close, to an LR automaton, it's a little bit of an optimization over an LR,

138
00:11:30,070 --> 00:11:34,030
a pure LR automaton, but anyway, it uses exactly the same kinds of items with this

139
00:11:34,030 --> 00:11:40,520
pair of a of a standard LR0 item in a look ahead. If you look at that automaton, you

140
00:11:40,520 --> 00:11:46,350
will see items that look like this, and that will help you in reading the

141
00:11:46,350 --> 00:11:47,570
automaton and figuring out what it is doing.
