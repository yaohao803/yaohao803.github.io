0
00:00:03,720 --> 00:00:07,260
In this video, we're going to begin a discussion of Register Allocation which is

1
00:00:07,260 --> 00:00:11,770
one of the most sophisticated things that compilers do to optimize performance and

2
00:00:11,770 --> 00:00:15,160
also involves many of the concepts that we've been discussing in global flow

3
00:00:15,160 --> 00:00:21,929
analysis. Recall that intermediate code can use unlimited numbers of temporaries

4
00:00:21,929 --> 00:00:26,179
and this simplifies a number of things. Particularly it simplifies optimization so

5
00:00:26,179 --> 00:00:31,029
we don't have to worry about preserving the right number of registers in the code.

6
00:00:31,029 --> 00:00:35,260
But, it does complicate the final translation into assembly code cuz we

7
00:00:35,260 --> 00:00:40,640
might be using too many temporaries and this is actually a problem in practice.

8
00:00:40,640 --> 00:00:44,830
So, it's not uncommon at all for intermediate code to use more temporaries

9
00:00:44,830 --> 00:00:51,140
than there are registers on the target machine. The problem then is to rewrite

10
00:00:51,140 --> 00:00:55,990
the intermediate code to use no more temporaries than there are machine

11
00:00:55,990 --> 00:01:00,150
registers and the way we're going to do that is we're going to assign multiple

12
00:01:00,150 --> 00:01:05,689
temporaries to each register. So, we're going to have a many-one mapping. A many

13
00:01:05,689 --> 00:01:12,689
to one mapping from temporaries to registers, okay? And, clearly there's a

14
00:01:13,740 --> 00:01:18,790
little bit of an issue here if we really are using many temporaries, we will not be

15
00:01:18,790 --> 00:01:22,490
able to fit them all into a single register. So there needs to be some kind

16
00:01:22,490 --> 00:01:26,080
of a trick and we'll say what that trick is in a few minutes and there will be

17
00:01:26,080 --> 00:01:29,030
situations actually when this will fail, we'll have to have some kind of back up

18
00:01:29,030 --> 00:01:36,030
plan. But our default plan is to try to put as many temporaries as possible into

19
00:01:36,030 --> 00:01:40,780
the same machine register. And doing all of this without changing the behavior of

20
00:01:40,780 --> 00:01:47,780
the program. So, how can we do this? Magic thing. How can we actually make a single

21
00:01:49,140 --> 00:01:54,010
register hold multiple values? Well, the trick is that it's fine for registers to

22
00:01:54,010 --> 00:01:58,940
have local values as long as it only has one value at a time. So, let's consider

23
00:01:58,940 --> 00:02:03,530
this program, I'm going to switch colors here. Okay. Simple three statement program

24
00:02:03,530 --> 00:02:08,670
and notice here that a is used in the first two statements. So it's written in

25
00:02:08,669 --> 00:02:12,790
the first statement, read in the second stateme nt e is written in the second

26
00:02:12,790 --> 00:02:16,819
statement and read in the third statement and that is only written in the third

27
00:02:16,819 --> 00:02:21,090
statement. And actually, these three values a, e and f, they don't ever really

28
00:02:21,090 --> 00:02:26,090
co-exist at the same time but at the time we've read a we are really done with it.

29
00:02:26,090 --> 00:02:29,040
We've all the uses that they are going to have in this little code fragment. Here,

30
00:02:29,040 --> 00:02:32,849
I'm assuming that a and effort are not used anywhere else and so it turns out

31
00:02:32,849 --> 00:02:37,810
that a, e, and f could all actually live in the same register. Alright, that's

32
00:02:37,810 --> 00:02:43,270
assuming that a and e are dead after their uses. And what will that look like, well

33
00:02:43,270 --> 00:02:48,620
let's allocate them all to a particular register r1 and let's assign c, d, and b

34
00:02:48,620 --> 00:02:53,930
into their own individual registers and the code would like this, r1 would be r2 +

35
00:02:53,930 --> 00:03:00,400
r3, and then r1 would be r1 + r4 and r1 would be r1 - one. And so now notice how

36
00:03:00,400 --> 00:03:05,450
this is just a transliteration of the code over here into registers but there is a

37
00:03:05,450 --> 00:03:12,450
many one mapping of names on the left to register names on the right. A register

38
00:03:14,819 --> 00:03:20,879
allocation is an old problem. In fact, it was first recognized way back in the 1950s

39
00:03:20,879 --> 00:03:25,660
in the original Fortran project but originally, register allocation was done

40
00:03:25,660 --> 00:03:31,519
with a fairly crude algorithms and who is rapidly or very quickly noticed that was

41
00:03:31,519 --> 00:03:36,430
actually a bottle neck in the quality of code generation that actually limitations

42
00:03:36,430 --> 00:03:40,239
on the ability of register allocation and do a good job have a really significant

43
00:03:40,239 --> 00:03:44,410
effect on the overall equality, overall quality of the code that compilers could

44
00:03:44,410 --> 00:03:51,060
produce. And then about 30 years later, in 1980, a breakthrough occurred where people

45
00:03:51,060 --> 00:03:54,840
discovered or a group of researchers at IBM discovered a register allocation

46
00:03:54,840 --> 00:03:59,019
scheme based on graph coloring. And the great thing about this scheme is that it's

47
00:03:59,019 --> 00:04:04,019
pretty simple. It's easy to explain. It's global, meaning it takes advantage of

48
00:04:04,019 --> 00:04:08,150
information from the entire control flow graph at the same time and also happens to

49
00:04:08,150 --> 00:04:15,150
work well in practice. And here's the basic principle that underlies the modern

50
00:04:18,029 --> 00:04:23,370
register allocation algorithms. So, if I have two temporaries t1 and t2, I want to

51
00:04:23,370 --> 00:04:27,430
know when they can share register. So, they're allowed to share a register and

52
00:04:27,430 --> 00:04:32,970
they're allowed to be in the same register if they are not live at the same time,

53
00:04:32,970 --> 00:04:38,250
okay? So like I said, any point in the program in most one of t1 or t2 as live.

54
00:04:38,250 --> 00:04:43,889
And we are more concise which I already said was partially is, is that if t2, t1

55
00:04:43,889 --> 00:04:48,710
and t2 are live at the same time, okay? Meaning that there's, there's some program

56
00:04:48,710 --> 00:04:54,030
point were both are live then they cannot share a register, alright? So this is the

57
00:04:54,030 --> 00:04:59,000
negative form of the statement and it just tells you that if, if you need two values

58
00:04:59,000 --> 00:05:05,280
at the same moment in time, then they have to be in separate registers. Let's take a

59
00:05:05,280 --> 00:05:09,970
look at a control flow graph and now, we know that in order to do the register allocation

60
00:05:09,970 --> 00:05:14,120
to solve the register allocation at least in this in this way, we're going to need

61
00:05:14,120 --> 00:05:18,910
liveness information. So, let's compute the live variables for each point of this

62
00:05:18,910 --> 00:05:25,910
program. So, here it is and I'll just walk through it very quickly. Let's assume that

63
00:05:26,160 --> 00:05:31,380
on exit from this loop that only b is live. So b is the output of this piece of

64
00:05:31,380 --> 00:05:35,650
the code and it's used elsewhere but none of the other variables are live. So, now

65
00:05:35,650 --> 00:05:41,389
if we work backwards, remember that line is a backward analysis. We'll see here

66
00:05:41,389 --> 00:05:46,040
that b is written so it's not live before the statement but f and c are read. So,

67
00:05:46,040 --> 00:05:52,780
both c and f are live before this basic block. Okay, and similarly if we, if we go

68
00:05:52,780 --> 00:05:56,940
up another level here, here we see that e is now alive and f is dead because f was

69
00:05:56,940 --> 00:06:02,820
written here and e was read. And over on this path, here we have another exit where

70
00:06:02,820 --> 00:06:09,660
b is live and now at this point here right after this basic block the set of lot

71
00:06:09,660 --> 00:06:15,229
variables that are live is b, c, and f because b is live on one path and c and f

72
00:06:15,229 --> 00:06:19,220
are live on the other path. Remember for something to be live, it only has to be

73
00:06:19,220 --> 00:06:24,550
live on some, in some future possible evolution of the execution. So, on some

74
00:06:24,550 --> 00:06:30,910
path out of this node is a variables live, then it's live at the exit from this.

75
00:06:30,910 --> 00:06:37,910
Working backwards here. B, c, and f are live here because e is read. And b, c, and

76
00:06:39,039 --> 00:06:45,449
f are not referred to in this statement and so they just propagate upwards. Here b

77
00:06:45,449 --> 00:06:49,970
is removed from the live f because it's written but d is added and set here and

78
00:06:49,970 --> 00:06:54,310
similarly, for the other edges in this graph. If you go and check all the other

79
00:06:54,310 --> 00:06:58,830
edges you will see that the live set is correct and it just follows from the

80
00:06:58,830 --> 00:07:05,150
simple rules we gave in the previous video. But how are going to use the

81
00:07:05,150 --> 00:07:08,810
liveness information to do register allocation? Well, we're going to construct

82
00:07:08,810 --> 00:07:13,520
and undirected graph and in this graph, there will be a node for each temporaries

83
00:07:13,520 --> 00:07:18,319
so each variable will have a node in the graph and there'll be an edge between two

84
00:07:18,319 --> 00:07:22,710
temporaries if they are live simultaneously at some point in the

85
00:07:22,710 --> 00:07:29,350
program, alright? So backing up and looking at our little example here, we can

86
00:07:29,350 --> 00:07:33,090
see for example at this point in the program c and e are both live. They're

87
00:07:33,090 --> 00:07:39,520
both in the live set after this basic block executes. So c and e cannot be in

88
00:07:39,520 --> 00:07:46,520
the same register. Alright, continuing on, this is called, this data structure, this

89
00:07:47,090 --> 00:07:53,550
graph is called the Register Interference Graph or RIG for short. And again, the

90
00:07:53,550 --> 00:07:57,060
basic idea is that two temporaries can be allocated in the same register if there is

91
00:07:57,060 --> 00:08:03,419
no edge connecting them in the register interference graph. So, here's a register

92
00:08:03,419 --> 00:08:10,419
interference graph for our example. This is the graph constructed from the code and

93
00:08:11,229 --> 00:08:15,630
the line analysis that we're given a few slides ago and you know, it's easy to read

94
00:08:15,630 --> 00:08:20,280
off from the graph what the constraints are. So, for example b and c cannot be in

95
00:08:20,280 --> 00:08:24,639
the same register because b and c are connected by an edge. Okay, seeing that

96
00:08:24,639 --> 00:08:28,520
they're live simultaneously at some part, some point in the program and so they have

97
00:08:28,520 --> 00:08:32,389
to live in different registers. On the other hand, there is at, there is no edge

98
00:08:32,389 --> 00:08:37,659
between b and d, okay. So, this edge is missing and therefore, it's possible that

99
00:08:37,659 --> 00:08:41,659
b and d could be allocated in the same register. They are live ranges all the

100
00:08:41,659 --> 00:08:48,659
times in which they are alive do not overlapped. So a great thing about the

101
00:08:48,759 --> 00:08:52,759
register interference graph is that it extracts exactly the information needed to

102
00:08:52,759 --> 00:08:57,369
characterize a legal register assignment. So, it gives us a representation of all

103
00:08:57,369 --> 00:09:00,949
the possible legal register assignments. Now, I haven't said I haven't actually get

104
00:09:00,949 --> 00:09:04,889
a register assignment out of the register interference graph, but the first step is

105
00:09:04,889 --> 00:09:10,139
to characterize the problem in some kind of precise way. And the graph of, cannot

106
00:09:10,139 --> 00:09:15,230
live in the same register constraints does that for us. The other thing that is good

107
00:09:15,230 --> 00:09:19,689
about is a, is a global view of the register requirements meaning it's over

108
00:09:19,689 --> 00:09:23,639
the entire control flow graphs. So, takes into account information from every part

109
00:09:23,639 --> 00:09:27,869
of control flow graph which will help us to make good global decisions about what

110
00:09:27,869 --> 00:09:33,179
value is very important to live in registers. And finally, the other thing to

111
00:09:33,179 --> 00:09:37,199
notice is that, that after reconstruction, the register allocation for algorithm is

112
00:09:37,199 --> 00:09:40,670
going, is architecture independent. I haven't shown you the algorithm so you

113
00:09:40,670 --> 00:09:44,249
just have to believe the statement for the moment but it's going to turn out that

114
00:09:44,249 --> 00:09:47,939
were not going to depend on any property of the machine except for the number of

115
00:09:47,939 --> 00:09:50,999
registers. So, that's the only thing we need to know about the machine in order to

116
00:09:50,999 --> 00:09:54,230
take a RIG and, and do register allocation using it.
