0
00:00:04,799 --> 00:00:09,030
In this video, we're gonna talk about the core data structure used in compilers, the

1
00:00:09,030 --> 00:00:16,030
abstract syntax tree. To briefly review, a parser traces the derivation of a sequence

2
00:00:18,320 --> 00:00:23,050
of tokens but this by itself Is not all that useful to the compiler because the

3
00:00:23,050 --> 00:00:27,409
rest of the compiler needs some representation of the program. It needs an

4
00:00:27,409 --> 00:00:31,529
actual data structure that tells it what the operations are in the program and how

5
00:00:31,529 --> 00:00:36,100
they're put together. Well, we know one such data structure is called a Parse Tree

6
00:00:36,100 --> 00:00:41,010
but it turns out that a Parse Tree really isn't what we wanted to work on. Instead,

7
00:00:41,010 --> 00:00:45,429
we wanted to work on something called an Abstract Syntax Tree. And the Abstract

8
00:00:45,429 --> 00:00:50,789
Syntax Tree is really just the Parse Tree but with some details ignored. We have

9
00:00:50,789 --> 00:00:55,129
abstracted a way From some of the details of the Parse Tree. And here's an

10
00:00:55,129 --> 00:01:02,129
abbreviation that you'll see, ASTs stand for Abstract Syntax Tree. So, let's look

11
00:01:02,199 --> 00:01:08,590
at the grammar. Here's the grammar for plus expressions over the integers and we

12
00:01:08,590 --> 00:01:14,640
also parenthesize expressions. And here's a string and after lexical analysis, what

13
00:01:14,640 --> 00:01:19,360
do we have? Well, we've got a sequence of tokens again with their associated lexemes

14
00:01:19,360 --> 00:01:24,690
telling us what the actual strings were. And that gets past into the parser and

15
00:01:24,690 --> 00:01:30,130
then we build a parse tree. And here's a parse tree for that expression. Now, if

16
00:01:30,130 --> 00:01:34,470
it's expressed that this representation, the parse tree is actually perfectly

17
00:01:34,470 --> 00:01:39,330
adequate for compilation. We could do our compiler using the parse tree. This is a

18
00:01:39,330 --> 00:01:43,970
faithful representation of the program. The problem is that it would be quite

19
00:01:43,970 --> 00:01:48,340
inconvenient to do that and to see this, it only point out some features of the

20
00:01:48,340 --> 00:01:52,470
parse tree. First of all you can see if the parse tree is quite robust so for

21
00:01:52,470 --> 00:01:58,680
example we have here a node e and it has only one child. So when there's only one

22
00:01:58,680 --> 00:02:03,500
successor of the, of the node, what is that really doing for us? Well, we don't

23
00:02:03,500 --> 00:02:07,880
really need the e at all, we could just put the, The five right here and, and make

24
00:02:07,880 --> 00:02:13,450
the tree smaller and similarly for the other single successor nodes. Furthermore

25
00:02:13,450 --> 00:02:16,840
these parentheses h ere, well these are very important in parsing because they

26
00:02:16,840 --> 00:02:22,810
show the association of, of this, of the arguments with respect to these two plus

27
00:02:22,810 --> 00:02:26,810
operations. It shows that this plus is nested; this plus down here is nested

28
00:02:26,810 --> 00:02:30,870
inside. Of this plus up here But once we've done the parsing, the tree structure

29
00:02:30,870 --> 00:02:35,090
shows us the same thing. We don't need to know that these were inside a parenthesis,

30
00:02:35,090 --> 00:02:39,280
that the fact that these two expressions or the argument of this plus already tells

31
00:02:39,280 --> 00:02:43,780
us all we need to know. And so, you know? All of these nodes in here are also in a

32
00:02:43,780 --> 00:02:49,510
sense redundant. We don't really need that information anymore. And so we prefer to

33
00:02:49,510 --> 00:02:54,040
do is to use something called an Abstract Syntax Tree that just compresses out all

34
00:02:54,040 --> 00:02:59,460
the junk in the Parse Tree. So here is a. Abstract syntax tree or a hypothetical

35
00:02:59,460 --> 00:03:03,180
abstract syntax tree that would represent the same thing as the parse tree on the

36
00:03:03,180 --> 00:03:08,430
previous slide and you can see here we've really just cut it down to the essential

37
00:03:08,430 --> 00:03:13,690
items. We have the two+ nodes. We have the three. Arguments and the association is

38
00:03:13,690 --> 00:03:17,990
just shown by which plus node is nested inside the other. We don't have any of the

39
00:03:17,990 --> 00:03:22,600
extraneous nonterminals. We don't have the parenthesis. Everything is much simpler

40
00:03:22,600 --> 00:03:27,040
and you can imagine that it'll be easier to write algorithms that walk over a

41
00:03:27,040 --> 00:03:31,849
structure like this rather than the, the rather, elaborate structure we had on the

42
00:03:31,849 --> 00:03:38,099
previous slide. Of course again is called an abstract syntax tree because it

43
00:03:38,099 --> 00:03:42,870
abstracts away from the concrete syntax. We suppress details of the concrete syntax

44
00:03:42,870 --> 00:03:47,459
and just keep enough information to be able to faithfully represent the program

45
00:03:47,459 --> 00:03:48,260
and compile it.
