0
00:00:03,080 --> 00:00:06,200
In the last several videos, we've been talking about doing a kind of abstract

1
00:00:06,200 --> 00:00:11,570
computation. Computing with elements like Bottom the Constants and Top. And, in this

2
00:00:11,570 --> 00:00:14,950
video, we're going to start to generalize those ideas a little bit. And the first

3
00:00:14,950 --> 00:00:18,490
thing we're going to talk about, the first step towards that generalization, is to

4
00:00:18,490 --> 00:00:24,510
talk about orderings of those values. First, I'd like to introduce a technical

5
00:00:24,510 --> 00:00:28,660
term. These values that we compute within program analysis, things like Bottom, the

6
00:00:28,660 --> 00:00:34,590
Constants and Top, these are called Abstract Values. And that's just to

7
00:00:34,590 --> 00:00:37,940
distinguish them from the Concrete Values, so the Concrete Values are the actual

8
00:00:37,940 --> 00:00:43,180
run-time values that a program computes with. Things like actual objects, and

9
00:00:43,180 --> 00:00:48,549
numbers and things like that. And the Abstract Values here the program analysis

10
00:00:48,549 --> 00:00:54,350
uses are in general, more abstract. Some particular Abstract Values can stand for a

11
00:00:54,350 --> 00:01:00,100
set of possible Concrete Values. And in a particular set of Abstract Values we're

12
00:01:00,100 --> 00:01:04,330
using for concept propagation, there's only one very Abstract Value and that's

13
00:01:04,330 --> 00:01:09,290
the Top and it stands for any possible run time value. So it stands for the entire

14
00:01:09,290 --> 00:01:14,040
set of run time values. Anyway, it turns out that there is a way to simplify the

15
00:01:14,040 --> 00:01:18,410
presentation of, of the analysis that we have been discussing by ordering the

16
00:01:18,410 --> 00:01:22,940
Abstract Values. So we're going to say is that Bottom is less than all the constants

17
00:01:22,940 --> 00:01:29,060
and that, and all the Constants are less than Top. And so if we draw a picture with

18
00:01:29,060 --> 00:01:32,760
the lower values drawn towards at the bottom picture and the higher values drawn

19
00:01:32,760 --> 00:01:39,300
at the top. And, and edges between values where there's a relationship, we get this

20
00:01:39,300 --> 00:01:43,710
diagram here. So you have bottom down here, underneath all the other values,

21
00:01:43,710 --> 00:01:46,920
Bottom is less than every Constant. Okay. So notice that all the constants are here

22
00:01:46,920 --> 00:01:50,610
on the middle level, alright? And also notice that the constants are not

23
00:01:50,610 --> 00:01:55,400
comparable to each other, alright? So this ordering is different than the numeric

24
00:01:55,400 --> 00:02:00,200
ordering. So zero is not less than one for example. Zero and one are inco mparable,

25
00:02:00,200 --> 00:02:03,630
as are every other pair of Constants. So you have, you know, Bottom at the Bottom.

26
00:02:03,630 --> 00:02:07,120
You have all the Constants in the middle and they're incomparable, And then, bigger

27
00:02:07,120 --> 00:02:14,120
than everything else is Top. Now with the ordering defined, there's a useful

28
00:02:14,440 --> 00:02:19,180
operation we can define on collections of elements and that is the Least Upper

29
00:02:19,180 --> 00:02:26,180
Bound, or LUB, alright? And, and this means is taking the smallest element that

30
00:02:26,870 --> 00:02:31,200
is bigger than everything in the Least Upper Bound. So, for example, if I have

31
00:02:31,200 --> 00:02:37,620
the Least Upper Bound of Bottom and one, that is equal to one, okay? If I had the

32
00:02:37,620 --> 00:02:44,620
Least Upper Bound of Top and Bottom, that is equal to Top. And perhaps more

33
00:02:45,950 --> 00:02:51,959
interesting one, the Least Upper Bound of one and two, so two incomparable Constants

34
00:02:51,959 --> 00:02:55,209
here. And remember, the meaning of the Least Upper Bound, it's the smallest

35
00:02:55,209 --> 00:03:00,069
element in the ordering that's bigger than everything over which we're taking the

36
00:03:00,069 --> 00:03:03,640
Least Upper Bound. So we just have two things here in our Least Upper Bound. But

37
00:03:03,640 --> 00:03:07,870
the Least Upper Bound of one and two, the smallest thing that's bigger than both of

38
00:03:07,870 --> 00:03:13,520
them, or greater than or equal I should say, both of them is Top, okay? And so,

39
00:03:13,520 --> 00:03:17,319
the Least Upper Bound then, if you think about it, if you draw, draw our picture

40
00:03:17,319 --> 00:03:23,989
again. So we had Bottom and we had Top, and if you pick out some points here,

41
00:03:23,989 --> 00:03:26,680
let's say we want to take the Least Upper Bound of Bottom and two, you're just

42
00:03:26,680 --> 00:03:30,660
picking the smallest thing that's bigger than both. Well, that's going to be two

43
00:03:30,660 --> 00:03:34,709
itself, similarly two on Top, you will get Top. And then if have anything that's

44
00:03:34,709 --> 00:03:37,430
incomparable, then you have to pick something that's bigger than both of them

45
00:03:37,430 --> 00:03:41,860
and in this case that will always end up being Top for this very simple ordering,

46
00:03:41,860 --> 00:03:47,090
alright? Then given this idea of the Least Upper Bound, it turns out that rules one

47
00:03:47,090 --> 00:03:52,349
through four, all they're doing is computing the Least Upper Bound. So the in

48
00:03:52,349 --> 00:03:58,489
of a statement is just equal to the Least Upper Bound of the out of all the

49
00:03:58,489 --> 00:04:02,459
predecessors. Alright, and that's all that rules one through four we're saying. And

50
00:04:02,459 --> 00:04:05,959
if you remember what we had there, we had, you know, we had a bunch of predecessors

51
00:04:05,959 --> 00:04:10,180
and then there's some kind of statement s, and all we're doing is whatever the

52
00:04:10,180 --> 00:04:16,750
information is on these predecessors, we're just taking the Least Upper Bound

53
00:04:16,750 --> 00:04:23,750
over it, all right? And that is the information on entry to, to s. The

54
00:04:24,960 --> 00:04:29,490
ordering on the Abstract Values also helps to clarify another important aspect of our

55
00:04:29,490 --> 00:04:34,419
analysis algorithm which is why it terminates. So remember the algorithm's

56
00:04:34,419 --> 00:04:40,669
termination condition is to repeat to repeatedly apply the rules until nothing

57
00:04:40,669 --> 00:04:44,110
changes, until there are no more inconsistencies in the control flow graph

58
00:04:44,110 --> 00:04:48,259
and there's no information left to update. Well, just because we say we're going to

59
00:04:48,259 --> 00:04:52,259
repeat until nothing changes, that doesn't guarantee that eventually nothing changes.

60
00:04:52,259 --> 00:04:56,099
It could be that, that goes on forever, that we always introduce new

61
00:04:56,099 --> 00:05:01,129
inconsistencies with every update and we never actually get to the point where all

62
00:05:01,129 --> 00:05:06,189
the information is consistent. So, the ordering actually shows why that can't

63
00:05:06,189 --> 00:05:09,779
happen and the algorithm is guaranteed to terminate. So remember that in every

64
00:05:09,779 --> 00:05:13,819
program point except the entry point, the values start as Bottom. So, they start at

65
00:05:13,819 --> 00:05:19,419
the lowest place in the ordering. And then if you look carefully at the rules, it's

66
00:05:19,419 --> 00:05:24,379
easy to see that the rules can only make the values increase at a program point. So

67
00:05:24,379 --> 00:05:30,229
Bottom can be promoted, can be changed at a given program point up to some Constant

68
00:05:30,229 --> 00:05:36,659
and, and, and another update could raise that Constant to Top but of course, once

69
00:05:36,659 --> 00:05:40,719
we get the Top, there's no greater element. And if the rules can only make

70
00:05:40,719 --> 00:05:45,669
the elements increase, then eventually we have to run out of elements that could be

71
00:05:45,669 --> 00:05:52,339
increased, okay? So what that says is that each piece of information we're computing,

72
00:05:52,339 --> 00:05:56,979
for every statement, for every variable, and for either in or out, it can change at

73
00:05:56,979 --> 00:06:00,629
most twice, okay? So it can go from a Bottom to a Constant, and from Constant to

74
00:06:00,629 --> 00:06:06,939
a Top but after that, it will never be updated again. And what this means is that

75
00:06:06,939 --> 00:06:11,419
the constant propagation algorithm that we've described is actually linear in

76
00:06:11,419 --> 00:06:16,629
program size. So the number of steps is gonna be bounded by the number of c values

77
00:06:16,629 --> 00:06:20,309
that we're trying to compute times two, cuz each one of those could change two

78
00:06:20,309 --> 00:06:25,569
times. And since there's one value for the entry and exit over the in and out of

79
00:06:25,569 --> 00:06:30,240
every statement, the total number of steps that the algorithm can possibly take is

80
00:06:30,240 --> 00:06:32,339
the number of program statements times four.
