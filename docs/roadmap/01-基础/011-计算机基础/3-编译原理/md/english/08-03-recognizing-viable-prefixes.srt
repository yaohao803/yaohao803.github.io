0
00:00:04,110 --> 00:00:07,760
In this video we're finally gonna come to the technical highlight of bottom up

1
00:00:07,760 --> 00:00:11,660
parsings After all the definitions of the previous videos now we're actually gonna

2
00:00:11,660 --> 00:00:18,660
be able to give the algorithm for recognizing viable prefixes. So let's dive

3
00:00:18,750 --> 00:00:23,960
straight into the algorithm. The first step is really just a very technical point

4
00:00:23,960 --> 00:00:28,540
and it's not, not that important. But we're going to do it anyway because it

5
00:00:28,540 --> 00:00:34,620
makes things simpler Is to add a dummy production as prime goes to S to our

6
00:00:34,620 --> 00:00:39,640
grammar of interest G. So, just to set the stage we are trying to compute the viable

7
00:00:39,640 --> 00:00:44,280
prefixes of G. We're trying to come up with a, algorithm for recognizing the

8
00:00:44,280 --> 00:00:48,829
viable prefixes of G. If S is the start symbol, we're going to make up a new start

9
00:00:48,829 --> 00:00:52,960
symbol as prime, so as prime would be the new start symbol of augmented grammar and

10
00:00:52,960 --> 00:00:57,239
it's just one production for as prime as prime goes to S. Right. So this just allow

11
00:00:57,239 --> 00:01:01,320
us to know exactly where our start symbol is used, in particular our new start

12
00:01:01,320 --> 00:01:05,189
symbol as prime is only used in one place and. Left hand side of this one

13
00:01:05,188 --> 00:01:10,900
production, and that just makes things a little bit simpler. Now, recall what we

14
00:01:10,900 --> 00:01:17,490
are trying to do. We claim that the set of viable prefixes for a given grammar is

15
00:01:17,490 --> 00:01:21,110
regular and so what we're going to do is we're going to construct a

16
00:01:21,110 --> 00:01:26,170
non-deterministic final automaton that recognizes the viable prefixes, okay? And

17
00:01:26,170 --> 00:01:32,200
the states of this NFA are going to be the items of the grammar. Now the input to the

18
00:01:32,200 --> 00:01:39,200
NFA is the stack. So the NFA reads the stack, okay? And then it, So let's

19
00:01:40,310 --> 00:01:43,549
indicate this, so the NFA is gonna take the stack as an argument, and it's either

20
00:01:43,549 --> 00:01:48,090
gonna say yes, that's a viable prefix, or no. And it's gonna read the stack from

21
00:01:48,090 --> 00:01:51,770
bottom to top. So it's gonna start at the bottom of the stack, and read towards the

22
00:01:51,770 --> 00:01:56,479
top of the stack. And our goal here is to write a non entromystic finite automaton

23
00:01:56,479 --> 00:02:02,030
that recognizes the valid stacks of the purser. So that is how we'll know. That,

24
00:02:02,030 --> 00:02:06,140
our parser hasn't really counted any parse errors. Because this automaton that we're

25
00:02:06,140 --> 00:02:10,789
going to construct will always output e ither yes, this stack is okay, meaning it

26
00:02:10,788 --> 00:02:17,540
could wind up, parsing, the input. Or no, what we've got on the stack now, doesn't

27
00:02:17,540 --> 00:02:22,790
resemble any valid stack for any possible parse of any input string for this

28
00:02:22,790 --> 00:02:29,790
grammar. Okay, so let's think about, what we, what we need the moves of this machine

29
00:02:30,810 --> 00:02:36,340
to be. So let's say that we're in the state E, arrow, alpha dot X beta. Now,

30
00:02:36,340 --> 00:02:43,200
what does that say? So that says that so far, we've seen alpha on the stack. Okay,

31
00:02:43,200 --> 00:02:48,000
so remember the machine is reading the stack from bottom to top. This records the

32
00:02:48,000 --> 00:02:52,660
fact that the machine has already seen 'quot;alpha'quot; on the stack. So, what would be an

33
00:02:52,660 --> 00:02:56,879
okay thing to see next on the stack? Well, if this is a valid stack, if having

34
00:02:56,879 --> 00:02:59,430
'quot;alpha'quot; on the stack at this point is valid, well then certainly it would be

35
00:02:59,430 --> 00:03:04,319
okay if the next thing on the stack was an 'quot;X.'quot; So, we have a transition that if

36
00:03:04,319 --> 00:03:08,690
we're in this state Where we are working on this production, and we've seen alpha

37
00:03:08,690 --> 00:03:13,349
on the stack. If the next thing is an X on input X, then we can go to this state.

38
00:03:13,349 --> 00:03:17,290
Where now we record the fact that we've seen alpha X on the stack, and we're

39
00:03:17,290 --> 00:03:22,269
waiting to see, the remaining portion, beta, of that production. Okay, so this is

40
00:03:22,269 --> 00:03:28,580
one kind of move that the non triamistic phymotine can make, and again, we do, we

41
00:03:28,580 --> 00:03:33,980
add this kind of a move for every item. So for every item in the grammar, I, if it,

42
00:03:33,980 --> 00:03:37,569
if the dot is not all the way at the right end, then there will be a move like this

43
00:03:37,569 --> 00:03:42,069
where the dot moves over, for whatever symbol happens to come to the right of the

44
00:03:42,069 --> 00:03:48,349
dot. The other class of transitions are the following And these are the, the more

45
00:03:48,349 --> 00:03:55,050
interesting ones. So let's say that we're in this, configuration here. Where again,

46
00:03:55,050 --> 00:04:02,040
we've seen alpha. And then the next thing on the stack is X. And here, X is a non

47
00:04:02,040 --> 00:04:08,319
terminal. [sound]. And I should have said that in the previous case. X was either a

48
00:04:08,319 --> 00:04:12,909
terminal or a non terminal. So this X here is any grammar symbol, not just a non

49
00:04:12,909 --> 00:04:17,060
terminal. But this, #four here, the, the moves here in part four are specifically

50
00:04:17,060 --> 00:04:23,319
for non terminals. Okay, so anyway, if, X is not on the stack. Okay, let's assume

51
00:04:23,319 --> 00:04:28,599
that we've seen alpha, and then the next thing on the stack is not S. Well, is it

52
00:04:28,599 --> 00:04:33,749
possible that there could be a valid configuration of the parser where we saw

53
00:04:33,749 --> 00:04:38,680
alpha but then X didn't appear next? And, the answer is yes because as we said

54
00:04:38,680 --> 00:04:43,770
before, the stack is a sequence of partial right hand sides. So it could be that all

55
00:04:43,770 --> 00:04:48,389
that's on the stack right now for this production. Is alpha and if the next thing

56
00:04:48,389 --> 00:04:53,029
on the stack is eventually going to reduce to X. It might not be X itself, it might

57
00:04:53,029 --> 00:04:57,110
be something that will eventually reduce to X. Well, what does that mean? Well,

58
00:04:57,110 --> 00:05:01,330
that means that whatever is there on the stack has to be derived from X, it has to

59
00:05:01,330 --> 00:05:07,159
be something that can be Generated by using a sequence of X productions, 'cause

60
00:05:07,159 --> 00:05:11,399
eventually it's going to reduce the X. So for every item that looks like this, and

61
00:05:11,399 --> 00:05:16,300
for every production for X now we're going to add the following move, we're going to

62
00:05:16,300 --> 00:05:20,649
say that if there's no X on the stack, well then, we can make an epsilon move, we

63
00:05:20,649 --> 00:05:25,129
can just shift to a state where we try to recognize the right hand side plus

64
00:05:25,129 --> 00:05:29,610
something derived from X. And these are the only two kinds of moves Either the

65
00:05:29,610 --> 00:05:33,509
items, eith sorry, either the grammar symbols we're looking for are there on the

66
00:05:33,509 --> 00:05:39,409
stack and we extend. >> The prefix of a right hand side. So this rule here extends

67
00:05:39,409 --> 00:05:44,180
a prefix. So as we see more of that production on the stack or, it tries to

68
00:05:44,180 --> 00:05:48,699
guess or tries to discover where the ends of the prefixes are. So if, if alpha's as

69
00:05:48,699 --> 00:05:52,999
much of the production that is on the stack currently, well then this must be,

70
00:05:52,999 --> 00:05:57,089
this x here must this, this point here must mark the start of another right hand

71
00:05:57,089 --> 00:06:00,960
side in our stack of right hand sides. So we would expect to see something derived

72
00:06:00,960 --> 00:06:07,960
from some production for x. Two more rules. Every state in this automaton is

73
00:06:08,749 --> 00:06:13,649
going to be an accepting state. That means that if the automaton manages to

74
00:06:13,649 --> 00:06:20,649
successfully consume the entire stack, then the then the stack is viable. And

75
00:06:20,809 --> 00:06:25,309
just notice that not every state is going to have transition on every possibl e,

76
00:06:25,309 --> 00:06:28,929
symbol. So there will be plenty of possible stacks that, that are rejected

77
00:06:28,929 --> 00:06:33,229
simply because the automaton gets stuck. And finally, the start state of this

78
00:06:33,229 --> 00:06:39,199
automaton is the item as prime goes to dot S. So remember, the states of the machine

79
00:06:39,199 --> 00:06:44,229
are the items of the grammar. And this is why we added, this, dummy production, is

80
00:06:44,229 --> 00:06:51,229
just so that we could conveniently name the start state. So now, let's consider,

81
00:06:51,509 --> 00:06:55,839
one of our, grammars we've been using a lot, so this is the grammar. And now we're

82
00:06:55,839 --> 00:07:00,639
going to augment it, with the extra production as prime goes to E. And let's

83
00:07:00,639 --> 00:07:06,389
take a look at the automaton for that recognizes the viable prefixes of this

84
00:07:06,389 --> 00:07:11,330
grammar. And here it is, and as you can see, it's rather large it has a lot of

85
00:07:11,330 --> 00:07:16,429
states and a lot of transitions, and I just want to show it to you here before we

86
00:07:16,429 --> 00:07:23,199
describe how we calculated it, just so you can get an idea that these [inaudible] for

87
00:07:23,199 --> 00:07:27,539
recognizing viable prefixes for grammars are actually quite elaborate. But, now

88
00:07:27,539 --> 00:07:33,809
let's break this down and see how it was produced. So, let's begin with the start

89
00:07:33,809 --> 00:07:37,909
state of this machine, so we have S prime goes to dot E. And, remember what this

90
00:07:37,909 --> 00:07:42,869
says is we want to be able to reduced to the start symbol to the new start symbol.

91
00:07:42,869 --> 00:07:47,069
And so we're reading the stack, and we're hoping to see an E on the stack, and if we

92
00:07:47,069 --> 00:07:51,349
don't then we're happy to see something derived from E. So, what transition we

93
00:07:51,349 --> 00:07:57,599
make from the state. One possibility is that we do in fact see an eon a stack, and

94
00:07:57,599 --> 00:08:03,409
in that case the dot simply moves over saying yes we've read the first item on

95
00:08:03,409 --> 00:08:07,099
the stack or the, we've read the E on the stack and so we've seen the full right

96
00:08:07,099 --> 00:08:11,659
hand side of this production. Now that would indicate that we were probably done

97
00:08:11,659 --> 00:08:14,979
with parsing. This is the state that you would reach, have you'd read the entire

98
00:08:14,979 --> 00:08:19,429
input and successfully parsed it, you would have reduced the old start symbol

99
00:08:19,429 --> 00:08:26,199
and be about to reduce to the augmented the, the new start symbol. But if you're

100
00:08:26,199 --> 00:08:30,429
not so fortunate as to see an E on the stack, then you need to hope that you'll

101
00:08:30,429 --> 00:08:34,409
see something derive fro m E. And there are a couple of possibilities there. One

102
00:08:34,409 --> 00:08:38,979
is that we could see something that would eventually use this production, E goes to

103
00:08:38,979 --> 00:08:43,149
T. And since we haven't seen any of it yet, we put the dot all the way at the

104
00:08:43,149 --> 00:08:47,240
left, indicating that we're hoping to see a T, which could then reduce to E, and

105
00:08:47,240 --> 00:08:53,259
which could then reduce to S prime. Now if we don't see a T on the stack by itself

106
00:08:53,259 --> 00:08:57,769
the other possibility is that we could be working on this production. E goes to, T

107
00:08:57,769 --> 00:09:02,100
plus E. And again, we haven't seen any of it, so the dot Goes on the left hand side.

108
00:09:02,100 --> 00:09:08,399
And then notice how we're crucially using the power of nondeterministic automata. So

109
00:09:08,399 --> 00:09:12,129
here we don't know which production is going to, which right hand side of a

110
00:09:12,129 --> 00:09:15,440
production is going to appear on the stack. And in fact, I notice that these

111
00:09:15,440 --> 00:09:21,069
productions are not even left factored, so we don't know whether it's going to be

112
00:09:21,069 --> 00:09:27,350
just a T there or a T plus E, but. We just use the guessing power of the [inaudible]

113
00:09:27,350 --> 00:09:34,350
chromatin you chose which one to, to use. Remember the [inaudible] sepse is any

114
00:09:35,240 --> 00:09:39,199
possible choice except. So you can always guess correctly. So intuitively you can.

115
00:09:39,199 --> 00:09:42,360
You will be able to pick the right one. Now of course we could compile this down

116
00:09:42,360 --> 00:09:47,560
to a deterministic machine that won't have to make any guesses. But at this level

117
00:09:47,560 --> 00:09:52,680
we're writing [inaudible] it's extremely useful not to have to figure out which of

118
00:09:52,680 --> 00:09:59,680
these two productions to use. We can just try both and see what happens. Now let's

119
00:09:59,680 --> 00:10:06,680
focus on this, state, E goes to dot T. What are the possibilities there? Well,

120
00:10:06,980 --> 00:10:10,470
one possibility is that we see a T on the stack. And then we see in a complete right

121
00:10:10,470 --> 00:10:16,089
hand side. And notice how when the dot was all the way to the right hand side, that

122
00:10:16,089 --> 00:10:19,279
is going to indicate that we're ready to do a reduce. So we'll talk about that a

123
00:10:19,279 --> 00:10:22,470
little bit later, but essentially that's how we're going to recognize handles. When

124
00:10:22,470 --> 00:10:25,949
we finally reach a state where the dot is all the way to the right hand side that's

125
00:10:25,949 --> 00:10:32,639
going to say this could be a handle that you might want to reduce. Now if we don't

126
00:10:32,639 --> 00:10:36,670
see a T on the stack , then we just see something derived from T, and there's a

127
00:10:36,670 --> 00:10:40,149
couple of possibilities, a few possibilities there. One possibility is

128
00:10:40,149 --> 00:10:42,990
that it's going to be the production T goes to int, so since we're just starting

129
00:10:42,990 --> 00:10:46,540
on this production again, we just put the dot all the way at the left. Another

130
00:10:46,540 --> 00:10:53,339
possibility we're working on T goes to (E). And the third possibility that we're

131
00:10:53,339 --> 00:10:57,509
working on T goes to int x T. And each of the case here, notice that the dots are

132
00:10:57,509 --> 00:11:00,769
all the way at the left indicating that we're just getting started, we have not

133
00:11:00,769 --> 00:11:07,769
actually seen any of the right hand side yet. Now let's shift our focus to this

134
00:11:08,060 --> 00:11:15,050
production, E goes to, dot T plus E. This item, excuse me One possibility is that we

135
00:11:15,050 --> 00:11:18,899
see an E on the see a T on the stack, okay, in which case the dot just moves

136
00:11:18,899 --> 00:11:23,610
over. And the other possibility is that we see something derived from T, in which

137
00:11:23,610 --> 00:11:28,269
case we will go to one of the states that begins a T production. And notice here

138
00:11:28,269 --> 00:11:31,560
that we already have all three of those items in our automaton. We're just going

139
00:11:31,560 --> 00:11:38,560
to it states that we went to from the item E goes to dot T. So this, this item, E

140
00:11:38,759 --> 00:11:45,759
goes to dot T plus E, could also move to those three states. Now let's focus on

141
00:11:46,680 --> 00:11:51,769
this, item here. T goes to dot, open-paren, E closed-paren. Well, there's

142
00:11:51,769 --> 00:11:56,449
only one possible move here, so this is only a, a terminal, it's not, it's not a

143
00:11:56,449 --> 00:11:59,850
non-terminal, so there's not going to be any possibility of having something

144
00:11:59,850 --> 00:12:03,389
derived from open-paren. We just have to see the open-paren in the input. So

145
00:12:03,389 --> 00:12:06,649
there's only one possible transition here, which is that we see, the open-paren,

146
00:12:06,649 --> 00:12:12,449
excuse me, on the stack, and the dot just moves over. Now, from this state, once

147
00:12:12,449 --> 00:12:17,850
again, we got is just next to a, or just to the left of a non-terminal, so we might

148
00:12:17,850 --> 00:12:20,920
see that non-terminal on the stack or we might see something derived from that

149
00:12:20,920 --> 00:12:24,670
non-terminal. Well, if we see that non-terminal on the stack, your dot just

150
00:12:24,670 --> 00:12:30,740
moves over and we get T(E.) indicating that we've seen an both an ( and E on the

151
00:12:30,740 --> 00:12:36,399
stack and we're still waiting to see the ). Well we might also see somethin g

152
00:12:36,399 --> 00:12:41,839
derived from e, okay. So we add these two transitions to the two items that begin

153
00:12:41,839 --> 00:12:47,850
productions for e. [sound]. Alright, now, let's focus on this state. T goes to open

154
00:12:47,850 --> 00:12:52,839
paren E dot closed paren. Again, 'cause it's a terminal, that the dot it's next to

155
00:12:52,839 --> 00:12:57,389
is only one possible move. We have to see that open paren if we see anything at all.

156
00:12:57,389 --> 00:13:01,670
And we'll wind up with the item T goes to open paren E, closed paren dot. And now

157
00:13:01,670 --> 00:13:07,060
we've recognized the entire right hand side of that production on the stack.

158
00:13:07,060 --> 00:13:12,680
Let's take a look at this, item. So we're here, because a terminal symbol, the, only

159
00:13:12,680 --> 00:13:15,269
possibility is to read that terminal symbol on the stack. So this would be the

160
00:13:15,269 --> 00:13:20,930
next item. E goes to T plus dot E. [sound]. Focusing on that item again

161
00:13:20,930 --> 00:13:27,259
[inaudible] we could possible see an E on the stack. Right, in which case we would

162
00:13:27,259 --> 00:13:32,399
have recognized the entire writing inside of this production, We have E goes T+E. Or

163
00:13:32,399 --> 00:13:36,160
we can see something derived from here, which case we make a transition back to

164
00:13:36,160 --> 00:13:43,160
one of those two states. Now, where we got productions left to go, or items left to

165
00:13:43,559 --> 00:13:49,889
go Here, we haw T goes to.int. So, we would have to see it next on to stack, and

166
00:13:49,889 --> 00:13:55,499
that would be the full right hand side of that production. Down here, we still have

167
00:13:55,499 --> 00:14:00,639
T goes to dot [inaudible] times T. So again, there's a terminal symbol here

168
00:14:00,639 --> 00:14:04,699
[inaudible]. And so that would be the next thing we would need to see on the stack

169
00:14:04,699 --> 00:14:11,189
for this production to remain viable. And once we've seen the [inaudible] we would

170
00:14:11,189 --> 00:14:16,540
like to see the times. So we wind up in this state and now we've got dot next to

171
00:14:16,540 --> 00:14:22,259
T. So, again, one possibility is that we see the T on the stack and then we've seen

172
00:14:22,259 --> 00:14:25,860
the full right-hand side of this production. But we might only see

173
00:14:25,860 --> 00:14:30,870
something derive from T. The might, the, the T might not be there yet. It might be

174
00:14:30,870 --> 00:14:34,819
in a state where we're still waiting for the T to appear through some sequence of

175
00:14:34,819 --> 00:14:37,870
reductions. But then we would need to see something derive from T. And in this case

176
00:14:37,870 --> 00:14:44,029
we would make a transition to one of the three states that begin the productions

177
00:14:44,029 --> 00:14:49,990
for T. And that 's the full automaton. That is, those are all the states and all

178
00:14:49,990 --> 00:14:55,430
the transitions for the automaton that recognizes the viable prefixes of this grammar.
