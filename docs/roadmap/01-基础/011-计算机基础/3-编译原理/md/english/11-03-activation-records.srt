0
00:00:03,810 --> 00:00:07,720
In the previous video, we talked about activation but we never said what

1
00:00:07,720 --> 00:00:11,680
information we actually need to keep for an activation. That's the topic of this

2
00:00:11,680 --> 00:00:18,680
video. An activation record is all the information that's needed to manage the

3
00:00:20,359 --> 00:00:27,289
execution of one procedure activation And often, this is also called a frame that

4
00:00:27,289 --> 00:00:31,740
means exactly the same thing as activation record. These are just two names for the

5
00:00:31,740 --> 00:00:38,740
same thing. Now one interesting fact about procedure activations is that they have

6
00:00:39,230 --> 00:00:43,500
more information in them than you might expect. So in particular, when a procedure

7
00:00:43,500 --> 00:00:48,590
f calls a procedure g, the activation record for g will actually have

8
00:00:48,590 --> 00:00:53,670
information not only about g but very frequently also about the calling function

9
00:00:53,670 --> 00:00:58,080
f. So typically the activation record for a procedure will contain a mixture of

10
00:00:58,080 --> 00:01:05,080
information both about that procedure and about the procedure that called it. Now,

11
00:01:06,210 --> 00:01:10,810
up this point, we haven't said why we need to keep information about activations at

12
00:01:10,810 --> 00:01:15,890
all And the reason is that there is some state associated with this procedure

13
00:01:15,890 --> 00:01:19,509
activation that is needed on order to properly execute the procedure and we have

14
00:01:19,509 --> 00:01:23,179
to track that somewhere and that's the activation record is gonna be forced. It's

15
00:01:23,179 --> 00:01:27,929
gonna be the whole, the information needed to properly execute the procedure. So,

16
00:01:27,929 --> 00:01:31,310
let's look at that in a little bit more detail. Let's consider this situation

17
00:01:31,310 --> 00:01:37,530
where a procedure F calls procedure G And what is going to happen so conceptually

18
00:01:37,530 --> 00:01:43,200
what happens when f calls g is that f is suspended. F is going to stop Executing

19
00:01:43,200 --> 00:01:47,929
while g is running. So g is going to be using the processor and all the resources

20
00:01:47,929 --> 00:01:52,920
of the machine. But when g completes, we wanna start executing f again, f is going

21
00:01:52,920 --> 00:01:58,909
to resume. And so in between, while g is running, we have to save the state of the

22
00:01:58,909 --> 00:02:03,990
procedure activation of f somewhere so that we can resume it properly and that's

23
00:02:03,990 --> 00:02:10,509
again what the activation record is for, And so g's activation record Is going to

24
00:02:10,508 --> 00:02:15,540
have to have information in it that will help us to complete the execution of g, so

25
00:02:15,540 --> 00:02:19,900
there will be some inform ation about g that we just need in order to run g, But

26
00:02:19,900 --> 00:02:24,540
also, g's activation record is going to have to store whatever we need to be able

27
00:02:24,540 --> 00:02:31,540
to resume the execution of procedure f. So let's work through an example. Here's one

28
00:02:32,140 --> 00:02:38,140
of the programs that we looked at in the last video, and here is a design for a

29
00:02:38,140 --> 00:02:43,439
concrete activation record for the procedure f. So we'll have one position

30
00:02:43,439 --> 00:02:48,650
for the results of f that will hold the return value after we finished execution

31
00:02:48,650 --> 00:02:53,709
of f. There will be a position here for the argument to f so is it, so fy takes

32
00:02:53,709 --> 00:02:59,060
one parameter so I only need one word here to hold the, the argument to the function.

33
00:02:59,060 --> 00:03:04,250
There will be a control link so a pointer to the previous or the caller's activation

34
00:03:04,250 --> 00:03:10,430
and we'll also have a slot for the return address so the address in memory or the

35
00:03:10,430 --> 00:03:16,650
address of the instruction that we are supposed to jump to after the execution of

36
00:03:16,650 --> 00:03:23,650
f completes. So now let's just execute this program by hand and work out what the

37
00:03:24,730 --> 00:03:30,000
activation records will look like down the stack. So when the front program is first

38
00:03:30,000 --> 00:03:37,000
invoked, it will call main. There will be an activation record for main And we were

39
00:03:37,430 --> 00:03:40,659
not gonna worry about that. We're just gonna focus on that. So there's some stuff

40
00:03:40,659 --> 00:03:46,730
for main but we're not going to do to, to, to talk about that And then main is going

41
00:03:46,730 --> 00:03:51,109
to call f, all right And so, when main calls f, an activation record will be

42
00:03:51,109 --> 00:03:58,109
pushed onto the stack and we'll have four slots and or four fields for values. And

43
00:04:01,760 --> 00:04:05,480
what we're going now while the first lines for the result well is just starting to

44
00:04:05,480 --> 00:04:09,219
run if it's just beginning execution so there is nothing to put there at the

45
00:04:09,219 --> 00:04:14,379
moment. That gets filled in when f returns. The second position will hold the

46
00:04:14,379 --> 00:04:21,069
argument to f so that would be the number three. The third slot will hold the

47
00:04:21,069 --> 00:04:26,970
controlling so that's gonna point back. To the activation for main and the fourth

48
00:04:26,970 --> 00:04:32,130
position will hold the return address and this is actually not completely trivial

49
00:04:32,130 --> 00:04:36,569
because f is called in multiple places. So if you look at the program, there's a

50
00:04:36,569 --> 00:04:43,569
called f in main and there's a call to f inside of f itself. And so Depending on

51
00:04:44,680 --> 00:04:49,220
where the function is called from after that function completes with one or return

52
00:04:49,220 --> 00:04:53,220
to a different address. In the case of the main, when this called F completes we

53
00:04:53,220 --> 00:04:58,580
wanna return to the. Whatever instructions comes after the called f which is just

54
00:04:58,580 --> 00:05:02,330
gonna be something that wraps up the execution program since it's the only exit

55
00:05:02,330 --> 00:05:08,979
point of main inside of f. It's going to be the conclusion of the conditionals. So,

56
00:05:08,979 --> 00:05:13,759
this point double star here is going to be at whatever is left on the conditional

57
00:05:13,759 --> 00:05:17,849
then the return from F. And so depending on what F is called from, we wanna return

58
00:05:17,849 --> 00:05:24,849
to one of two different places, okay? So, in this case F is being called from main

59
00:05:25,090 --> 00:05:31,720
and so we'll put the single star address in that position of the activation record,

60
00:05:31,720 --> 00:05:38,150
All right? So then f is called the second time, the body of f executes and the

61
00:05:38,150 --> 00:05:42,900
argument three is not zero that's way we wined up calling f again but that means

62
00:05:42,900 --> 00:05:48,479
that another activation record will be pushed on to the stack that will also help

63
00:05:48,479 --> 00:05:52,340
for slots as an activation record for f (I probably should label these) so that's an

64
00:05:52,340 --> 00:05:58,580
activation of f, so it's also an activation of f. And what goes in this one

65
00:05:58,580 --> 00:06:03,729
well again the result doesn't have anything initially in it. The argument in

66
00:06:03,729 --> 00:06:09,129
this case would be two. The controlling in this case will point back to the previous

67
00:06:09,129 --> 00:06:15,759
activation of f and the return address in this case will be the point double star.

68
00:06:15,759 --> 00:06:21,740
So after two calls to f, this is what the stack will look like with this particular

69
00:06:21,740 --> 00:06:28,120
activation record design. So, here is the same picture, just running a bit more

70
00:06:28,120 --> 00:06:33,039
neatly, and there's one additional we want point out which is at this stack of

71
00:06:33,039 --> 00:06:39,500
activation records and let me. Delineate the activation records here Is not as

72
00:06:39,500 --> 00:06:44,699
extract as the kinds of stacks who were probably taught about in a data structures

73
00:06:44,699 --> 00:06:49,930
class if you've had such a class. So here, there are distinct activation records on

74
00:06:49,930 --> 00:06:52,930
the stack and we treat them as such, in the Runtime system we'll treat them as

75
00:06:52,930 --> 00:06:58,780
such But this is also like one gigantic array. All o f this Data is just laid out

76
00:06:58,780 --> 00:07:05,169
in contiguous memory. These were all contiguous addresses and one is activation

77
00:07:05,169 --> 00:07:09,650
record here just follows on with the next address merely after the previous

78
00:07:09,650 --> 00:07:15,419
activation record. And compiler is, compiler writer will often play tricks to

79
00:07:15,419 --> 00:07:20,430
exploit the facts that these activations are adjacent to each other in memory and

80
00:07:20,430 --> 00:07:27,430
we'll see one such potential trick in just a moment. To summarize some of the

81
00:07:27,780 --> 00:07:33,080
highlights of these examples so far, I wanna repeat the main is not very

82
00:07:33,080 --> 00:07:36,629
interesting. So it has no argument or local variables and if results is never

83
00:07:36,629 --> 00:07:40,840
used And so while it does have an activation record, we're just not focusing

84
00:07:40,840 --> 00:07:45,590
on that and we're not concerning ourselves with what goes in at activation record.

85
00:07:45,590 --> 00:07:52,590
We're just focusing on the activation record for f. Just be true this clear, the

86
00:07:52,849 --> 00:07:57,659
start and double star that I use in the example, these are addresses in memory.

87
00:07:57,659 --> 00:08:03,300
These are actual memory addresses and they refer to addresses of code. Those are the

88
00:08:03,300 --> 00:08:07,879
addresses of the instructions that come after they call f because that's the place

89
00:08:07,879 --> 00:08:14,030
where f would return to. And finally, I want to stress that this really is only

90
00:08:14,030 --> 00:08:19,240
one of many possible activation record designs. You can design a different

91
00:08:19,240 --> 00:08:24,659
activation record for f that has had different information that would work just

92
00:08:24,659 --> 00:08:28,509
fine depending on the structure of the rest of the cogenerator in the runtime

93
00:08:28,509 --> 00:08:33,919
system. So, in particular many compilers don't use the controlling because they

94
00:08:33,919 --> 00:08:39,610
don't need inexpensive link to be able to find the calling or the activation record

95
00:08:39,610 --> 00:08:45,829
of the calling procedure and in fact, in your class project, the Khul compiler you

96
00:08:45,829 --> 00:08:52,510
won't be using a control link Most. Activation records won't have the return

97
00:08:52,510 --> 00:08:56,660
value on the activation record because it'd be more efficient and convenient to

98
00:08:56,660 --> 00:09:02,720
return it in the register. All right, this is just one possible design and with and

99
00:09:02,720 --> 00:09:06,250
you could just design other activation records that will work just fine. The

100
00:09:06,250 --> 00:09:09,620
important thing about the activation record is that it just have to have

101
00:09:09,620 --> 00:09:16,620
sufficient information in it to e nable the generated code to properly execute the

102
00:09:18,110 --> 00:09:25,110
procedure that's being called And also to resume execution of the calling procedure.

103
00:09:25,269 --> 00:09:28,790
So far, we've only looked at the procedure call for this activation record. We

104
00:09:28,790 --> 00:09:34,490
haven't talked about what happens when activations return. So let's consider what

105
00:09:34,490 --> 00:09:39,360
happens in our example after the second called f that this one this activation

106
00:09:39,360 --> 00:09:44,470
down here returns. So what's going to happen is we're going to make the caller,

107
00:09:44,470 --> 00:09:49,120
the current activation so it'll actually become the top of the stack so I'll have this big fat

108
00:09:49,120 --> 00:09:55,050
green error here indicated that this is now the current activation this one up

109
00:09:55,050 --> 00:10:00,430
here. Okay? So, this is the call, this is the what was the caller and is now going

110
00:10:00,430 --> 00:10:06,130
to resume executing. And the interesting thing here is to note that, like I said

111
00:10:06,130 --> 00:10:12,560
before, this isn't as abstract as a stack in a data structures course. So while we

112
00:10:12,560 --> 00:10:17,079
have restored this as the active procedure, this data down here, this, this

113
00:10:17,079 --> 00:10:22,910
activation that was running is still there in memory. And in fact we can go and look

114
00:10:22,910 --> 00:10:27,959
at it if we want to. And the way I set this example up in fact we need to because

115
00:10:27,959 --> 00:10:34,050
the results of the procedure that we called is now stored here. In the first

116
00:10:34,050 --> 00:10:40,910
word of this activation, All right, So when f begins executing again, is going to

117
00:10:40,910 --> 00:10:46,810
have to look up that result in order to know what the result was of the procedure

118
00:10:46,810 --> 00:10:51,690
levels called. So the advantage of placing the return value in the first position in

119
00:10:51,690 --> 00:10:56,070
the frame that the call can find it at a fix offset from its own frame. Let's back

120
00:10:56,070 --> 00:11:03,070
up and just see that so here when the second call to f has returned and the, the

121
00:11:03,680 --> 00:11:10,680
first call here has resumed executing this call, the code for this call will know

122
00:11:11,149 --> 00:11:15,740
that the science of this activation record is four. There are four words in this

123
00:11:15,740 --> 00:11:20,639
activation record and so they can find the result to the procedure that it called in

124
00:11:20,639 --> 00:11:25,690
the four + one position and five words passed the top of the frame. So in

125
00:11:25,690 --> 00:11:29,750
particular, they'll be able to find this where in memory and even though this has

126
00:11:29,750 --> 00:11:33,450
been popped out of the stack as I said before, that data is still there at least

127
00:11:33,450 --> 00:11:38,680
until another procedure is called. And so, if we immediately read the result of the

128
00:11:38,680 --> 00:11:42,050
function call after we return from the function, we'll be able to pick up that

129
00:11:42,050 --> 00:11:49,050
result and then use it in the continuation of the execution of the call in procedure.

130
00:11:50,389 --> 00:11:53,610
And once again, I just wanna stress, I know this is a couple of times, but it's

131
00:11:53,610 --> 00:11:57,420
very important that there's absolutely nothing magic about this organization. We

132
00:11:57,420 --> 00:12:01,110
could rearrange the order of elements in the frame. We could divide the

133
00:12:01,110 --> 00:12:05,089
responsibility between the caller and the calling differently And really the only

134
00:12:05,089 --> 00:12:09,180
metric here is that one organization is better than another if it results and

135
00:12:09,180 --> 00:12:15,670
faster code or in a simpler code generator And I know I also mentioned this before but

136
00:12:15,670 --> 00:12:19,110
it's also an important point in a production compiler we would produce much

137
00:12:19,110 --> 00:12:23,449
of the frame contents as possible in registers And in particular, there would

138
00:12:23,449 --> 00:12:28,060
be a effort to pass the method results and the method arguments in registers because

139
00:12:28,060 --> 00:12:35,060
those are excess so frequently. Finally to some up our discussion of activations and

140
00:12:35,149 --> 00:12:40,279
activation records, the issue is that the compiler has to determine at compile time,

141
00:12:40,279 --> 00:12:44,899
okay so this happens statically. The layout of the activation record and also

142
00:12:44,899 --> 00:12:49,699
has to generate code that correctly accesses the locations in that activation

143
00:12:49,699 --> 00:12:54,209
record. And what does this mean, this mean that the activation record layout and the

144
00:12:54,209 --> 00:13:00,050
code generator have to be designed together. Okay. So, you can't just assign

145
00:13:00,050 --> 00:13:02,980
your code generator and then figure out later what your activation record layout

146
00:13:02,980 --> 00:13:07,589
is gonna be or vice versa, This two things needs to designed together because they

147
00:13:07,589 --> 00:13:09,120
depend on each other.
