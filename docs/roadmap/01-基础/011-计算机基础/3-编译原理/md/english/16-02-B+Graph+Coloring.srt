0
00:00:00,870 --> 00:00:04,420
So far we've talked about what a register interference graph is and to

1
00:00:04,420 --> 00:00:07,899
find the notion of a graph coloring but we haven't actually talked about how to

2
00:00:07,899 --> 00:00:12,570
compute graph coloring so that's the next issue that we have to deal with. And

3
00:00:12,570 --> 00:00:17,330
unfortunately it isn't easy so graph coloring is a very hard problem. If you

4
00:00:17,330 --> 00:00:21,430
had a computer science theory class, then it would mean something to you when I say

5
00:00:21,430 --> 00:00:27,770
that it is an NP-hard problem to compute a coloring of the graph. If you have not

6
00:00:27,770 --> 00:00:33,070
heard about NP hardness before, that's not a problem. The important thing is that

7
00:00:33,070 --> 00:00:38,109
nobody knows an efficient algorithm for this problem so there's no fast procedure

8
00:00:38,109 --> 00:00:43,309
known. And so the solution that we will talk about, one that every compiler uses,

9
00:00:43,309 --> 00:00:47,499
is to use some heuristics or basically approximation techniques that don't the

10
00:00:47,499 --> 00:00:52,870
problem completely. But, there's a second problem which is that a coloring might not

11
00:00:52,870 --> 00:00:57,329
even exist for a given number of registers. It might be that we only have

12
00:00:57,329 --> 00:01:01,469
eight registers on our machine and there is no coloring of the graph that uses

13
00:01:01,469 --> 00:01:05,440
fewer than say nine or ten colors and so we're going to have to have our way to

14
00:01:05,440 --> 00:01:09,260
deal with that and we'll talk about that later. I won't say anything more about the

15
00:01:09,260 --> 00:01:14,230
solution to that problem just now. So, now I'll present the most popular heuristic

16
00:01:14,230 --> 00:01:18,780
for coloring register interference graphs. And the basic idea is very, very simple.

17
00:01:18,780 --> 00:01:25,310
So, what we'll do is we'll pick a node t that has fewer than k-neighbors in the

18
00:01:25,310 --> 00:01:28,520
register interference gr aph, okay. And this is actually the key things to just

19
00:01:28,520 --> 00:01:32,640
find any node in the graph that has fewer than k-neighbors. And then we'll eliminate

20
00:01:32,640 --> 00:01:35,910
t in its edges from register interference graphs so we'll just delete that node and

21
00:01:35,910 --> 00:01:42,240
all the edges adjacent to it. And then if the resulting sub-graph is k-colorable

22
00:01:42,240 --> 00:01:46,720
then so is the original graph. The idea here is to do a dividing conquer kind of

23
00:01:46,720 --> 00:01:51,700
approach. We pick one node, we delete it from the graph, we color the remainder of

24
00:01:51,700 --> 00:01:55,430
the graph. It's a smaller problem with one fewer nodes and then when we're done with

25
00:01:55,430 --> 00:02:01,260
that, I claim that we can find the coloring for the original graph and why is

26
00:02:01,260 --> 00:02:08,260
that? That has fewer than k-neighbors and let's just say for the sake of argument

27
00:02:10,519 --> 00:02:13,370
that it has two neighbors and here's the rest of the graph. So, this big circle is

28
00:02:13,370 --> 00:02:17,400
the rest of the graph, here is the node t that we're going to delete, and let's say

29
00:02:17,400 --> 00:02:21,620
that it just has two neighbors, okay. So, now what we're going to do is we're going

30
00:02:21,620 --> 00:02:23,280
to, conceptually we're going to delete t from the graph Well, let's draw a picture

31
00:02:23,280 --> 00:02:25,239
here. So, let's say we have a node and so, and then we're going to color the

32
00:02:25,239 --> 00:02:29,150
sub-graph. Now, let's say that we succeed in coloring the sub-graph. So, we can now

33
00:02:29,150 --> 00:02:33,989
have a coloring for this big ball in red. And now we want to construct the coloring

34
00:02:33,989 --> 00:02:39,799
for that big ball plus this node t. Well, since we said there are fewer than k

35
00:02:39,799 --> 00:02:45,780
colors. I needed to color the sub-graph and that too is certainly less than k.

36
00:02:45,780 --> 00:02:50,999
Well, then there must be a leftover color for t so we can look at all the colors of

37
00:02:50,999 --> 00:02:54,810
the nodes that are adjacent to t. Since there are fewer than k of these, they

38
00:02:54,810 --> 00:02:58,579
can't use all k of the colors and then we can pick one of the leftover colors for t.

39
00:02:58,579 --> 00:03:05,579
So, here's a procedure that works very well in practice. First, we pick a node t

40
00:03:05,819 --> 00:03:09,840
that has fewer than k-neighbors. We put t on the stack and remove it from the

41
00:03:09,840 --> 00:03:14,040
register interference graph and then we recourse. We repeat this procedure until

42
00:03:14,040 --> 00:03:16,930
the graph is empty. So, we just keep choosing nodes that have fewer than

43
00:03:16,930 --> 00:03:20,310
k-neighbors, pushing them onto a stack a nd delete them from the graph and we do

44
00:03:20,310 --> 00:03:25,230
that until the graph is completely empty out. And that's the first phase so that's

45
00:03:25,230 --> 00:03:32,230
part one, okay. And then in part two, we assign a coloring. We build a coloring for

46
00:03:32,579 --> 00:03:36,930
the nodes on the stack. And, the nodes are processed in reverse order they were

47
00:03:36,930 --> 00:03:41,209
added. The last node added to the stack is processed first and each step, what we do

48
00:03:41,209 --> 00:03:47,109
is, we pick a color that is different from those assigned to the already colored

49
00:03:47,109 --> 00:03:51,319
neighbors. So the idea is we pick a node off a stack, we pop it off the stack, and

50
00:03:51,319 --> 00:03:54,769
we add it back into the graph along with the edges that it had in the original

51
00:03:54,769 --> 00:04:01,239
graph and then we color it. So then we look we look at its neighbors, since we

52
00:04:01,239 --> 00:04:04,499
had fewer than k-neighbors at the time it was deleted, it will have fewer than k at

53
00:04:04,499 --> 00:04:09,370
the time we send it back in, there will be a color available for it. We color it and

54
00:04:09,370 --> 00:04:12,519
then we repeat, by picking another node from the stack. And we do that until all

55
00:04:12,519 --> 00:04:18,190
the nodes of the graph have been processed. Let's do an example. Here is

56
00:04:18,190 --> 00:04:23,770
our register interference graph so we are going to process this RIG with k = four so

57
00:04:23,770 --> 00:04:27,840
initially we have the entire register interference graph and the stack is empty.

58
00:04:27,840 --> 00:04:33,680
Alright? So the first step is to pick some node that has fewer than four neighbors.

59
00:04:33,680 --> 00:04:38,479
So let's pick A, since it only has two neighbors. So what do we do? We delete A

60
00:04:38,479 --> 00:04:43,550
from the graph and we push it onto the stack. So after that step our graph,

61
00:04:43,550 --> 00:04:48,210
here's our graph with A removed and here's our stack, alright. Now we're going to

62
00:04:48,210 --> 00:04:52,229
pick another hat has fewer than k-neighbors and if we look, sorry, fewer

63
00:04:52,229 --> 00:04:56,690
than four neighbors. And if we look at this graph, we can see that we have the

64
00:04:56,690 --> 00:05:02,310
option of picking a few different nodes. We can pick D or B. Actually, there's only

65
00:05:02,310 --> 00:05:07,639
two different nodes we could pick, C, E, and F all have four neighbors. So let's

66
00:05:07,639 --> 00:05:14,090
remove D. An arbitrary choice here, it doesn't matter which one we pick. And now

67
00:05:14,090 --> 00:05:19,340
the stack will have D and A on it and our graph will be down to these four nodes.

68
00:05:19,340 --> 00:05:23,310
And now something interesting to observe here, is that all the nodes at this point

69
00:05:23,310 --> 00:05:29,449
have fewer than four neighbors. And so, since every node in the graph has fewer

70
00:05:29,449 --> 00:05:33,379
neighbors than the number of colors we're allowed to use, at this point the graph

71
00:05:33,379 --> 00:05:37,599
coloring is guaranteed to succeed. Because every time we remove a node we can only

72
00:05:37,599 --> 00:05:42,330
reduce the number of neighbors of every other node in the graph. It's also

73
00:05:42,330 --> 00:05:49,050
interesting to note That even though some of the notes had four neighbors in the

74
00:05:49,050 --> 00:05:54,750
previous step and so might not have been colorable. We couldn't choose them at that

75
00:05:54,750 --> 00:05:58,680
step because potentially a coloring of the neighbors would use up all the colors.

76
00:05:58,680 --> 00:06:01,370
Notice that now they all have fewer than four neighbors. And this is one of the

77
00:06:01,370 --> 00:06:04,780
interesting properties or one of the good properties of this graph coloring

78
00:06:04,780 --> 00:06:11,509
heuristic is that even if a note has many more than k-neighbors eventually, we may

79
00:06:11,509 --> 00:06:15,330
remove enough nodes from the graph that, that it's number of neighbors will drop

80
00:06:15,330 --> 00:06:20,659
below the number of colors available and then we'll be able to, to color it. So

81
00:06:20,659 --> 00:06:24,509
anyway now it doesn't matter which node we pick because we can process them in any

82
00:06:24,509 --> 00:06:30,310
order at this point. We'll remove c from the graph and we wind up with this graph.

83
00:06:30,310 --> 00:06:34,389
And now, picking another node, we can remove b. Now we're down to just a two

84
00:06:34,389 --> 00:06:38,699
node graph. Let's pick e and remove it from the graph. Now we're down to just a

85
00:06:38,699 --> 00:06:43,580
one node graph, and we move f from the graph, and now the graph is empty and we

86
00:06:43,580 --> 00:06:48,860
have our stack. And notice that the stack, all we've really done in this procedure, I

87
00:06:48,860 --> 00:06:54,050
mean the goal of the first phase of this procedure has been to put an order on the

88
00:06:54,050 --> 00:06:58,539
nodes of the graph. This is the order in which we should assign colors to the nodes

89
00:06:58,539 --> 00:07:03,689
of the graph, alright. So now, working backwards, afterward, you know done with

90
00:07:03,689 --> 00:07:08,780
the first part now we got to do the second part which we'll assign the colors. And,

91
00:07:08,780 --> 00:07:12,960
we're going to begin with the top of the stack. So we'll take note f and put it

92
00:07:12,960 --> 00:07:17,389
back into the graph. And we'll assign it a color and let's just say we're going to

93
00:07:17,389 --> 00:07:22,469
pick the lowest numbered register that is not used by any of its neighbors. And so,

94
00:07:22,469 --> 00:07:28,229
since f is in th e graph by itself, we'll just assign it register one. Now we add e

95
00:07:28,229 --> 00:07:35,229
back into the graph and it has to have a different register from f. And so, since F

96
00:07:35,750 --> 00:07:42,750
is using register r1, we'll just assign e register r2. Now we add b back into the

97
00:07:42,879 --> 00:07:48,449
graph. It has to have a different color or register than both f and d so we'll sign

98
00:07:48,449 --> 00:07:54,780
it register r3. We assign c back into the graph. Now, notice that c has both, has

99
00:07:54,780 --> 00:07:59,069
all of f, e, and b as neighbors. They're using the first three registers so c will

100
00:07:59,069 --> 00:08:06,069
get assigned register r4. And now, we're out of registers. I mean these, these four

101
00:08:06,699 --> 00:08:11,650
nodes are using all of the registers but because we deleted things in the right

102
00:08:11,650 --> 00:08:15,819
order in the first phase, we know that when we add in other nodes the rest of the

103
00:08:15,819 --> 00:08:18,550
nodes on the stack, they won't have all of those nodes as neighbors. So there will be

104
00:08:18,550 --> 00:08:24,249
some register available to sign. So, looking at register d, I'm sorry. Looking

105
00:08:24,249 --> 00:08:30,979
at node D here, it has, it shares it has as its neighbors f, e, and c. And so the

106
00:08:30,979 --> 00:08:36,370
only register that it could be assigned is r3 which is the same register as b. This

107
00:08:36,370 --> 00:08:40,880
is the only register that isn't used by one of its neighbors, okay. So d gets

108
00:08:40,880 --> 00:08:47,139
assigned register r3. And then we assign a sorry, we add a back into the graph and we

109
00:08:47,139 --> 00:08:53,300
look at its neighbors and they're using registers r1 and r4. So a can be assigned

110
00:08:53,300 --> 00:08:58,070
either register r2 or r3. And since our rule is just to use the lowest number

111
00:08:58,070 --> 00:09:03,180
register that isn't used by one of the neighbors, we'll assign it register r2.

112
00:09:03,180 --> 00:09:05,430
And there's our complete coloring of the graph.
