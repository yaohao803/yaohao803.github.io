0
00:00:03,990 --> 00:00:07,850
Welcome back, In this video we're going to talk about converting regular expressions

1
00:00:07,850 --> 00:00:14,850
into non-deterministic finite automata. Before we get started I wanna give you an

2
00:00:16,740 --> 00:00:21,840
overview of the plan for the next few videos. We have a lexical specification

3
00:00:21,840 --> 00:00:27,060
that we want to implement and the first step is for someone to write that down as

4
00:00:27,060 --> 00:00:32,820
a set of regular expressions. Now that bites all the courses not implementation,

5
00:00:32,820 --> 00:00:37,910
that's just specification. So we have to translate that into a program that can

6
00:00:37,910 --> 00:00:43,270
actually do lexical analysis and this actually happens in several steps. The

7
00:00:43,270 --> 00:00:48,830
first part is a translate Those regular expressions into non-deterministic finite

8
00:00:48,830 --> 00:00:54,260
automata that recognize the same, exactly the same thing. And then those

9
00:00:54,260 --> 00:00:59,580
non-deterministic automata are translated into deterministic automata and finally

10
00:00:59,580 --> 00:01:05,150
those deterministic automata are implemented as a set of Lookup tables and

11
00:01:05,150 --> 00:01:12,150
a little bit of code for traversing those tables. So in previous videos, we talked

12
00:01:13,649 --> 00:01:18,880
about this piece and we've also defined this piece. And so now we're ready to put

13
00:01:18,880 --> 00:01:23,460
the whole thing together and in this particular video, we're going to focus on

14
00:01:23,460 --> 00:01:27,100
this component right here, The translation of regular expressions to

15
00:01:27,100 --> 00:01:34,100
non-deterministic finite automata. So the plan is that for each kind of regular

16
00:01:35,340 --> 00:01:41,890
expression we're going to find an equivalent Non-deterministic Automata,

17
00:01:41,890 --> 00:01:46,259
automaton that accepts exactly the same language as the language or a regular

18
00:01:46,259 --> 00:01:51,319
expression. And here's a little bit of notation we're gonna use. We'll define

19
00:01:51,319 --> 00:01:56,119
these automaton for regular expressions and usually, what we're going to be doing

20
00:01:56,119 --> 00:02:00,280
is needing to modify their start states and their final states so we'll just

21
00:02:00,280 --> 00:02:04,819
indicate the start state with the l and the final state. With the double circle

22
00:02:04,819 --> 00:02:08,280
and we won't worry too much about the overall structure of the machine as long

23
00:02:08,280 --> 00:02:13,920
as we have a handle on the start state and the final state. I should say that in the

24
00:02:13,920 --> 00:02:20,810
machines we'll build here, there will only be one final state. Okay, so let's begin.

25
00:02:20,810 --> 00:02:27,220
So for the epsilon regular expression, once the machine that accepts that, well

26
00:02:27,220 --> 00:02:31,690
this is a very simple machine. We can just have a start state and a final state and

27
00:02:31,690 --> 00:02:38,690
epsilon transition between them so this machine accepts exactly the empty string.

28
00:02:39,500 --> 00:02:45,720
Certainly for a single character A, we can define a one transition two state machine

29
00:02:45,720 --> 00:02:50,120
that accepts that one character. So from the start state we can move to the final

30
00:02:50,120 --> 00:02:54,480
state if it only, if we read that particular character, okay. So those are

31
00:02:54,480 --> 00:03:00,480
out two simple regular expressions and now we have to do the compound regular

32
00:03:00,480 --> 00:03:05,530
expressions. And these are little [inaudible] involved. So let's talk about

33
00:03:05,530 --> 00:03:11,570
concatenation first. And so, because we're gonna build these machines up from

34
00:03:11,570 --> 00:03:16,040
smaller. Regular expressions to larger ones, we can assume that we've already

35
00:03:16,040 --> 00:03:21,880
converted A and B separately in two machines. So I have the machine for A. And

36
00:03:21,880 --> 00:03:26,340
to have a machine for B and now all I have to do is say how I'm going to paste

37
00:03:26,340 --> 00:03:30,130
together these two machines to form a machine, a compound machine that

38
00:03:30,130 --> 00:03:34,790
recognizes the same language as a concatenated with B. And here's the

39
00:03:34,790 --> 00:03:39,270
construction, the start state for the compound machine will be the start state

40
00:03:39,270 --> 00:03:43,890
for A so we'll just keep that start state for A the same and then we modify the

41
00:03:43,890 --> 00:03:48,230
final state of A. So we make the final state of A no longer a final state and

42
00:03:48,230 --> 00:03:53,960
I've done that here by removing the double circle on the final state of A andthe

43
00:03:53,960 --> 00:03:59,170
epsilon transition to the start state of B. Now if we think about it, that does

44
00:03:59,170 --> 00:04:03,150
exactly the right thing but that says, is that first you recognize some portion of

45
00:04:03,150 --> 00:04:08,010
the input that belongs to the language of A, and when we get to that, what would

46
00:04:08,010 --> 00:04:12,990
been the final state of A, we can jump to the start state of B without consuming any

47
00:04:12,990 --> 00:04:17,759
input and then try to read the rest of the string as part of the language, as, as a

48
00:04:17,759 --> 00:04:24,740
string in the language of B. And for union we have a similar way of phasing together

49
00:04:24,740 --> 00:04:28,789
the machines. Although the, the structure is somewhat different so we, at a new

50
00:04:28,789 --> 00:04:33,990
start state for the compound machine and What does A + B mean? It means either the

51
00:04:33,990 --> 00:04:38,759
input is in the language of A, or it's in the language of B. And epsilon transitions

52
00:04:38,759 --> 00:04:42,819
are really good for capturing this because we just make a decision right from the

53
00:04:42,819 --> 00:04:47,879
start state is the string going to be in language of A or is it going to be in the

54
00:04:47,879 --> 00:04:53,169
language of B. So we make a non-deterministic choice and then we read

55
00:04:53,169 --> 00:04:57,759
the string as using that, the automaton that we chose and if we get to the final

56
00:04:57,759 --> 00:05:02,550
state. Either those machines we can make the epsilon transition to the new final

57
00:05:02,550 --> 00:05:06,289
state for the compound machine. Now remember what the notion is of acceptance

58
00:05:06,289 --> 00:05:10,729
for Nondeterministic Automata, you know? They make these guesses but if there's any

59
00:05:10,729 --> 00:05:16,270
guess that works, then we say that it's in the language of the machine. So, if in

60
00:05:16,270 --> 00:05:21,629
fact the string is in the union of A or B then either choosing A or choosing B will

61
00:05:21,629 --> 00:05:28,629
work and so the machine will accept the string. And finally the most complicated

62
00:05:30,139 --> 00:05:35,240
case for iteration is star, we have the following construction, So here's the

63
00:05:35,240 --> 00:05:41,060
machine for A, Embedded in here. We've added a new start state and a new final

64
00:05:41,060 --> 00:05:46,219
state, And now, let's talk about how this works. So one possibility is, remember

65
00:05:46,219 --> 00:05:53,219
that epsilon is always in the language of A star, and so we have this transition here,

66
00:05:53,509 --> 00:05:57,159
We can go straight from the start state to the final state and accept the empty

67
00:05:57,159 --> 00:06:01,520
string. And so, that just guarantees that the empty string is in the language.

68
00:06:01,520 --> 00:06:05,830
Otherwise, what do we do? Otherwise, we can make a transition, an epsilon

69
00:06:05,830 --> 00:06:10,050
transition to the start state of A. And then we can, from the final state of A if

70
00:06:10,050 --> 00:06:14,289
we reach it, we can go back to the start state of the whole machine and we can do

71
00:06:14,289 --> 00:06:20,789
this as many times as we like. Okay, So, there's the iteration of A, Surround this

72
00:06:20,789 --> 00:06:26,479
loop right here, And when we reach the final state of A we can also decide to

73
00:06:26,479 --> 00:06:30,469
just make a transition to the final state of the machine, we conclude that the last

74
00:06:30,469 --> 00:06:37,469
time. And so this machine recognizes zero or more strings in the language of A. So

75
00:06:40,550 --> 00:06:45,110
now, let's do an example, So here's a regular expression and we want to build a

76
00:06:45,110 --> 00:06:49,840
equivalent nondeterministic machine that recognizes the sa me language and we're

77
00:06:49,840 --> 00:06:56,199
gonna follow our construction, Which works by induction on the structure of the

78
00:06:56,199 --> 00:06:59,830
regular expressions starting with the simple regular expressions and building up

79
00:06:59,830 --> 00:07:05,729
to the compound one so what do we have here? So we have a machine for accepting

80
00:07:05,729 --> 00:07:09,949
one, okay. So we need a machine that accepts one and if we call it had two

81
00:07:09,949 --> 00:07:15,710
states and it just, you know made a transition between the two on the number

82
00:07:15,710 --> 00:07:22,710
one, Similarly a machine for accepting zero. Okay, And now, we need to put them

83
00:07:23,059 --> 00:07:28,270
together in a machine that accepts either one or zero. And the way we did that is we

84
00:07:28,270 --> 00:07:35,270
made a choice from A, from a start state for the compound machine where you can

85
00:07:35,949 --> 00:07:40,699
either move to the machine for accepting one or the machine for accepting zero. And

86
00:07:40,699 --> 00:07:46,479
then we have, at the end, also epsilon moves back to the final state of the

87
00:07:46,479 --> 00:07:52,599
compound machine. Okay, And now we need to iterate this so we need to be able to

88
00:07:52,599 --> 00:07:59,599
accept zero or more of one's or zero's and so we're going to take this entire Block

89
00:08:00,789 --> 00:08:07,789
here and paste it into the pattern that we had for iteration so how do we do that?

90
00:08:08,509 --> 00:08:13,379
Well, we have a new start state and a new final state, okay. And there's an epsilon

91
00:08:13,379 --> 00:08:18,259
move from the start state to the new final state to guarantee that we accept the

92
00:08:18,259 --> 00:08:23,879
empty string. And then we can just iterate this inner machine as many times as we

93
00:08:23,879 --> 00:08:29,059
like. We can make an epsilon move to the start state, We could execute the machine

94
00:08:29,059 --> 00:08:34,490
ones and if we decide we want to do it again, well we can do that. Okay, Go back

95
00:08:34,490 --> 00:08:38,990
around for another time, Or from the final state, we can decide that we've seen

96
00:08:38,990 --> 00:08:43,089
enough and we can just move to the final state of the compound machine. So this

97
00:08:43,089 --> 00:08:48,880
machine then accepts the language one + zero'lt;i>. And now, we have a little bit more'lt;/i>

98
00:08:48,880 --> 00:08:54,740
to do. We have to accept, we have other machine that accepts just one so we build

99
00:08:54,740 --> 00:09:01,740
another machine that accepts The digit one and now we need to compose two of these

100
00:09:04,570 --> 00:09:08,660
things, to concatenate them and that was very simple. We just have an epsilon move

101
00:09:08,660 --> 00:09:13,120
from the final state of the first machine to the start state of the second mac hine

102
00:09:13,120 --> 00:09:17,430
and then these are all the states of the final machine. And we just need to now

103
00:09:17,430 --> 00:09:21,730
label our final, final state or the end of the state that we're actually gonna use in

104
00:09:21,730 --> 00:09:25,910
the end of the final state of the entire machine which should be that one and the

105
00:09:25,910 --> 00:09:32,910
start state, Which is this state over here. And that's the entire construction

106
00:09:33,529 --> 00:09:38,230
for the non-deterministic automata or a non-deterministic automata that recognizes

107
00:09:38,230 --> 00:09:38,730
this language.
