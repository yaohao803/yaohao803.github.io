0
00:00:04,240 --> 00:00:07,879
Welcome back. In this video we're going to talk about finite automata

1
00:00:07,879 --> 00:00:11,920
which we'll see in future videos are a good implementation model for regular

2
00:00:11,920 --> 00:00:18,920
expressions. So in the last few videos, we've been talking about regular

3
00:00:19,680 --> 00:00:23,400
expressions which we use as the specification language for lexical

4
00:00:23,400 --> 00:00:27,939
analysis. And, in this video we're gonna start something new. We're gonna talking

5
00:00:27,939 --> 00:00:34,939
about Finite Automata which are the For a convenience as an implementation mechanism

6
00:00:35,540 --> 00:00:39,640
for regular expressions. And so regular expressions and finite automaton are very

7
00:00:39,640 --> 00:00:44,909
close related. It turns out that they can specify exactly the same languages called

8
00:00:44,909 --> 00:00:49,019
the regular languages. We won't prove that in this course but we'll certainly make

9
00:00:49,019 --> 00:00:54,229
use of that fact. So, moving right along, What is a finite automaton? Well, here is

10
00:00:54,229 --> 00:00:59,729
a typical definition as you might see in a automaton theory textbook. Finite

11
00:00:59,729 --> 00:01:03,580
automaton consists of an input alphabet. So, it's a set of characters that it can

12
00:01:03,580 --> 00:01:10,580
read. It has this finite set of states. We should probably emphasize that. This is

13
00:01:10,619 --> 00:01:15,130
what makes it a finite automaton is that it has some set of states that it can be

14
00:01:15,130 --> 00:01:19,979
in. One of those states is special and it's designated as the start state. Some

15
00:01:19,979 --> 00:01:25,090
subset of the states are accepting states so these are the states that. But, well,

16
00:01:25,090 --> 00:01:31,469
we'll just find that more in a minute but intuitively, if the automaton terminates,

17
00:01:31,469 --> 00:01:34,619
after reading some input on one of these takes that it accepts the input.

18
00:01:34,619 --> 00:01:39,039
Otherwise, it rejects the input and finally the automaton has some set of

19
00:01:39,039 --> 00:01:42,899
state transitions that is in one state, they can read some input and go to another

20
00:01:42,899 --> 00:01:49,729
state. So let's look at that little more detail so a transition in a finite

21
00:01:49,729 --> 00:01:54,069
automaton. If I'm in, in this case I've written out one particular transition

22
00:01:54,069 --> 00:01:59,560
here. We're in state one and we read the input A then, the automaton can move to

23
00:01:59,560 --> 00:02:04,619
state two, okay. And there could be lots of different transitions for the automaton

24
00:02:04,619 --> 00:02:08,910
from different states and different inputs and its read the following way. If we're

25
00:02:08,910 --> 00:02:15,910
in state one on input A , we would go to state two. And, if the automaton ends in

26
00:02:17,060 --> 00:02:20,620
an accepting state when it gets to the end of the input that is going to do what's

27
00:02:20,620 --> 00:02:26,030
called accepting the string Meaning that it will say yes, That string was in the

28
00:02:26,030 --> 00:02:31,730
language of this machine. So intuitively the automaton starts in the start state and

29
00:02:31,730 --> 00:02:37,330
it repeatedly reads inputs one input character at a time makes a transition. So

30
00:02:37,330 --> 00:02:41,060
it'll see what kind of transition it can make out of its current state based on

31
00:02:41,060 --> 00:02:45,820
that input to another state and if that's done ringing the input it's in one of the

32
00:02:45,820 --> 00:02:52,120
final states that it will accept. Otherwise is going to reject the input.

33
00:02:52,120 --> 00:02:59,120
Now, one of the situations in which it rejects, well, if it terminates In a state

34
00:03:00,450 --> 00:03:07,450
S, that's no one of the final or accepting states, okay? So that ends in any other

35
00:03:08,760 --> 00:03:13,150
state besides one of the accepting states and it's going to reject. If the machine

36
00:03:13,150 --> 00:03:20,150
gets stuck, Meaning it finds itself in a state and there's no transition of that

37
00:03:20,480 --> 00:03:25,010
state on the input. So in particular, let's say that in some state as a news and

38
00:03:25,010 --> 00:03:29,360
the input is A, and there's no transition. There's no transition specified per state

39
00:03:29,360 --> 00:03:33,890
as an input A so the machine can't move anywhere and it get stuck and that's also

40
00:03:33,890 --> 00:03:39,210
a rejecting state. And so in these two situations, if, if you either get to the

41
00:03:39,210 --> 00:03:44,080
end of the input and it's not in a final state or. If it never reaches the end of

42
00:03:44,080 --> 00:03:47,860
the input because it can stuck and both of those cases it rejects the string. That

43
00:03:47,860 --> 00:03:54,860
string is not in the language of the finite automaton. Now there's an

44
00:03:55,600 --> 00:03:59,720
alternative notation for Finite Automata that I think is more intuitive for

45
00:03:59,720 --> 00:04:05,130
examples and so we're going to emphasize that way of writing the mount. In this

46
00:04:05,130 --> 00:04:10,870
notation a state is represented as a known graph which just draws a big circle. The

47
00:04:10,870 --> 00:04:17,530
start state is represented as a node that has an edge or an arrow into it with no

48
00:04:17,529 --> 00:04:24,139
source. So, this is a transition into the node but no source node that it comes from

49
00:04:24,139 --> 00:04:29,120
and that indicates the unique start state. An accepting state is drawn as a node wit

50
00:04:29,120 --> 00:04:33,699
h just double circles like this. And finally a transition is drawn as an edge

51
00:04:33,699 --> 00:04:38,819
between two nodes of the graph. So with this as the time in this state that I'm

52
00:04:38,819 --> 00:04:44,580
circling in blue and I read the input a well then I can move to this state at, at

53
00:04:44,580 --> 00:04:51,580
the tail of the arrow. So now, let's do a simple example. Let's try to write up the

54
00:04:53,229 --> 00:05:00,229
automaton that accepts only the single digit one. So all we need is start state.

55
00:05:01,080 --> 00:05:07,249
And will probably want an accepting state as well and now the questions is what do

56
00:05:07,249 --> 00:05:10,560
we put in between the two? Well, there would be some kind of transition here and

57
00:05:10,560 --> 00:05:16,050
it's a good guess that we should take that transition if the machine reads the one.

58
00:05:16,050 --> 00:05:21,319
Now let me take a moment here to talk about how the machine executes so let's

59
00:05:21,319 --> 00:05:28,319
label these states. Let's call this state a and let's call this state b, okay. So

60
00:05:29,629 --> 00:05:35,889
the machine will have some input. Okay, and we can write that input out will be

61
00:05:35,889 --> 00:05:39,099
here. So let's just say, we have the single character one and it begins in some

62
00:05:39,099 --> 00:05:43,779
state namely the start state. And so, one configuration of the machine is the state

63
00:05:43,779 --> 00:05:50,779
that it is in And the input. And typically we would indicate where it is in the input

64
00:05:51,729 --> 00:05:56,099
by just a pointers saying what position it is in the input. And, the important thing

65
00:05:56,099 --> 00:06:01,969
to know about input in [inaudible] the input pointer always advances. So, when

66
00:06:01,969 --> 00:06:06,499
we, or it only advances so when we read a character input, the input pointer moves

67
00:06:06,499 --> 00:06:12,469
to the right and it never moves back. Alright, So from state a, we have a rule.

68
00:06:12,469 --> 00:06:16,479
We can see that we're in state a. The next input character is a one and that allows

69
00:06:16,479 --> 00:06:22,870
us to take a transition to state b and so now where b in state b and where as our

70
00:06:22,870 --> 00:06:25,979
input point well it's beyond the end of the input indicating we are at the end of

71
00:06:25,979 --> 00:06:32,789
the input. And so now this is. We are in an accepting state and we pass the end of

72
00:06:32,789 --> 00:06:39,789
the input and so we accept. Okay? So let's, do another execution. So we start

73
00:06:42,059 --> 00:06:49,059
in state a and let's take as our input the string zero. Okay. And I'd like to draw

74
00:06:50,659 --> 00:06:54,599
the pointer. Actually I should have drawn it before the input so we'll al ways put

75
00:06:54,599 --> 00:07:00,659
the pointer between two input elements. In this case it's a merely to the left of the

76
00:07:00,659 --> 00:07:05,509
one we're about to read. So in this case we're about read zero so in state a. Our

77
00:07:05,509 --> 00:07:10,759
input is zero. We look at our machine. We see that there is no transition on zero.

78
00:07:10,759 --> 00:07:16,129
All right? And so the machine stays stuck. It doesn't make any move at all and this

79
00:07:16,129 --> 00:07:21,569
is our final configuration. And we could see that we're not at the end of the input

80
00:07:21,569 --> 00:07:28,569
and so this is a reject. Okay, so in this case the machine rejects that string as

81
00:07:29,860 --> 00:07:35,949
not being in the language of the machine. Let's do one more example. Let's say that

82
00:07:35,949 --> 00:07:40,819
we're in state, well we're always beginning in state a and the start state,

83
00:07:40,819 --> 00:07:47,819
and let's say our input this time is the string ten, okay? And our input pointer is

84
00:07:47,839 --> 00:07:54,839
there. All right? So again we're in state a. The input is a one and so we'll move to

85
00:07:55,520 --> 00:08:00,809
state b. And now the input doesn't change. Just the input point changes but I'll just

86
00:08:00,809 --> 00:08:04,589
copy the input over to show the difference. Now the input pointer has

87
00:08:04,589 --> 00:08:10,389
advanced cuz we've read one character of input and now we're in another state. And

88
00:08:10,389 --> 00:08:17,080
now we can see that we're in state b. Our next input is zero and there is no

89
00:08:17,080 --> 00:08:23,150
transition on zero from state b and so even though we're in an accepting state, b

90
00:08:23,150 --> 00:08:26,999
as a final state, it's one of the accept state and we haven't consumed the entire

91
00:08:26,999 --> 00:08:32,490
input. And so this, The machine also rejects this string so this is also a

92
00:08:32,490 --> 00:08:39,490
reject. And in general we can talk about the language. Of a finite automata that is

93
00:08:43,360 --> 00:08:50,360
equal to the set of...accepted strings. Okay? So the language of a finite

94
00:08:57,570 --> 00:09:00,320
automaton, when I'm talking about the language of a finite automaton, I mean the

95
00:09:00,320 --> 00:09:06,959
set of strings that the automaton accepts. So now let's do a more complex example.

96
00:09:06,959 --> 00:09:11,779
Let's try to write out an automaton that accepts any number of one followed by a

97
00:09:11,779 --> 00:09:18,779
single zero. So once again well need a start state and we'll also need a final

98
00:09:19,250 --> 00:09:25,490
state and now let's start by thinking about what's the shortest string is that's

99
00:09:25,490 --> 00:09:30,690
in the language of this machine. So in this case, we know it has to end in a

100
00:09:30,690 --> 00:09:35,630
singl e zero. So a zero definitely has to be, a zero transition has to be the last

101
00:09:35,630 --> 00:09:41,350
move and before that zero can come any number of what? In a particular there

102
00:09:41,350 --> 00:09:48,180
could be no 1's. So one transition in this machine is that from start state on input

103
00:09:48,180 --> 00:09:52,649
zero we can definitely go to the final state because the single string consisting

104
00:09:52,649 --> 00:09:56,220
of a single zero isn't the language of this machine. And now the only question is

105
00:09:56,220 --> 00:10:01,310
how do we encode the fact that any number of 1's can proceed to zero? Well, there is

106
00:10:01,310 --> 00:10:07,569
an easy way to do that. We can just add a [inaudible] by the start state. And take

107
00:10:07,569 --> 00:10:11,190
that transition if we read at one. And what does this mean? This means that we'll

108
00:10:11,190 --> 00:10:14,519
stay in the state, state as longer are we're reading 1's and as soon as we read

109
00:10:14,519 --> 00:10:18,639
zero, we'll move to the final state because that has to be the end of the

110
00:10:18,639 --> 00:10:25,139
string if the machine is going to accept it. So let's do a couple of examples to

111
00:10:25,139 --> 00:10:29,440
convince ourselves that this works. Let me label this state?s again. So this is state

112
00:10:29,440 --> 00:10:36,440
a, and that's stat b. So Let's write out here states and input. So we'll begin in

113
00:10:41,670 --> 00:10:48,670
state a and let's take as input 110, okay. So let's do an accepting case first. All

114
00:10:50,579 --> 00:10:55,690
right, So our input pointer begins to the left of the first character. So, we're in

115
00:10:55,690 --> 00:10:59,540
state a in start state. We're reading a one and that says we should take a

116
00:10:59,540 --> 00:11:05,230
transition that puts us back in state a. And so, we advance the input pointer. And

117
00:11:05,230 --> 00:11:09,920
now we consume the first one and, and again we're in state a and the next input

118
00:11:09,920 --> 00:11:16,110
is a one so we'll make another transition to state a. And the input cleaner will

119
00:11:16,110 --> 00:11:21,980
advance. So now we're in state a and the next input is a zero and so we'll take the

120
00:11:21,980 --> 00:11:27,709
transition to b and now in this configuration, so the input pointer has

121
00:11:27,709 --> 00:11:32,759
reached the end of the input we're in an accepting state and so the machine

122
00:11:32,759 --> 00:11:39,759
accepts. 110 is in the language of this machine. So now let's do an example where

123
00:11:41,060 --> 00:11:47,829
we will reject the input. And what configuration do we begin in and again a

124
00:11:47,829 --> 00:11:52,480
configuration for a finite automaton that just means you know a point in the

125
00:11:52,480 --> 00:11:58,550
execution it alwa ys consist of a state and a position of the, the input pointer.

126
00:11:58,550 --> 00:12:03,949
So our initial state is a and now let's just choose the string. I don't know,

127
00:12:03,949 --> 00:12:10,949
let's take 100 and let's confirm that this is not in the language of the machine. All

128
00:12:11,310 --> 00:12:16,819
right, So we begin in state a and our input pointer is there. Now we read a one

129
00:12:16,819 --> 00:12:21,350
and that means, well, you know. So it's from state a transition of one. We stay in

130
00:12:21,350 --> 00:12:27,209
state a and the input pointer advances. And now we see a zero. So from state a and

131
00:12:27,209 --> 00:12:34,209
input zero, we make a transition to state b. And now the input point is here so now,

132
00:12:35,449 --> 00:12:41,029
we're in state b and we have an input of zero but there is no transition the b and

133
00:12:41,029 --> 00:12:45,829
zero, there are no transitions out of b at all and so the machine gets stuck, it

134
00:12:45,829 --> 00:12:49,019
can't get to the en of the input and again, even though we're in an accepting

135
00:12:49,019 --> 00:12:54,329
state we haven't read the entire input yet and so that means the machine will reject.

136
00:12:54,329 --> 00:12:58,480
And so, 100 is not in the language of this machine.
