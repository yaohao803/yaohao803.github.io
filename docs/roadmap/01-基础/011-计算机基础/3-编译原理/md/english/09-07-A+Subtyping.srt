0
00:00:04,230 --> 00:00:07,890
In this video, we're going to talk about sub typing another important idea in cool

1
00:00:07,890 --> 00:00:14,890
and other object oriented languages. Let's begin by taking a look at the typing rule

2
00:00:17,060 --> 00:00:21,560
for let with initialization. So last time we looked at the let rule, but didn't have

3
00:00:21,560 --> 00:00:26,189
the initializers. Let's just see how adding the initializer right here changes

4
00:00:26,189 --> 00:00:31,449
things. So what's going to happen here? Well first of all, notice that the body of

5
00:00:31,449 --> 00:00:38,140
the rule is almost the same. So We type check E1 in an environment where X has

6
00:00:38,140 --> 00:00:43,170
type T0. The type is declared to have in the let And all the other variables have

7
00:00:43,170 --> 00:00:47,309
whatever types O gives them And we can add some type T1, and that'll be the type of

8
00:00:47,309 --> 00:00:52,050
the whole thing. So this piece Right here is exactly the same as before. So what's

9
00:00:52,050 --> 00:00:58,280
new is this line of where we type check the initializer. And so how does that

10
00:00:58,280 --> 00:01:02,570
work? Well, first of all, under the assumptions o we type check e zero, we get

11
00:01:02,570 --> 00:01:07,910
some type t zero. And this is really an aside from the main point, but notice that

12
00:01:07,910 --> 00:01:13,810
we use the environment o, in particular x. The new definition of X is not available

13
00:01:13,810 --> 00:01:20,510
in E0, so if E0 uses the name X that means it uses the name of some other X that's

14
00:01:20,510 --> 00:01:26,380
defined outside Of the lead because we didn't include a, this definition of X in

15
00:01:26,380 --> 00:01:30,800
the environment for type checking E0. All right now, but the main point a, thing I

16
00:01:30,800 --> 00:01:35,950
want to point oh I'm a sly, is that easier or here has type zero which is exactly

17
00:01:35,950 --> 00:01:41,940
same type as X, and that's a requirement of this rule, it says that E0 has to have

18
00:01:41,940 --> 00:01:47,770
the same type as X, and that's actually fairly weak of because it's really a, no

19
00:01:47,770 --> 00:01:54,770
problem if E0 has a type which is a subtype of T0, a. T zero can hold any

20
00:01:54,970 --> 00:01:59,110
sub-type of T zero, that would be absolutely fine. But here we've limited

21
00:01:59,110 --> 00:02:06,110
ourselves to only allowing initializers that exactly match the type of X. So we

22
00:02:07,810 --> 00:02:12,709
can do better if we introduce the sub typing relation on classes. And the most

23
00:02:12,709 --> 00:02:17,379
obvious form of sub typing is that if X is a class and inherits directly from, from

24
00:02:17,379 --> 00:02:23,510
Y, meaning there's a line in the code that says X inherits from Y. Then x should be a

25
00:02:23,510 --> 00:02:28,269
sub type o f Y. And furthermore this relationship is transitive. So if x is a

26
00:02:28,269 --> 00:02:33,060
sub type of y, and y is a sub type of z, then x is a sub type of z. And finally as

27
00:02:33,060 --> 00:02:38,629
you might expect, it's also reflexive, so every class is a sub type of itself. And

28
00:02:38,629 --> 00:02:43,290
using sub typing, we can write out a better version of the let rule with

29
00:02:43,290 --> 00:02:48,340
initialization. So once again, the body, the, the part of the rule that deals with

30
00:02:48,340 --> 00:02:52,909
the body of the let is exactly the same as before, so let's not look at that, and.

31
00:02:52,909 --> 00:02:57,239
Now what we're going to do is we're gonna type check E0 and we get some type T0 out,

32
00:02:57,239 --> 00:03:02,280
and then T0 now is only required to be a sub-type of T, so this here is another

33
00:03:02,280 --> 00:03:07,269
hypothesis. And it just says that T zero has to be a sub type of T and what is T,

34
00:03:07,269 --> 00:03:11,170
well T is now the type that X is declared to be. So this allows E zero to have a

35
00:03:11,170 --> 00:03:16,010
type that's different from the type of X, and the only issue here is that more

36
00:03:16,010 --> 00:03:20,180
programs will type check with this rule in the previous one. The previous rule that

37
00:03:20,180 --> 00:03:24,930
we had was certainly correct, any program that compiled with that rule, would run

38
00:03:24,930 --> 00:03:30,379
correctly, but this is a more permissive and still correct rule. More programs will

39
00:03:30,379 --> 00:03:36,420
compile and type check correctly, using this rule. Sub-typing shows up in a number

40
00:03:36,420 --> 00:03:41,010
of places in the cool type system. Here's the rule for assignment, which is in many

41
00:03:41,010 --> 00:03:45,779
ways similar to the rule for let. So, how does an assignment work, well on the left

42
00:03:45,779 --> 00:03:49,370
hand side is a variable and the right hand side is an expression, we're gonna

43
00:03:49,370 --> 00:03:53,489
evaluate the expression and assign whatever value we get back. To the

44
00:03:53,489 --> 00:03:58,090
variable on the left-hand side And so what how is this type-checked? Well, first of

45
00:03:58,090 --> 00:04:02,260
all, we have to look up the type of X in the environment, and we discovered it has

46
00:04:02,260 --> 00:04:06,730
some type T0 And then we type-check E1 in the same environment. So the set of

47
00:04:06,730 --> 00:04:10,950
variables here is not changing. And so we type-check E1 environment O, and we get

48
00:04:10,950 --> 00:04:15,659
some type T1. And now what has to be true for this assignment to be correct? Well it

49
00:04:15,659 --> 00:04:22,340
has to possible for X to hold the value of type T1. So X's type T0 has to be a super

50
00:04:22,340 --> 00:04:28,160
type, has to be bigger than the type of T1. So, if this [inaudible] Is satisfied,

51
00:04:28,160 --> 00:04:34,480
then the assignment is correct. Another example that uses sub-typing is the rule

52
00:04:34,480 --> 00:04:38,320
for attribute initialization which except for the scope for identifiers is very,

53
00:04:38,320 --> 00:04:42,790
very similar to the rule for normal assignments. So recall what a class looks

54
00:04:42,790 --> 00:04:48,450
like, you can declare a class in Cool and it has at the top level some set of

55
00:04:48,450 --> 00:04:55,450
attributes and methods. And what does an attribute Definition look like. Well it

56
00:04:55,810 --> 00:05:00,150
looks like one of these things. It's, a variable declared to some type and you can

57
00:05:00,150 --> 00:05:04,670
have an initializer on the right hand side. And so in what environment then is

58
00:05:04,670 --> 00:05:08,310
this initializer type checked? Well, its type checked in this special environment O

59
00:05:08,310 --> 00:05:14,370
sub c which just consists of the types of all the attributes that are declared in

60
00:05:14,370 --> 00:05:18,720
class c. So this mean we have to make a pass over the class definition, pull out

61
00:05:18,720 --> 00:05:23,310
all the attribute definitions, all the names of the variables and their types,

62
00:05:23,310 --> 00:05:27,460
build an environment. That [inaudible] all that information, and then we can type

63
00:05:27,460 --> 00:05:32,080
check the initialize rs because remember the initializer for an attribute can refer

64
00:05:32,080 --> 00:05:38,030
to any of the initialize rs for the class. So, let's take a look at how this works.

65
00:05:38,030 --> 00:05:42,180
First we look up the type of X in the environment. That's sum type T O. Now we

66
00:05:42,180 --> 00:05:46,190
type check E1 in the same environment. That's sum type T1. And then just as with

67
00:05:46,190 --> 00:05:53,190
assignment T1 needs to be a subset or a subtype of the type T O. Now we come to

68
00:05:55,710 --> 00:06:00,510
another interesting example how we type check If and Else. And the important thing

69
00:06:00,510 --> 00:06:04,630
about If and Else is that when we're doing type checking we don't know which branch

70
00:06:04,630 --> 00:06:07,730
is going to be taken, we don't know whether the program is going to execute E1

71
00:06:07,730 --> 00:06:12,220
or E2, and in general actually this statement may or If this expression may

72
00:06:12,220 --> 00:06:16,380
execute multiple times doing a run of the program, in sometimes it may execute only

73
00:06:16,380 --> 00:06:20,230
one, other times it may execute it two. And so what that means that the resulting

74
00:06:20,230 --> 00:06:26,870
type of am If and Else is either the type of E1 or the type E2 and we don't. Know a

75
00:06:26,870 --> 00:06:30,770
compile time, which one is going to be . So the best we can do. Is to say the type

76
00:06:30,770 --> 00:06:37,770
of entire if then else is the smallest super type larger than either e1 or e2 The

77
00:06:39,380 --> 00:06:43,510
need to compute an upper bound over two or more types comes up often enough that

78
00:06:43,510 --> 00:06:48,310
we're going to give the operation a special name. We'll call it the LUB or

79
00:06:48,310 --> 00:06:53,130
least upper bound of X and Y. And the least upper bound of X and Y is going to

80
00:06:53,130 --> 00:06:59,420
be Z if Z is an upper bound, so meaning it's bigger than both X and Y, and also if

81
00:06:59,420 --> 00:07:03,250
it is the least among all possible upper bounds. So what this line here says, is

82
00:07:03,250 --> 00:07:09,080
that there is some other Z prime that's bigger than X and Y. Well then z has to be

83
00:07:09,080 --> 00:07:15,270
smaller than z prime. So z is the least, if z smallest of all the possible upper

84
00:07:15,270 --> 00:07:20,680
bounds of x and y. And in Cool, and in most object oriented languages, the least

85
00:07:20,680 --> 00:07:24,630
upper bound of two types is just their least common ancestor in the inheritance

86
00:07:24,630 --> 00:07:30,690
tree. So typically, the inheritance tree is rooted at object or some similarly

87
00:07:30,690 --> 00:07:35,280
named class that incorporates, that includes all possible classes of the

88
00:07:35,280 --> 00:07:40,960
program. And then there's some kind of a hierarchy which is a tree, That descends

89
00:07:40,960 --> 00:07:46,160
from object, and, and if I want to find the least upper bound of two types, say

90
00:07:46,160 --> 00:07:50,470
this type and this type, I just have to walk back through the tree until I find

91
00:07:50,470 --> 00:07:53,720
their least common ancestor. And so, in this case, if I pick these two types out

92
00:07:53,720 --> 00:07:57,280
of my tree, this would be the least upper bound of those two types.
