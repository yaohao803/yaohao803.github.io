0
00:00:00,599 --> 00:00:03,889
Welcome back. In this video, I'm going to show how to use regular expressions to

1
00:00:03,889 --> 00:00:10,889
specify different aspects of programming languages. Must begin with the keywords

2
00:00:12,080 --> 00:00:15,330
and this serves a relatively simple case and I'll just do it for three keywords.

3
00:00:15,330 --> 00:00:19,180
I'll write a regular expression for if, else, or then and it would be obvious how

4
00:00:19,180 --> 00:00:24,710
to do it for more. So let's write a regular expression for if and that would

5
00:00:24,710 --> 00:00:30,170
be under regular expression for i. And followed by the regular expression for f

6
00:00:30,170 --> 00:00:34,690
and we're taking the concatenation of these two. And then we're going to union

7
00:00:34,690 --> 00:00:39,100
that with the regular expression for else and what is that? Well, else consist of

8
00:00:39,100 --> 00:00:44,479
four individual characters so we have to write out a concatenation of those four

9
00:00:44,479 --> 00:00:49,579
characters. And, as you can see this is a little bit verbose with all of these

10
00:00:49,579 --> 00:00:54,909
quotes and kind of messy to read. So in fact, there's a short hand that's normally

11
00:00:54,909 --> 00:01:00,449
used and let me switch over to that right now. So if I want to write the regular

12
00:01:00,449 --> 00:01:04,610
expression for a sequence of single character expressions, I could just

13
00:01:04,610 --> 00:01:09,229
[inaudible] around the outermost characters in the sequence. So for example

14
00:01:09,229 --> 00:01:13,689
most of the tools that let you write this, I put a quote at the beginning right IF

15
00:01:13,689 --> 00:01:18,170
and then I close quote and this means exactly The same thing as this. This is

16
00:01:18,170 --> 00:01:25,170
the concatenation of two single character regular expression and similarly for else,

17
00:01:25,509 --> 00:01:31,950
And similarly for them. And if I have more keywords I'll just write them out and

18
00:01:31,950 --> 00:01:38,950
union them altogether. Now, let's consider a slightly more complicated example. Let's

19
00:01:39,679 --> 00:01:45,070
think about how to specify the integers who want to be the non-empty strings of

20
00:01:45,070 --> 00:01:49,149
digits. So the first problem here is to write out what a digit is and that's

21
00:01:49,149 --> 00:01:54,450
pretty straight forward. A digit is just any of the individual characters zero

22
00:01:54,450 --> 00:01:59,429
through nine and we already know how to write out single character regular

23
00:01:59,429 --> 00:02:06,319
expressions. And it's just a union of ten of those to specify this and it'll take me

24
00:02:06,319 --> 00:02:13,319
just a moment to finish. Here we go. So that's a regular expression for the set of

25
00:02:13,970 --> 00:02:18,840
strings correspondin g to all the single digits. And because we want to refer to

26
00:02:18,840 --> 00:02:24,170
this from time to time and also because as a very common thing to watch too, most

27
00:02:24,170 --> 00:02:29,080
tools have a facility for naming regular expressions. So for example I can name

28
00:02:29,080 --> 00:02:35,860
this one to be digit so a single digital is anything that is generated or is in the

29
00:02:35,860 --> 00:02:41,340
set denoted by this regular expression. And now what we want to do is to have

30
00:02:41,340 --> 00:02:48,340
multiple digits. Well, we know a way to do that. We can just iterate a single digit

31
00:02:48,790 --> 00:02:52,450
as many times as we like. And so here we get all strings, all possible strings of

32
00:02:52,450 --> 00:02:58,370
digits and this is very, very close to what we wanted except that the string that

33
00:02:58,370 --> 00:03:04,870
we want has to be non-empty. We don't want to count the empty string as an integer.

34
00:03:04,870 --> 00:03:10,810
And there's an easy way to do that. We just say that the whole sequence has to

35
00:03:10,810 --> 00:03:16,570
begin with a single digit and then it's followed by zero or more additional digits

36
00:03:16,570 --> 00:03:21,510
so just. Is just to reiterate that, we see there has to be at least one digit and is

37
00:03:21,510 --> 00:03:25,760
followed by zero more additional digits. And this pattern actually for a given

38
00:03:25,760 --> 00:03:31,480
language is extremely common. So if I wanted to say that I have at least one a I

39
00:03:31,480 --> 00:03:38,340
write that as a, a because this has zero or more a, the second part is zero more

40
00:03:38,340 --> 00:03:42,980
a's and the first part says there has to be at least one a. And because this is so

41
00:03:42,980 --> 00:03:47,980
common, there's a short hand for it. I think is supported by every regular

42
00:03:47,980 --> 00:03:53,680
expression processor and that is to write a plus. An a + means is just, is just a

43
00:03:53,680 --> 00:03:58,510
short hand for a star. And so we can actually simplify this regular expression

44
00:03:58,510 --> 00:04:05,510
a bit and write simply digit plus. Now, let's look at yet another example even

45
00:04:08,320 --> 00:04:12,850
more sophisticated than the, the previous two. Let's think about how to define the

46
00:04:12,850 --> 00:04:17,709
identifiers which are strings of letters or digits that begin with a letter. And so

47
00:04:17,709 --> 00:04:23,720
we already know how to do digits so let's focus on the letters for a moment. So how

48
00:04:23,720 --> 00:04:27,320
we write out a regular expression for the letters while we're gonna name it. So

49
00:04:27,320 --> 00:04:32,760
we'll say that the letters or actually a single letter. And now we have to write a

50
00:04:32,760 --> 00:04:37,840
regula r expression for all the individual letters and that's, you know

51
00:04:37,840 --> 00:04:44,840
straightforward but tedious. We have to say little a, lower case b, lower case c,

52
00:04:45,060 --> 00:04:49,900
lower case d. And well, as you can see, this is gonna be rather a large regular

53
00:04:49,900 --> 00:04:54,740
expression. We're going to have 26 lower case letters and 26 upper case letters and

54
00:04:54,740 --> 00:04:59,000
the whole thing is going to be rather tedious as to write down so let's actually

55
00:04:59,000 --> 00:05:05,180
not do that. Instead, let me mention a shorthand, A tool support to make it

56
00:05:05,180 --> 00:05:09,090
easier to write out exactly this kind of regular expression which is called the

57
00:05:09,090 --> 00:05:13,440
character range. So inside your square brackets I can write a range of

58
00:05:13,440 --> 00:05:17,470
characters. So how do I do that? Well, I have the starting character and an ending

59
00:05:17,470 --> 00:05:22,460
character and I separate them by a hyphen. And what this means is the union of all

60
00:05:22,460 --> 00:05:26,210
the single character, regular expressions beginning with the first character and

61
00:05:26,210 --> 00:05:30,110
ending with the second character, so everything in between. So this is exactly

62
00:05:30,110 --> 00:05:32,870
the regular expression for all the lower case letters and then I can have another

63
00:05:32,870 --> 00:05:37,650
character range and so at the same square brackets for all the upper case letters.

64
00:05:37,650 --> 00:05:44,650
So A through Z, Okay? And this regular expression here on the right defines

65
00:05:45,400 --> 00:05:50,050
exactly the big union that I didn't wanna write out, okay? And that gives us a

66
00:05:50,050 --> 00:05:53,520
definition of the single letter and now we're in great shape. We are, we already

67
00:05:53,520 --> 00:05:57,930
have definition for a digit, we already now we have definition for letter and so

68
00:05:57,930 --> 00:06:03,580
that we can write out the rest of this definition. So we want the whole Regular

69
00:06:03,580 --> 00:06:07,340
expression to always begin with a letter. Okay, so identify always begins with a

70
00:06:07,340 --> 00:06:13,180
letter and after that is allowed to be a string of letters or digits, okay? So they

71
00:06:13,180 --> 00:06:18,980
are suggest that there's going to be a union. So After the first letter we can

72
00:06:18,980 --> 00:06:24,540
have either a letter or a digit and then we can have an arbitrary string of those

73
00:06:24,540 --> 00:06:28,970
things. So we put a start on the whole thing and that is the definition of

74
00:06:28,970 --> 00:06:33,540
identifier. Begins with a single letter and it's followed by zero or more letters

75
00:06:33,540 --> 00:06:40,540
and digits. So. Because we're doing a complete lexical specification, we also

76
00:06:41,790 --> 00:06:48,090
have to deal with even the parts of the string that we're not really interested

77
00:06:48,090 --> 00:06:51,639
in. We have to have at least specification of them so then we can recognize and throw

78
00:06:51,639 --> 00:06:56,710
them away. In particular we have to be able to recognize the white space and.

79
00:06:56,710 --> 00:07:00,820
We're just gonna take white space to be a non-empty sequence of blanks, new lines

80
00:07:00,820 --> 00:07:04,190
and tabs even though there are other kinds of white space characters. Things like

81
00:07:04,190 --> 00:07:07,880
maybe like rubout. Depending on your keyboard, there might be others but these

82
00:07:07,880 --> 00:07:12,430
three will suffice to illustrate all the important points. So, you know, blank is

83
00:07:12,430 --> 00:07:17,639
relatively easy to write down. That's just a single quote around the blank space but

84
00:07:17,639 --> 00:07:23,100
there's a problem with new line in tab. Because a new line that carries return in

85
00:07:23,100 --> 00:07:27,880
the file has special meaning typically. You know, and on the line, you end

86
00:07:27,880 --> 00:07:32,260
whatever command you're working on in this regular expression tools like SQL tools.

87
00:07:32,260 --> 00:07:37,360
And, you know, tab also is not an easy thing to write down and it doesn't look

88
00:07:37,360 --> 00:07:41,020
much different from a blank in a lot of cases. So, what tools do is they provide

89
00:07:41,020 --> 00:07:45,870
separate name for these and it's, and typically it's done by having some kind of

90
00:07:45,870 --> 00:07:52,110
escape character and a backslash. Is the most common one that's used and then

91
00:07:52,110 --> 00:07:57,080
followed by a name for the character? So back slash n is typically used for new

92
00:07:57,080 --> 00:08:02,580
line and back slash t is typically used for tab. And I just want to stress I mean

93
00:08:02,580 --> 00:08:07,199
the reason for doing this example is to illustrate this that. We have to have a

94
00:08:07,199 --> 00:08:11,380
way of naming some characters that don't really have a very nice print

95
00:08:11,380 --> 00:08:16,180
representation. There are other characters that, that don't even have really any kind

96
00:08:16,180 --> 00:08:20,310
of print representation and we still need a way to talk about them in our regular

97
00:08:20,310 --> 00:08:25,090
expressions because them might be embedded in a file that we have to lexically

98
00:08:25,090 --> 00:08:29,699
analyze at some point. And so anyway, the way this is done is by providing a

99
00:08:29,699 --> 00:08:34,909
separate. Naming scheme for such on principal characters and typically as the

100
00:08:34,909 --> 00:08:38,599
one that escape sequence. So, something beginning with special character like back

101
00:08:38,599 --> 00:08:42,129
slash followed by the name of the character. So, n for new line and this

102
00:08:42,129 --> 00:08:47,300
case nt for tab. And so to finish off our definition, this gives us. You know? One

103
00:08:47,300 --> 00:08:50,980
character, white space and then we want a non empty sequence or such things so we

104
00:08:50,980 --> 00:08:57,100
could wrap the whole union there in parenthesis and put a plus on it and that.

105
00:08:57,100 --> 00:09:04,100
Get us what we want. Let's pause for a moment in discussing programming languages

106
00:09:04,300 --> 00:09:08,319
and look at another example of using regular expressions from a different

107
00:09:08,319 --> 00:09:13,319
domain. Here I have an e-mail address and as it turns out, e-mail addresses form a

108
00:09:13,319 --> 00:09:17,860
regular language and every e-mail processing device in the world. So your

109
00:09:17,860 --> 00:09:23,829
mailer and the mail servers that you use, all do regular expression processing to

110
00:09:23,829 --> 00:09:28,589
understand what the e-mail address is telling them in the e-mail messages that

111
00:09:28,589 --> 00:09:33,829
they go by. And. And so we can think of an e-mail address is being, is consisting of

112
00:09:33,829 --> 00:09:38,430
four different strings separated by punctuation. There's a username and then

113
00:09:38,430 --> 00:09:44,720
three parts to the domain. Okay. Let's just assume for simplicity that the

114
00:09:44,720 --> 00:09:49,089
strings only consist of letters and practice they can consist of other kinds

115
00:09:49,089 --> 00:09:52,800
of characters too but let's just keep things simple and we can write out the

116
00:09:52,800 --> 00:09:56,220
more complicated things using the regular expressions but the structure would be the

117
00:09:56,220 --> 00:10:00,579
same as if we just consider them to be made of letters. And then these four

118
00:10:00,579 --> 00:10:05,839
strings are separated by punctuations so there's the @ sign and to decimal points

119
00:10:05,839 --> 00:10:11,569
that's. Form the separators of the strings so these is a relatively straightforward

120
00:10:11,569 --> 00:10:16,939
thing to write a regular expression for given what we know so far so the user name

121
00:10:16,939 --> 00:10:23,100
would be the non-empty sequence of letters and then that would be followed by an @

122
00:10:23,100 --> 00:10:28,639
sign. And then the first part of the domain will also be on empty sequence of

123
00:10:28,639 --> 00:10:35,639
letters followed by a dot and then the rest is just the same. Hey, so here we're

124
00:10:39,160 --> 00:10:44,839
quite concisely, we had specified large family of e-mail addresses. As I said in

125
00:10:44,839 --> 00:10:48,249
reality the e-mail addresses are slightly more complicated but they can be written

126
00:10:48,249 --> 00:10:55,249
out with just a slightly more complicated regular expression. Finally for our last

127
00:10:56,819 --> 00:11:01,499
example, let's look at a fragment of the lexical specification of a real

128
00:11:01,499 --> 00:11:06,720
programming language and this case that language is Pascal which is in the

129
00:11:06,720 --> 00:11:11,879
[inaudible] family of languages, Pascal is an early example of a type language and

130
00:11:11,879 --> 00:11:17,999
it's in the same general family as Fortran and C. And in this particular fragment of

131
00:11:17,999 --> 00:11:22,749
pascal deals with the definition of numbers and so let's take a look here.

132
00:11:22,749 --> 00:11:27,100
I'll start at the bottom and look at what the overall definition of a number is. So

133
00:11:27,100 --> 00:11:33,910
a number consist of three things, some digits, and I'll just read out this

134
00:11:33,910 --> 00:11:38,980
abbreviation and optional fraction. And an optional exponent so we're dealing here

135
00:11:38,980 --> 00:11:44,860
with floating point numbers and so a floating point number have a bunch of

136
00:11:44,860 --> 00:11:48,959
digits and then it can be followed possibly by a fraction or not and that

137
00:11:48,959 --> 00:11:55,029
could be followed possibly by an exponent or not and. And the idea, although we

138
00:11:55,029 --> 00:11:58,540
can't see it just for this particular definition is that either of action or the

139
00:11:58,540 --> 00:12:03,619
exponent can be present independent of the other. So, now let's work briefly from the

140
00:12:03,619 --> 00:12:08,100
bottom up, let's just check the digits on what we expect. So a single digit is in

141
00:12:08,100 --> 00:12:12,739
fact the union of all the common digits just as we would hope. And then a

142
00:12:12,739 --> 00:12:17,649
non-empty sequence of digit is a digit plus so this is what we've already seen.

143
00:12:17,649 --> 00:12:21,949
And now the interesting bid is to look at how the optional fraction and the optional

144
00:12:21,949 --> 00:12:25,999
exponent are defined and the optional fraction looks a little less scary so

145
00:12:25,999 --> 00:12:31,529
let's do that one first. So what's going on inside the fraction, well if we have a

146
00:12:31,529 --> 00:12:35,989
decimal fraction, there is gonna be a decimal point and that's gonna be followed

147
00:12:35,989 --> 00:12:40,429
by strong of digits so this is just. The fractional parts of the floating point

148
00:12:40,429 --> 00:12:44,579
number it's just of it comes after the decimal point. And what's this plus

149
00:12:44,579 --> 00:12:49,649
epsilon doing out here? Well remember, the plus is union and epsilon stands for the

150
00:12:49,649 --> 00:12:55,869
empty string. So what this is saying is that either the fractional portion of the

151
00:12:55,869 --> 00:12:59,959
number is present or it's completely absent. So this is how you say something

152
00:12:59,959 --> 00:13:05,220
is optional. You write out the regular expression for the thing and then you do

153
00:13:05,220 --> 00:13:09,399
plus epsilon at the end and that means well, either everything I said before it

154
00:13:09,399 --> 00:13:15,050
can be there or nothing is there. Okay? And the optional exponent is structured

155
00:13:15,050 --> 00:13:20,249
similarly but somewhat more complex. So, you can see the whole exponent is optional

156
00:13:20,249 --> 00:13:26,019
because there's some regular expression here. That's union with epsilon, And so

157
00:13:26,019 --> 00:13:31,939
either Something is there and this is the optional, or this exponent part or is not

158
00:13:31,939 --> 00:13:36,059
present at all. And now let's look inside how the exponents define if it's there.

159
00:13:36,059 --> 00:13:40,970
So, an exponent always begins with e. So this is exponent, you know, standard

160
00:13:40,970 --> 00:13:46,619
exponent notation and it always has a non-empty string of digits. So there's e

161
00:13:46,619 --> 00:13:51,110
followed by some digits and in between, there's an optional sign. We know the sign

162
00:13:51,110 --> 00:13:57,299
is optional because epsilon is one of the possibilities. The whole, the whole sign

163
00:13:57,299 --> 00:14:00,850
might be absent. And one of the possibilities for the sign, well, it could

164
00:14:00,850 --> 00:14:05,049
be negative or it could be positive. So, either there's a positive or negative sign

165
00:14:05,049 --> 00:14:10,910
or no sign. In which case, presumably, it's interpreted to be positive. Now this

166
00:14:10,910 --> 00:14:16,019
idiom where we have + epsilon indicate that something is optional is also

167
00:14:16,019 --> 00:14:21,309
extremely common and so there's another short hand that many tools provide so

168
00:14:21,309 --> 00:14:28,309
another way of writing this, that's common is to say that. That's my fractional

169
00:14:28,920 --> 00:14:35,069
component and then it might be absent. So the question mark after a regular

170
00:14:35,069 --> 00:14:39,879
expression just means exactly this construction, that we take that regular

171
00:14:39,879 --> 00:14:45,860
expression and we or with epsilon. And so this one, this regular expression is a, is

172
00:14:45,860 --> 00:14:48,429
a little more complicated. There's two optional components so let's just write

173
00:14:48,429 --> 00:14:54,839
out what that would look like so we would have the exponent begins with e and then

174
00:14:54,839 --> 00:15:01,660
we have a sign. Which is either + or - and that's optional so we put a question mark

175
00:15:01,660 --> 00:15:08,660
after it followed by a non-empty string or digits and then this whole thing is

176
00:15:09,069 --> 00:15:12,009
optional. The whole exponent is optional. S o this is an alternative and more

177
00:15:12,009 --> 00:15:19,009
compact way to write this expression. To wrap up, I, I always convinced you in this

178
00:15:19,549 --> 00:15:23,470
video that regular expressions can describe many useful languages. We've seen

179
00:15:23,470 --> 00:15:28,579
some fragments from programming languages but also we saw that e-mail addresses

180
00:15:28,579 --> 00:15:33,679
could be specified this way. Other things that are regular languages are things like

181
00:15:33,679 --> 00:15:40,679
phone numbers and file names are also regular. And there are many, many examples

182
00:15:41,189 --> 00:15:46,160
in everyday life where regular languages are used to describe some simple set of

183
00:15:46,160 --> 00:15:52,790
strings. And I also want to emphasize that so far, we've used regular languages as a

184
00:15:52,790 --> 00:15:56,709
language specification. We use it to define the set of strings we're interested

185
00:15:56,709 --> 00:16:01,489
in. But, we haven't said anything about how to actually implement lexical

186
00:16:01,489 --> 00:16:06,449
analysis. We still need an implementation. And that's what we'll talk about in future

187
00:16:06,449 --> 00:16:09,790
videos. In particular, in particular, we're going to look at the problem of

188
00:16:09,790 --> 00:16:14,939
given a string as an irregular expression. Or, how do we know whether that string is

189
00:16:14,939 --> 00:16:17,790
in the language of the regular expression are.
