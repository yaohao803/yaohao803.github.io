0
00:00:03,939 --> 00:00:08,460
In this video, we are going to continue or discussion of run time organization by

1
00:00:08,460 --> 00:00:15,460
talking about how compilers handle global variables and heap data structures. Let's

2
00:00:17,390 --> 00:00:20,970
start by talking about global variables. The basic properties of the global

3
00:00:20,970 --> 00:00:25,250
variables that all the references point to the same object. That what it means to be

4
00:00:25,250 --> 00:00:30,730
global And for this reason, we can't store all the variables in the activation record

5
00:00:30,730 --> 00:00:34,530
because the activation record if, of course, is the allocated. When the

6
00:00:34,530 --> 00:00:39,989
activation completes and that would be the allocated global variable. So. The way

7
00:00:39,989 --> 00:00:43,870
that little variables are implemented is that all global are signed the fix address

8
00:00:43,870 --> 00:00:48,350
once And these variables with fixed addresses are said to be statically

9
00:00:48,350 --> 00:00:52,859
allocated because they're allocated essentially at compiled times. So the

10
00:00:52,859 --> 00:00:57,639
compiler decides where they going to live and then they will live there in all

11
00:00:57,639 --> 00:01:01,729
executions of the program And depending on the language, there may be other

12
00:01:01,729 --> 00:01:07,040
statically allocated values and we'll actually see some later on but they behave

13
00:01:07,040 --> 00:01:13,040
just the same as global variables. So I think global variables changes our run

14
00:01:13,040 --> 00:01:18,130
time organization picture a little bit. First we have the code as before, and

15
00:01:18,130 --> 00:01:21,640
then, immediately after the code is typically all of the static data. So these

16
00:01:21,640 --> 00:01:25,450
are the global variables and other static object, things that have fixed addresses

17
00:01:25,450 --> 00:01:30,460
for the duration of the execution of the program and then the stack comes after

18
00:01:30,460 --> 00:01:35,630
that. So the stack will start at the end of the static data area and grow towards

19
00:01:35,630 --> 00:01:42,630
the end of the program's allocated memory. Trying out to the heat, any value that,

20
00:01:42,920 --> 00:01:47,260
that outlives the procedure that creates it also cannot be stored in the activation

21
00:01:47,260 --> 00:01:50,890
record. Let's take a look at this example. So here we have a procedure foo

22
00:01:50,890 --> 00:01:56,150
and let's take a look at the activation record or frame for foo. Now let's

23
00:01:56,150 --> 00:02:03,020
say that a foo allocates a bar object and that we're going to store that object in

24
00:02:03,020 --> 00:02:08,039
foo activation And now when this method returns, of course the activation record

25
00:02:08,038 --> 00:02:12,660
would be de-allocated so the bar obj ect will also go away but that won't work here

26
00:02:12,660 --> 00:02:17,620
because notice that the dynamically allocated object - the object we allocated

27
00:02:17,620 --> 00:02:22,500
during the execution of foo - is also the results of foo so this has to be, this has

28
00:02:22,500 --> 00:02:29,500
to be accessible to foo's caller. After [inaudible] exits And so what that means

29
00:02:30,390 --> 00:02:34,800
is that this borrow object and all dynamically allocated data has to be

30
00:02:34,800 --> 00:02:37,910
stored some place other than the activation record and language is what

31
00:02:37,910 --> 00:02:44,910
dynamically allocated data generally use a heap for that purpose. At this

32
00:02:45,160 --> 00:02:48,780
point, we can summarize the different kinds of data that the language of

33
00:02:48,780 --> 00:02:54,260
implementation has to deal with. First there is the code and in many languages, I

34
00:02:54,260 --> 00:03:01,260
shouldn't say most. In many languages. The code is fixed size and read only. I mean

35
00:03:01,880 --> 00:03:06,200
that the compiler creates all the code that will be used in the execution of the

36
00:03:06,200 --> 00:03:10,819
program and that could be allocated once. It should say that there are many

37
00:03:10,819 --> 00:03:16,060
languages also were this is not true and code can be dynamically created at one

38
00:03:16,060 --> 00:03:23,060
time. The static area. Would contain data with six addresses and this would be

39
00:03:23,060 --> 00:03:28,160
things like global variables and this is also typically fixed size and it was maybe

40
00:03:28,160 --> 00:03:34,020
readable and writable as opposed to the code which I generally don't want to be

41
00:03:34,020 --> 00:03:39,340
able to write. And then a stack is used to contain an activation record for each

42
00:03:39,340 --> 00:03:44,090
currently active procedure and the activation record is generally fixed size

43
00:03:44,090 --> 00:03:47,489
so each activation record for each particular kind of procedure has a fixed

44
00:03:47,489 --> 00:03:50,770
size and this will contain all the local information, the local variables

45
00:03:50,770 --> 00:03:55,760
contemporaries that needed to execute a particular activation. And finally, the

46
00:03:55,760 --> 00:04:00,930
heap is for everything else. So the heap is just for all the data that doesn't fit

47
00:04:00,930 --> 00:04:07,129
into other categories. This includes all of the dynamically allocated data And if

48
00:04:07,129 --> 00:04:11,940
you are familiar with C, then the heap in C is managed by the programmer using

49
00:04:11,940 --> 00:04:18,940
[inaudible] in Java, you have new. For dynamically allocating data and then

50
00:04:19,940 --> 00:04:25,400
garbage collection actually takes care of reclaiming data from the heap that is no

51
00:04:25,400 --> 00:04:31,590
longer used. Now many lang uage implementations use both the heap and the

52
00:04:31,590 --> 00:04:35,430
stack and there is a little bit of an issue here because both the heap and the

53
00:04:35,430 --> 00:04:40,470
stack grow. And so we have to take care that they don't grow into each and step on

54
00:04:40,470 --> 00:04:46,570
each other's data And there is a very nice and simple solution to this and as a start

55
00:04:46,570 --> 00:04:50,280
to heap and the stack at opposite ends of memory and let them grow towards each

56
00:04:50,280 --> 00:04:57,280
other. So, let's take another look at our Runtime Organization picture And just for

57
00:04:59,080 --> 00:05:04,370
review, first we have the code and then we have the static data. And then we have the

58
00:05:04,370 --> 00:05:11,370
stack which grows towards in this case the high address allocated to the program And,

59
00:05:11,680 --> 00:05:15,840
notice that the stack doesn't necessarily just grow as procedure three terms, stack

60
00:05:15,840 --> 00:05:20,220
will also shrink. So as the program runs the stack will get bigger or smaller

61
00:05:20,220 --> 00:05:25,460
depending on how many procedures are currently running. And the heap will start

62
00:05:25,460 --> 00:05:29,840
at the other end of memory and grow towards the lower address and so we

63
00:05:29,840 --> 00:05:34,180
allocate objects we'll be allocating from the back memory or the end of the memory

64
00:05:34,180 --> 00:05:41,180
allocated the program up towards the top of stack And If these two points have ever

65
00:05:41,630 --> 00:05:45,540
become equal and whether the two pointers. So, we have a stack allocation pointer

66
00:05:45,540 --> 00:05:49,710
which says where we are going to allocate the next stack frame. And we have a heap

67
00:05:49,710 --> 00:05:54,530
allocation point where it says where will allocate the next object if we have

68
00:05:54,530 --> 00:05:58,020
another dynamically allocated object. As long as one of these two pointers don't

69
00:05:58,020 --> 00:06:03,100
cross, as long as it never become equal then the program has memory to either add

70
00:06:03,100 --> 00:06:07,240
another stack frame or another dynamically allocated object and the program can

71
00:06:07,240 --> 00:06:11,770
continue away. If these programs ever become equal then the program is in fact

72
00:06:11,770 --> 00:06:17,650
out of memory and at that point the run time system will abort the program or try

73
00:06:17,650 --> 00:06:22,490
to get more memory from the operating or take some other course of action to deal

74
00:06:22,490 --> 00:06:26,880
with the fact. If there is no there is no more memory But as long as these two

75
00:06:26,880 --> 00:06:31,330
pointers don't cross, notice that this design Allows the heap and the stack to

76
00:06:31,330 --> 00:06:38,330
share this, this data area in whatever way suits the program best. So, this same

77
00:06:39,199 --> 00:06:42,650
design without any changes will work for programs that needed a lot of heap and

78
00:06:42,650 --> 00:06:47,190
only a little stack and for programs that need a lot of stack and only a little heap

79
00:06:47,190 --> 00:06:50,740
and things will have a rough balance between stack and heap as long as they

80
00:06:50,740 --> 00:06:53,629
don't exceed the total memory allocated to the program.
