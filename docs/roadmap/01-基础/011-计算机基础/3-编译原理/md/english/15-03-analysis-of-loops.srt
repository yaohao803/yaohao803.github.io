0
00:00:03,899 --> 00:00:07,960
In this video, we're gonna continue our discussion of analysis of controlled flow

1
00:00:07,960 --> 00:00:12,530
graphs by focusing on what is undoubtedly the most interesting aspect of the whole

2
00:00:12,530 --> 00:00:19,230
problem, the analysis of loops. Here's an example of control flow graph with a loop

3
00:00:19,230 --> 00:00:25,849
in it. And it turns out that the need for the special element bottom in our analysis

4
00:00:25,849 --> 00:00:29,980
is intimately tied to the analysis of loops. And so, let's just think about how

5
00:00:29,980 --> 00:00:36,130
we would do our constant propagation example analysis with this particular

6
00:00:36,130 --> 00:00:42,070
control flow graph, all right. So, what do we know about x? Okay. So, initially, we

7
00:00:42,070 --> 00:00:45,710
don't know anything so before we enter the control flow graph, its value, its top

8
00:00:45,710 --> 00:00:52,670
and, and after the assignment of three, we'll know that x has the value three. The

9
00:00:52,670 --> 00:00:57,710
conditional branch here, the predicate won't affect the value of x. So, it'll be

10
00:00:57,710 --> 00:01:02,190
three on both branches. The assignment to y won't affect it so it'll be three here

11
00:01:02,190 --> 00:01:08,430
as well. And now we come here okay, and let's focus on this statement right here.

12
00:01:08,430 --> 00:01:15,430
So, the rule is that the analysis of x at y equals zero. Okay, So with a value of x

13
00:01:17,260 --> 00:01:24,260
right here before, before the assignment to y. Is a function of all the

14
00:01:24,440 --> 00:01:27,520
predecessors. So, we need to know what the value of x is on both of the incoming

15
00:01:27,520 --> 00:01:30,890
edges. Okay. Well, we don't have a value down here yet. So, the question is, you

16
00:01:30,890 --> 00:01:36,630
know, what is the value of x here on this edge? And in order to figure that out,

17
00:01:36,630 --> 00:01:39,620
we'd have to look at its predecessors. Okay, what are its predecessors? Well,

18
00:01:39,620 --> 00:01:43,470
there's this point here after the predicate there's this point here between

19
00:01:43,470 --> 00:01:47,659
the two statements, and then there's this point here after the execution of y. We're

20
00:01:47,659 --> 00:01:51,920
just following the edges backwards here. Looking at, you know, where we need to

21
00:01:51,920 --> 00:01:56,560
know information for x. We need to know it here, we need to know it here, and we know

22
00:01:56,560 --> 00:02:03,130
it here, alright? And then because of this edge, that means we again need to know it

23
00:02:03,130 --> 00:02:08,420
at both of the predecessors of y = zero. So, now we're in the loop and this isn't

24
00:02:08,419 --> 00:02:13,079
too surprising. I mean, if you have, if information about x depends on t he

25
00:02:13,079 --> 00:02:15,950
predecessors of a statement and you do follow that recursively then you're gonna

26
00:02:15,950 --> 00:02:22,670
wind up going around loops like this. And, and there's no good way at least there's

27
00:02:22,670 --> 00:02:28,170
no, no particularly immediately obvious way to solve this problem. So, how do we I

28
00:02:28,170 --> 00:02:33,999
get information about the predecessor the predecessors of y = zero when they depend

29
00:02:33,999 --> 00:02:40,019
on themselves? So, to be more precise looking at that particular statement again

30
00:02:40,019 --> 00:02:45,639
in order to compute whether x is constant at the point right before the statement y

31
00:02:45,639 --> 00:02:51,329
= zero, we need to know whether x is constant as the two predecessor and that

32
00:02:51,329 --> 00:02:56,010
information depends on his predecessors, which include y = zero. Okay, so this is

33
00:02:56,010 --> 00:03:03,010
the conundrum. So, how are we to solve this recursive problem. And there's a

34
00:03:04,739 --> 00:03:10,629
standard solution that, that is actually used in many areas of Mathematics and not

35
00:03:10,629 --> 00:03:15,510
just in the analysis of, of loops. When you have these kinds of recurrence

36
00:03:15,510 --> 00:03:21,290
relationships or recursive equations. And the standard solution is to break the

37
00:03:21,290 --> 00:03:26,620
cycle by starting with some initial guess. So, you have some initial approximation

38
00:03:26,620 --> 00:03:32,419
that is really not perhaps even expected to be the final result but allows you to

39
00:03:32,419 --> 00:03:36,099
get going. So, and so, what we're going to do is that because of the cycles, all of

40
00:03:36,099 --> 00:03:40,879
the points, all the program points have to have values at all times. And so we're

41
00:03:40,879 --> 00:03:44,909
going to assign an initial value and that is what bottom is for. And the initial

42
00:03:44,909 --> 00:03:49,129
value bottom means, so far as we know, control never reaches this point. Remember

43
00:03:49,129 --> 00:03:54,370
this, we've said this quite a while ago on several videos ago. And this will allow us

44
00:03:54,370 --> 00:04:01,370
to make progress. And to see that let's go ahead and analyze this control flow graph

45
00:04:03,370 --> 00:04:09,120
now where we assume that all points, and at all points, initially, x has the value

46
00:04:09,120 --> 00:04:13,699
bottom except at the entry point. So, the entry point is special. Here, we assume

47
00:04:13,699 --> 00:04:16,780
that we don't know anything about x because we know the control reaches the

48
00:04:16,779 --> 00:04:21,970
initial point. But, initially, we're going to just say, well, x is bottom everywhere

49
00:04:21,970 --> 00:04:28,970
else. Okay, so, [inaudible] the bottom there, [inaudible] bottom there, okay, I'm

50
00:04:29,300 --> 00:04:36,300
gonna just fill in all the values. And I'm just writing it everywhere here. And

51
00:04:41,169 --> 00:04:45,599
there's really another one right here after the merge of these two paths. So, I

52
00:04:45,599 --> 00:04:50,870
indicate that. All right, so there, now we have our initial setup and now remember

53
00:04:50,870 --> 00:04:54,780
what the procedure is, we go and look where the information is inconsistent and

54
00:04:54,780 --> 00:04:57,780
we update it. So where is the place where the information is inconsistent? Well,

55
00:04:57,780 --> 00:05:02,370
clearly it's not correct here, all right, because we know that after if, if control

56
00:05:02,370 --> 00:05:07,159
reaches the point before x = three, then after the assignment, x will be equal to

57
00:05:07,159 --> 00:05:14,159
three. Again the predicate will not change the value of x, so we have to update the

58
00:05:14,639 --> 00:05:18,400
results of the two branches after the predicate, and after it's assignment, that

59
00:05:18,400 --> 00:05:21,919
doesn't affect x to make that information consistent that we have that. Now, let's

60
00:05:21,919 --> 00:05:27,710
go back to our interesting case. Here we know that x = three on this branch coming

61
00:05:27,710 --> 00:05:34,110
in to y = zero. And, so far as we know, control never reaches the other

62
00:05:34,110 --> 00:05:37,860
predecessor. So, we're gonna start out by assuming that, that, that part, that path

63
00:05:37,860 --> 00:05:41,599
is never taken. And if that path is never taken, then it won't contribute anything.

64
00:05:41,599 --> 00:05:46,050
And s, at this point in the program, we will know that x = three. So, assuming

65
00:05:46,050 --> 00:05:50,360
that all this information is correct we will be able to conclude that x = three at

66
00:05:50,360 --> 00:05:53,990
this point. And notice how we've been able to break the cycle here and get started.

67
00:05:53,990 --> 00:05:58,990
So, we just assume that the, you know, this last edge in the cycle never executes

68
00:05:58,990 --> 00:06:03,259
and if that's not correct, we'll find out later and this value down here will become

69
00:06:03,259 --> 00:06:07,030
something other than bottom and then we'll update the assignment again. Alright, so

70
00:06:07,030 --> 00:06:14,030
let's continue on. So, we have x = three before y is assigned zero. So the

71
00:06:15,340 --> 00:06:18,379
assignment of y will not affect the value of x. So, make the information afterward

72
00:06:18,379 --> 00:06:23,689
consistent we'll have to make x=3 there. Now, we have a merge of two paths. Okay.

73
00:06:23,689 --> 00:06:29,050
So, the, at this point here before the execution of this assignment we will also

74
00:06:29,050 --> 00:06:34,030
know that x = three. The assignment a will not affect x. We'll update that point

75
00:06:34,030 --> 00:06:38,840
there and the predicate will not affect the value of x. So, we'll know that x =

76
00:06:38,840 --> 00:06:43,030
three on the back edge. And now this information has changed. We now know the

77
00:06:43,030 --> 00:06:46,960
control can reach this edge cuz we followed the control path all the way

78
00:06:46,960 --> 00:06:51,210
here. We have some new information about x and so now we have to double check that

79
00:06:51,210 --> 00:06:55,759
everything is still okay. So, here we have x = three on this edge, x = three on this

80
00:06:55,759 --> 00:07:01,939
edge and our previous conclusion that x = three on the entry to the statement y =

81
00:07:01,939 --> 00:07:06,389
zero. Well, that is also consistent. There are no places left in the control flow

82
00:07:06,389 --> 00:07:10,249
graph that are inconsistent. So, all the information is consistent with all the

83
00:07:10,249 --> 00:07:14,620
rules And so we're done, and this is the final analysis. We're able to conclude

84
00:07:14,620 --> 00:07:18,280
that all, at all of these points here, like I say, every point except the entry

85
00:07:18,280 --> 00:07:20,349
point, that x is in fact, the constant three.
