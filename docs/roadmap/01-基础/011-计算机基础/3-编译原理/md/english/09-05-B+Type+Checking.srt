0
00:00:00,810 --> 00:00:04,060
To summarize, type checking proves facts with a form, E has type

1
00:00:04,059 --> 00:00:08,880
T And notice that this proof is on the structure of the abstract syntax tree.

2
00:00:08,880 --> 00:00:15,140
So, for the expression one+2, we prove something about one+2, but by first proving

3
00:00:15,140 --> 00:00:18,660
something about each of the sub-expressions. So we prove that the sub-expressions

4
00:00:18,660 --> 00:00:22,369
had type int. And then we managed to prove that the whole thing had

5
00:00:22,369 --> 00:00:29,369
type int. And so the proof has the same shape as the abstract syntax tree. You can

6
00:00:29,369 --> 00:00:34,110
look at this proof as a tree. Now the root of the tree in the case of the proof is at

7
00:00:34,110 --> 00:00:37,580
the bottom, we usually draw the abstract syntax tree with the root at the top, so this

8
00:00:37,580 --> 00:00:41,980
tree looks like this, whereas we often draw the abstract syntax tree in the

9
00:00:41,980 --> 00:00:45,670
other way around. But, the important thing here is that the proof has the shape of the

10
00:00:45,670 --> 00:00:50,260
abstract syntax tree and there's one type rule that's used for each abstract syntax

11
00:00:50,260 --> 00:00:54,210
tree node. So there's a very direct correspondence between the structure of the

12
00:00:54,210 --> 00:00:59,160
proof and the shape of the abstract syntax tree. And in general the type rule

13
00:00:59,160 --> 00:01:03,600
used for a particular node of the abstract syntax string, the hypothesis, are going to

14
00:01:03,600 --> 00:01:08,070
be the proofs of the type of E's sub-expressions. So, whatever sub-expressions

15
00:01:08,070 --> 00:01:12,320
make up E we're going to need types for them first. And the conclusion

16
00:01:12,320 --> 00:01:16,159
at, at that particular node will be the type of the entire expression

17
00:01:16,159 --> 00:01:20,999
E. And this way you can that types are computed in a bottom up pass over the abstract

18
00:01:20,999 --> 00:01:24,020
syntax string. That is I assign first types to the leads. Like here I know

19
00:01:24,020 --> 00:01:29,710
that one has type int and two has type int and then. The types flow towards the root.

20
00:01:29,710 --> 00:01:33,700
I'm able to compute then the next level abstract of syntax tree and so on And then

21
00:01:33,700 --> 00:01:38,509
once I computed the types of all the sub expression of a knob. Then I can compute the

22
00:01:38,509 --> 00:01:40,290
type at that knob.
