0
00:00:03,530 --> 00:00:07,350
In this video we're going to talk about simple tables an important data structure

1
00:00:07,350 --> 00:00:14,350
in many filers before we talk about what a simple table is I want to talk about a

2
00:00:16,209 --> 00:00:21,090
generic algorithm that we're going to be seeing instances of over and over again

3
00:00:21,090 --> 00:00:25,090
for the rest of the course. So, a lot of semantic analysis and in fact, a lot of

4
00:00:25,090 --> 00:00:29,710
code generation can be expressed as a recursive descent of an abstract syntax

5
00:00:29,710 --> 00:00:36,019
tree. And the basic idea is that in each step we do the following three things:

6
00:00:36,019 --> 00:00:40,269
we're always processing a particular node in the tree, so if I draw a picture of the

7
00:00:40,269 --> 00:00:47,239
abstract syntax tree it might have a node and some sub-trees hanging off of it. And

8
00:00:47,239 --> 00:00:52,359
we may do some processing of the node before we do anything else. We arrive at

9
00:00:52,359 --> 00:00:55,550
the node say from the parents, we come to here for the parent, we do some processing

10
00:00:55,550 --> 00:00:59,300
in the node and I'm just indicating that by coloring it blue to indicate that we

11
00:00:59,300 --> 00:01:05,950
did something here. And then we go off and we process the children. Okay. And after

12
00:01:05,950 --> 00:01:11,790
we process the children, after we come back to the node, we do something else. We

13
00:01:11,790 --> 00:01:16,240
may do some post processing of the node, and then we return. And of course, at the

14
00:01:16,240 --> 00:01:19,619
same time, when we've gone off and processed the children, then we're

15
00:01:19,619 --> 00:01:23,579
processing all their nodes in the same pre imposed fashion, so they're getting the

16
00:01:23,579 --> 00:01:28,380
same treatment, with some stuff being done before each node is touched, and some

17
00:01:28,380 --> 00:01:34,070
stuff being done after all their children have been processed. Okay. And. There are

18
00:01:34,070 --> 00:01:39,310
many, many examples of this kind of an algorithm. This is called a recursive

19
00:01:39,310 --> 00:01:44,219
descent traversal of a tree. There are some instances in which we'll only process

20
00:01:44,219 --> 00:01:47,810
each note before we process the children. Some where we only process each note after

21
00:01:47,810 --> 00:01:52,130
we process all the children. Some where we do both as illustrated here in this little

22
00:01:52,130 --> 00:01:57,689
diagram And returning to the main topic of this particular video. When we're

23
00:01:57,689 --> 00:02:01,229
performing semantic analysis on a portion of the abstract syntax tree, we're going

24
00:02:01,229 --> 00:02:06,859
to know, need to know which identifiers are defined. Which identifiers are in

25
00:02:06,859 --> 00:02:10,590
scope? An exam ple of this kind of recursive descent strategy is how we can

26
00:02:10,590 --> 00:02:15,860
process let bindings to track the set of variables that are in the scope. So we

27
00:02:15,860 --> 00:02:21,290
have our let node in the fx syntax tree and in one sub tree we have the

28
00:02:21,290 --> 00:02:28,290
initialization, and in the other sub tree we have e, the body of the let, and then

29
00:02:29,599 --> 00:02:33,010
this is a let for some particular variable, and let's just write that

30
00:02:33,010 --> 00:02:40,010
variable inside the parent node here. And so, when we begin processing of this O,

31
00:02:40,440 --> 00:02:43,950
just imagine that we're coming from above. So we're doing this. We're processing the

32
00:02:43,950 --> 00:02:50,129
abstract syntax tree recursively. And so we reach this point from some parent and.

33
00:02:50,129 --> 00:02:54,470
There's going to be a set of symbols that are currently in scope. That, that's some

34
00:02:54,470 --> 00:02:58,580
data structure that lives off to the side, And in fact, that's going to be our symbol

35
00:02:58,580 --> 00:03:03,450
table And what is going to happen here? Well, the first we're going to have to do

36
00:03:03,450 --> 00:03:07,750
is we're going to have to process, the initializer. We're going to need to know

37
00:03:07,750 --> 00:03:11,360
whether that's, what, whatever function we're doing on this, like type checking or

38
00:03:11,360 --> 00:03:16,000
whatever. We might get on and process that first And we'll pass the symbol table in.

39
00:03:16,000 --> 00:03:22,330
Okay. And then we're going to process the body of the let But when we do that we're

40
00:03:22,330 --> 00:03:26,790
going to pass in a set of symbols that are in scope. But now also X is now going to

41
00:03:26,790 --> 00:03:32,510
be in scope. So X is going to be added before we process E to the set of symbols.

42
00:03:32,510 --> 00:03:36,250
And then when we return from some expression E it's going to be removed. So,

43
00:03:36,250 --> 00:03:42,400
it'll restore the symbol table to its previous state. So that after we leave

44
00:03:42,400 --> 00:03:46,829
this sub tree of the abstract syntax tree, we only have the same set of symbols to

45
00:03:46,829 --> 00:03:53,099
find that we had before we entered it, So in the terminology of the three part

46
00:03:53,099 --> 00:03:58,049
algorithm For recursive descent that we had on the first slide. What are we doing

47
00:03:58,049 --> 00:04:02,430
here? Well, before we process E we are going to add the definition of X to our

48
00:04:02,430 --> 00:04:06,340
list of current definitions. Already any other definition of X that might have been

49
00:04:06,340 --> 00:04:10,299
visible outside of that expression. Then we are going to recurse we going to

50
00:04:10,299 --> 00:04:14,959
process all. Of the abstract syntax tree no des in the body of the [inaudible],

51
00:04:14,959 --> 00:04:18,760
inside of E, and after we finish processing E, we are gonna remove the

52
00:04:18,760 --> 00:04:23,530
definition of X and restore whatever old definition of X we had. And a symbol table

53
00:04:23,530 --> 00:04:28,030
is just a data structure that accomplishes these things. It tracks the current

54
00:04:28,030 --> 00:04:33,910
bindings of identifiers at each point in the abstract syntax tree. For a very

55
00:04:33,910 --> 00:04:37,580
simple, simple table, we could just use a stack, and it would have just say the

56
00:04:37,580 --> 00:04:43,139
following three operations, we could add a symbol. To the symbol table and that will

57
00:04:43,139 --> 00:04:47,639
just push the symbol, push the variable onto the stack and whatever other

58
00:04:47,639 --> 00:04:52,289
information we want, like its type. We'll have a find symbol operation that will

59
00:04:52,289 --> 00:04:57,770
look up the current definition for a symbol. And that can be done by simply

60
00:04:57,770 --> 00:05:02,240
searching the, the stack. Starting from the top for the first occurrence of the

61
00:05:02,240 --> 00:05:07,449
variable name, And this will automatically take care of the hiding of all

62
00:05:07,449 --> 00:05:14,180
definitions. So, for example, If we have a stack, let's say has X, Y and Z on it and

63
00:05:14,180 --> 00:05:20,389
then we come into a scope that introduces a new Y. Y on top and now if we search the

64
00:05:20,389 --> 00:05:26,430
stack we find this y first effectively hiding the old definition of y and then.

65
00:05:26,430 --> 00:05:30,199
When we leave a scope we can remove a symbol simple popping a stack. We'll just

66
00:05:30,199 --> 00:05:34,430
pop the current variable off of this stack. That will get rid of the most

67
00:05:34,430 --> 00:05:40,440
recent definition. And, and leave the stack, leave the set of definitions in the

68
00:05:40,440 --> 00:05:44,860
same state it was before we entered the node at all. So, this example, if we left

69
00:05:44,860 --> 00:05:48,940
the scope where the Y is defined and that was popped off the stack, So that was

70
00:05:48,940 --> 00:05:52,810
gone. Now, when we search for Y we'll find the outer definition. The one that was

71
00:05:52,810 --> 00:05:59,360
defined outside of that inner scope, So this simple symbol table works well for

72
00:05:59,360 --> 00:06:02,940
let, because the symbols rate at one at a time, and because declarations are

73
00:06:02,940 --> 00:06:08,240
perfectly nested. And in fact, the fact that declarations were perfectly nested is

74
00:06:08,240 --> 00:06:15,240
really the whole reason that we can use a stack/ So, take a look at this little

75
00:06:15,400 --> 00:06:19,490
example, let's say we have three nested lets, and here I'm not showing the

76
00:06:19,490 --> 00:06:25,919
initializers in the less sub trees, and they, they don't matter, for what I want

77
00:06:25,919 --> 00:06:32,060
to illustrate. So if you think about it as we walk from the root here down to the

78
00:06:32,060 --> 00:06:37,259
inner bindings, we're pushing things on the stack, we'll push things on the stack

79
00:06:37,259 --> 00:06:41,590
in the order X, Y, and then Z. And then as we leave, after we've processed this sub

80
00:06:41,590 --> 00:06:46,360
tree, and we're leaving it, walking back out, we're going to encounter these left

81
00:06:46,360 --> 00:06:51,860
scopes in exactly the reverse order. And popping them off the stack is exactly the

82
00:06:51,860 --> 00:06:57,270
order in which we want to remove them, and that's why a stack works well. So

83
00:06:57,270 --> 00:07:04,270
Structure works fine for lets, but for some other constructs it's not quite as

84
00:07:04,349 --> 00:07:11,349
good as it could be so for example consider the following piece of code.

85
00:07:11,650 --> 00:07:15,669
Illegal piece of code I should add. Let's say we're declaring a method, and it has

86
00:07:15,669 --> 00:07:20,800
two arguments named X. Now, that's not legal but in order to detect that it's not

87
00:07:20,800 --> 00:07:25,020
legal you. Why is it not legal? It's not legal cause they're both defined in the

88
00:07:25,020 --> 00:07:30,220
same scope. So, Functions, or methods, have the property that they introduce

89
00:07:30,220 --> 00:07:35,470
multiple names at once into the same scope. And it's not quite so easy, to use

90
00:07:35,470 --> 00:07:40,650
a stack, where we only add one thing at a time, or one name at a time, to model

91
00:07:40,650 --> 00:07:45,389
simultaneous definition in a scope. So this problem is easily solved with just a

92
00:07:45,389 --> 00:07:50,319
slightly fancier simple table. Here is the revised interface now with five methods

93
00:07:50,319 --> 00:07:55,909
instead of three. The biggest change is that now we have explicit enter and exit

94
00:07:55,909 --> 00:08:00,099
scope functions, and so these functions start in the nested scope and exit the

95
00:08:00,099 --> 00:08:04,330
current scope. And the way you think about this is that our new structure is a stack

96
00:08:04,330 --> 00:08:09,990
of scopes, so [inaudible] is the entire scope and the inner scope. Is, are all the

97
00:08:09,990 --> 00:08:15,270
variables that are defined at the same level, within that single scope. So just

98
00:08:15,270 --> 00:08:19,150
like before, we have a find symbol operation that will look up a variable

99
00:08:19,150 --> 00:08:22,680
name, and it will return the current definition, or null if there is no

100
00:08:22,680 --> 00:08:28,110
definition in any scope that's currently available. We'll have an add symbol

101
00:08:28,110 --> 00:08:32,950
Operation that adds a new symbol to the table, and adds it in the curren t scope,

102
00:08:32,950 --> 00:08:38,110
so whatever, scope is at the top of our scope stack. And then one more new

103
00:08:38,110 --> 00:08:43,260
operation, check scope. Will return true if X is already defined in the current

104
00:08:43,260 --> 00:08:48,700
scope, So this, just to be clear what this does, this returns true if X is defined in

105
00:08:48,700 --> 00:08:54,270
exactly the top scope. It doesn't return true unless, X is defined in the scope at

106
00:08:54,270 --> 00:08:57,750
the very, very top of the stack. And this allows you to check for double

107
00:08:57,750 --> 00:09:03,440
definitions, So, for example, in the, code that I had before on the previous slide,

108
00:09:03,440 --> 00:09:10,440
if we had two declarations of X. How would we check this? Well, we would add X to the

109
00:09:10,590 --> 00:09:14,770
symbol table, in the current scope. And then we would ask, well, is X already

110
00:09:14,770 --> 00:09:18,730
defined in this scope for the second one? And this interface would be return true,

111
00:09:18,730 --> 00:09:23,540
and we would know to raise an error saying that X, had been multiply defined.

112
00:09:23,540 --> 00:09:28,980
Finally, let me just add that this is the simple table interface or something very

113
00:09:28,980 --> 00:09:32,880
close to this is the simple table interface that is supplied with the cool

114
00:09:32,880 --> 00:09:36,290
project. And there's already implementation of this interface provided

115
00:09:36,290 --> 00:09:41,600
if you don't want to write your own. So let's wrap up this video by talking a

116
00:09:41,600 --> 00:09:45,640
little bit about class names, which behave quite differently from the variables

117
00:09:45,640 --> 00:09:49,830
introduced in let bindings and in function parameters. In particular class names can

118
00:09:49,830 --> 00:09:55,960
be used before they are defined, as we discussed a few videos ago. And what that

119
00:09:55,960 --> 00:10:00,670
means is that we can't check class names, in a single pass. We can't just walk over

120
00:10:00,670 --> 00:10:05,600
the program once. And check that every class that is used is defined because we

121
00:10:05,600 --> 00:10:09,120
don't know that we've seen all the definitions of the classes until we reach

122
00:10:09,120 --> 00:10:13,280
the very end of the program. And so there is a solution to this we have to make two

123
00:10:13,280 --> 00:10:18,860
passes over the program. In the first pass we gather all the class definitions, we go

124
00:10:18,860 --> 00:10:22,710
through and we find every place where a class is defined, record all of those

125
00:10:22,710 --> 00:10:25,730
names. And in the second pass we go through and look at the bodies of the

126
00:10:25,730 --> 00:10:30,590
classes and make sure they only use classes that were defined. And the lesson

127
00:10:30,590 --> 00:10:34,130
here, this is actually not complicated to implement I think it's quite clear. Should

128
00:10:34,130 --> 00:10:38,660
be quite clear how this will work. But the message here is that semantic analysis is

129
00:10:38,660 --> 00:10:43,110
going to require multiple passes, and probably more than two. And, in fact, you

130
00:10:43,110 --> 00:10:47,390
should not be afraid when structuring your compiler to add lots and lots of simple

131
00:10:47,390 --> 00:10:53,410
passes if that makes your life easier, so it's better to break something up into

132
00:10:53,410 --> 00:10:56,920
three or four simple passes rather than to have one very, very complicated pass where

133
00:10:56,920 --> 00:11:00,990
all the code is entangled. I think you'll find it much easier to debug your

134
00:11:00,990 --> 00:11:04,540
compilers if you're willing to make multiple passes over the input.
