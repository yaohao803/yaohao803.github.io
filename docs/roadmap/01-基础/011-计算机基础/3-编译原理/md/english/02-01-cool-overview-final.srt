0
00:00:04,630 --> 00:00:09,630
Hello, in this and the next few videos I'm going to be giving a overview of COOL the

1
00:00:09,630 --> 00:00:16,630
programming language in which you'll be writing a compiler. Cool is the Classroom

2
00:00:18,349 --> 00:00:25,040
Object Oriented Language and the acronym of course, is COOL. And the unique design

3
00:00:25,040 --> 00:00:29,860
requirement for COOL is that the compiler has to be able to be written in a

4
00:00:29,860 --> 00:00:33,480
relatively short period of time. We only have one quarter, or in some cases, a

5
00:00:33,480 --> 00:00:40,480
semester for students to write the compilers. And so COOL has to be

6
00:00:40,850 --> 00:00:46,800
implementable quickly. And actually since it's used primarily for teaching

7
00:00:46,800 --> 00:00:52,700
compilers, the number of COOL compilers in the world vastly exceeds, the number of

8
00:00:52,700 --> 00:00:57,340
COOL programs. So, there many, many more compilers have been written, thousands of

9
00:00:57,340 --> 00:01:01,450
compilers, maybe tens of thousands of compilers have been written for COOL, but

10
00:01:01,450 --> 00:01:05,970
probably only some dozens, or hundreds COOL programs. And so, it's probably the

11
00:01:05,970 --> 00:01:10,229
only language, in existence for which this is true, That, that, the number of

12
00:01:10,229 --> 00:01:15,200
compilers actually exceeds the number of programs, but it does Tell you about the

13
00:01:15,200 --> 00:01:19,439
main design requirement. It's much more important in COOL that the compiler be

14
00:01:19,439 --> 00:01:24,139
easy to write then that it be easy to write programs in. And so there are some

15
00:01:24,139 --> 00:01:29,340
quirks in the language, Things that have been done specifically to make it easier

16
00:01:29,340 --> 00:01:35,450
to implement where that wouldn't take away from the, the teaching value of the, of

17
00:01:35,450 --> 00:01:39,030
the language. But that would make it inconvenient to use the language on a

18
00:01:39,030 --> 00:01:45,630
day-to-day basis as a working programmer. So, what is in the language? Well it's,

19
00:01:45,630 --> 00:01:49,159
we've tried to design it so that it will give you a taste of modern notions of

20
00:01:49,159 --> 00:01:53,759
extraction static typing reuse through inheritance, automatic memory management.

21
00:01:53,759 --> 00:01:57,679
And there's actually a few more things that we'll talk about when we come to

22
00:01:57,679 --> 00:02:02,420
them. But many things are left out. We're not gonna be able to put everything in the

23
00:02:02,420 --> 00:02:05,849
language and have it be implementable quickly. We'll be able to cover some

24
00:02:05,849 --> 00:02:09,789
things in lectures, but unfortunately, there'll even be some interesting language

25
00:02:09,788 --> 00:02:16,789
ideas that we won't be able to get to in this class. So the course project is to

26
00:02:17,280 --> 00:02:22,160
build a complete compiler. And specifically you're going to compile COOL

27
00:02:22,160 --> 00:02:27,810
into MIPS assembly language. So MIPS is a real instruction set, It was for a machine

28
00:02:27,810 --> 00:02:33,200
that was designed in the 1980's. And there is a simulator for MIPS that runs on just

29
00:02:33,200 --> 00:02:36,860
about any kind of hardware. And so this makes the, the whole project very

30
00:02:36,860 --> 00:02:42,300
portable, We can run your compiler, or you can generate MIPS assembly language and

31
00:02:42,300 --> 00:02:45,650
then that MIPS assembly language can be simulated on just about whatever kind of

32
00:02:45,650 --> 00:02:50,740
machine you have access to. The project is broken up into five assignments. First

33
00:02:50,740 --> 00:02:54,840
you're gonna write a COOL program. And that program itself will be an interpreter

34
00:02:54,840 --> 00:02:58,080
to give you a little bit of experience with writing a simple interpreter. And

35
00:02:58,080 --> 00:03:03,040
then the compiler itself will consist of the four the phases that we discussed

36
00:03:03,040 --> 00:03:07,610
lexical analysis, parsing, semantic analysis and code generation. And all of

37
00:03:07,610 --> 00:03:12,620
these phases, I should emphasize are [inaudible] compatible. Meaning that we

38
00:03:12,620 --> 00:03:16,320
have separate implementations, separate reference implementations of each of

39
00:03:16,320 --> 00:03:20,620
these. And so for example, when you are working on semantic analysis, you will be

40
00:03:20,620 --> 00:03:25,500
able to take the lexical analysis, parsing, and code generation components

41
00:03:25,500 --> 00:03:31,790
from the reference compiler and plug your semantic analysis into that. Framework

42
00:03:31,790 --> 00:03:36,510
and, and test it against the reference components. And so this way if you have

43
00:03:36,510 --> 00:03:40,560
trouble with one component or aren't sure that your components is working very well

44
00:03:40,560 --> 00:03:44,080
you won't have a problem in working on a different component because you'll be able

45
00:03:44,080 --> 00:03:50,090
to test that independently. And finally there's no required optimization

46
00:03:50,090 --> 00:03:54,730
assignment, But we do have some suggestions for optimizations that you can

47
00:03:54,730 --> 00:04:00,100
do. And many people have written optimizations for COOL. And so this is an

48
00:04:00,100 --> 00:04:05,819
optional assignment if you're interested in learning something about program

49
00:04:05,819 --> 00:04:12,819
optimization. So, let's write the simplest possible COOL program. And the first thing

50
00:04:17,029 --> 00:04:22,440
to know is that COOL source files, and in the extension dot CL for COOL, and you can

51
00:04:22,440 --> 00:04:28,670
use whatever editor you like to write your programs. I happen to use Emacs, you can

52
00:04:28,670 --> 00:04:34,600
use some other editor if you like. And every COOL program has to have a class

53
00:04:34,600 --> 00:04:40,750
called main. And let's talk about that business in a second. So a class

54
00:04:40,750 --> 00:04:44,790
declaration in COOL begins with the key word, class, Followed by the name of the

55
00:04:44,790 --> 00:04:50,930
class, So in this case, main, Followed by a pair of curly braces And inside the

56
00:04:50,930 --> 00:04:56,180
curly braces is where all the stuff that belongs to the class goes, And every class

57
00:04:56,180 --> 00:05:00,970
declaration must be terminated by a semi-colon. So a program consists of a

58
00:05:00,970 --> 00:05:06,460
list of class declarations. Each class declaration terminated by a semi-colon. So

59
00:05:06,460 --> 00:05:11,000
that's the structure of a class. And now we need this class to actually do

60
00:05:11,000 --> 00:05:16,680
something so we're going to have a method in this class, and let's call the method

61
00:05:16,680 --> 00:05:23,200
main. In fact the main method of the main class must always exist. This is the

62
00:05:23,200 --> 00:05:27,660
method that's run to start the program and furthermore this method must take no

63
00:05:27,660 --> 00:05:32,980
arguments. So the empty argument list for the main method is always empty. And let's

64
00:05:32,980 --> 00:05:39,900
say the main method its body always goes in a pair of curly braces. So the main

65
00:05:39,900 --> 00:05:45,750
method always goes inside curly braces. And a class consists of a list of such

66
00:05:45,750 --> 00:05:49,370
declarations. And again, those declarations must all be separated by

67
00:05:49,370 --> 00:05:53,740
semicolons. So in, or terminated, excuse me, by semicolons. So in this case, we

68
00:05:53,740 --> 00:05:59,010
only have one method in the class. But still has to have its semi-colon and now

69
00:05:59,010 --> 00:06:02,030
we can say what we want the method actually do so this is the place for the

70
00:06:02,030 --> 00:06:05,889
code for the method goes and let's just have the simplest possible method the one

71
00:06:05,889 --> 00:06:12,889
that just event evaluates to the number one. Okay, so [inaudible] an expression

72
00:06:12,919 --> 00:06:18,060
language, which means that wherever a piece of code can go, you can put an

73
00:06:18,060 --> 00:06:22,400
arbitrary expression, any expression can go there there's no explicit return

74
00:06:22,400 --> 00:06:27,470
statement for a method. It's just a value of the method body is the value of the

75
00:06:27,470 --> 00:06:30,810
methods. So in this case we just put the number one in there, and that will be the

76
00:06:30,810 --> 00:06:37,000
value of this method when we run it. So let's save that. And now we can try

77
00:06:37,000 --> 00:06:43,250
compiling this simple program, so how do we compile the compiler is called a COOL c

78
00:06:43,250 --> 00:06:50,040
for the COOL compiler and you just give the COOL compiler a list of COOL source

79
00:06:50,040 --> 00:06:55,880
files. So in this case there's just one file 1.CL hit enter and ooh we got a

80
00:06:55,880 --> 00:07:02,680
syntax error so we have to come back and fix that and the error said at or near the

81
00:07:02,680 --> 00:07:09,130
open curly brace on line three there's a mistake. And I know what the mistake is,

82
00:07:09,130 --> 00:07:12,570
because I'm a competent COOL programmer, at least somewhat competent COOL

83
00:07:12,570 --> 00:07:17,460
programmer. Cool methods must declare their return type. So we need to put a

84
00:07:17,460 --> 00:07:21,560
type here. And the syntax for the declaration is to put a colon after the

85
00:07:21,560 --> 00:07:24,889
name of the method and the argument list, and then the name of a type. And since

86
00:07:24,889 --> 00:07:30,340
we're returning the number one for this program for sorry, for this method we

87
00:07:30,340 --> 00:07:37,340
might as well say that the main method is going to return an integer, So save that,

88
00:07:37,860 --> 00:07:43,740
Go back to our compilation window and let's compile the program again. And this

89
00:07:43,740 --> 00:07:48,680
time it compiles successfully. And now if we look in our directory we see that there

90
00:07:48,680 --> 00:07:55,680
is a new file called 1.s. That's the assembly code for the program one. And now

91
00:07:56,360 --> 00:08:03,360
we could try to run this code. And the, The, the Mitch simulator is called spin,

92
00:08:04,919 --> 00:08:11,240
and it just takes a, assembly file to, to simulate, And so we just give it one

93
00:08:11,240 --> 00:08:15,889
[inaudible] hit enter and it will run. A whole bunch of stuff is printed out. But

94
00:08:15,889 --> 00:08:21,290
as you can see, it says part way down that the COOL program successfully executed, so

95
00:08:21,290 --> 00:08:24,660
that's good, and then afterwards there are some statistics and things like number of

96
00:08:24,660 --> 00:08:29,419
instructions executed, a number of loads and stores, a number of branches, those

97
00:08:29,419 --> 00:08:32,519
things would be interesting if we're worried about performance if we were to

98
00:08:32,519 --> 00:08:37,399
say working on the optimization of the compiled code, but we're not doing that

99
00:08:37,399 --> 00:08:43,120
right now. We're just running programs. And we can see if this program works. So

100
00:08:43,120 --> 00:08:45,520
the program ran. It terminated successfully. But it didn't actually

101
00:08:45,520 --> 00:08:52,480
produce any output. And that's because we didn't ask it to produce any output, If we

102
00:08:52,480 --> 00:08:59,230
want to have output. We have to go back and modify the program again. So, so what

103
00:08:59,230 --> 00:09:02,170
this program does currently, is that it just returns its value but that, but

104
00:09:02,170 --> 00:09:05,740
nothing is done with that value. It's not printed out or anything like that. If you

105
00:09:05,740 --> 00:09:10,270
wanted to have something printed out in a COOL program, you have to do that

106
00:09:10,270 --> 00:09:16,230
explicitly. So there's a special class built in, a primitive class called IO. And

107
00:09:16,230 --> 00:09:23,230
we can declare, what's called a attribute of this class, it will be a IO attribute

108
00:09:23,640 --> 00:09:30,640
and it will be called I, okay and I will be a object that we use to do IO. So now

109
00:09:30,760 --> 00:09:37,760
in our, main method, Here we could add a call to out-string, I dot out-string is

110
00:09:41,260 --> 00:09:47,020
how we invoke a method. Okay so out-string is a method of the IO class so we use I to

111
00:09:47,020 --> 00:09:51,380
invoke that method and then we can pass it a string that we want printed out on the

112
00:09:51,380 --> 00:09:58,380
screen. So for example we could say hello world. Okay, And now, we have to decide

113
00:10:05,500 --> 00:10:10,020
what to do, with our, with our number one there. And let me show you one more

114
00:10:10,020 --> 00:10:13,730
feature of COOL. Let's leave the one there, and let's make it part of a

115
00:10:13,730 --> 00:10:17,790
statement block. So a statement block consists of a sequence of expressions

116
00:10:17,790 --> 00:10:21,930
separated by semicolons. And you can have any number of expressions, and the

117
00:10:21,930 --> 00:10:26,709
semantics of a statement block or an expression block is to just evaluate the

118
00:10:26,709 --> 00:10:30,640
expressions in order. And the value of the block is the value of the last expression.

119
00:10:30,640 --> 00:10:35,750
But now, a statement or an expression block has to be included in its own set of

120
00:10:35,750 --> 00:10:41,740
curly braces. Okay, so that now is a valid COOL program so let me just read this for

121
00:10:41,740 --> 00:10:48,740
you so the body of the program is a block of expressions. The first one, executes. A

122
00:10:51,300 --> 00:10:55,440
out string call to the object I, which is going to print hello world for us. And

123
00:10:55,440 --> 00:11:00,680
then the second one evaluates to one, which is the value of the entire of the

124
00:11:00,680 --> 00:11:05,940
entire method. Okay, actually I should say it's the value of the block, okay, and

125
00:11:05,940 --> 00:11:11,310
then because the block is the body of the method the value of the block becomes the

126
00:11:11,310 --> 00:11:15,870
value of the entire method, So one will be returned from this method call. So let's

127
00:11:15,870 --> 00:11:22,870
save this. Go back over here and let's compile this again. So, Looks like I

128
00:11:25,610 --> 00:11:32,610
failed to save it. Let's compile this and we see we have a syntax error. And so it

129
00:11:37,890 --> 00:11:44,890
says on line four, we have a syntax error at or near our closing curly brace. And

130
00:11:46,080 --> 00:11:53,080
the problem here is that a statement block, or expression block consists of a

131
00:11:54,370 --> 00:11:57,800
series or a sequence of expressions terminated by semi-colons, and we forgot

132
00:11:57,800 --> 00:12:04,170
to terminate the last expression in the sequence by its semi-colon, So we have to

133
00:12:04,170 --> 00:12:10,470
add that. And now we should be able to compile this, and lo and behold it

134
00:12:10,470 --> 00:12:17,470
compiles correctly, and then we can run it. And now we see, oh we got another

135
00:12:18,920 --> 00:12:24,990
mistake. So we have an, when the program ran it complained that we have a

136
00:12:24,990 --> 00:12:31,350
dispatched void. So that on line four, our dispatch was to an object that didn't

137
00:12:31,350 --> 00:12:37,120
exist. And, you can see the dispatch call right here to I, and it doesn't exist,

138
00:12:37,120 --> 00:12:43,149
because, in fact, we forgot to allocate an object for I. So here we declare I to be

139
00:12:43,149 --> 00:12:48,399
of type IO, but that doesn't actually create any objects. That just says that it

140
00:12:48,399 --> 00:12:53,670
creates a variable name I but I doesn't actually have a value. So if you want I to

141
00:12:53,670 --> 00:12:57,450
actually have a value, we have to initialize it to something. So we can

142
00:12:57,450 --> 00:13:03,529
initialize it to a new IO object. And new here, is the way you allocate new objects

143
00:13:03,529 --> 00:13:07,269
in COOL and new always take a type argument so in this case were creating a

144
00:13:07,269 --> 00:13:13,610
new object in type IO and were assigning it To this object i. And notice here that

145
00:13:13,610 --> 00:13:18,330
I is a, is a, is what would be called a field name in Java. It's what we call an

146
00:13:18,330 --> 00:13:25,000
attribute in COOL. So, so these are the data el, the data elements of the, of the

147
00:13:25,000 --> 00:13:30,339
class. And so the class can have both of names of things that are so, attributes or

148
00:13:30,339 --> 00:13:37,339
fields that hold values as well as methods that can perform computation. [sound]

149
00:13:38,110 --> 00:13:45,110
Let's save this and switch back. And now we'll compile this again. So and it still

150
00:13:48,300 --> 00:13:54,200
compiles. And now we can run it. And now it runs, and low and behold, as you can

151
00:13:54,200 --> 00:13:59,760
see down there third line from the, the top, it prints out hello world. And that

152
00:13:59,760 --> 00:14:05,980
looks a little bit ugly because the, the successful execution message is on the

153
00:14:05,980 --> 00:14:12,980
same line as our hello world message. So let's fix that. Let's come back over here.

154
00:14:13,410 --> 00:14:17,510
And in our string here we can add a new line. Okay at the end of the string, so

155
00:14:17,510 --> 00:14:23,399
backslash N is how you write a new line character in the string. Save that, come

156
00:14:23,399 --> 00:14:30,079
back over here let's compile. So if you don't know Unix bang will repeat the

157
00:14:30,079 --> 00:14:34,550
previous expression the previous command that began with the same prefix that you

158
00:14:34,550 --> 00:14:38,630
type after the bang. So I want to run the last command that began with C which is to

159
00:14:38,630 --> 00:14:43,220
compile and then I want to run the last command that began with S which is to run

160
00:14:43,220 --> 00:14:50,220
spin. And now we can see there it is all nice hello world is on a line by itself.

161
00:14:51,870 --> 00:14:57,600
Let's continue now, let's [sound] clear all this out [sound]. So let me just show

162
00:14:57,600 --> 00:15:02,610
you a few variations on the same program. What I'm going to do here is just rewrite

163
00:15:02,610 --> 00:15:06,110
it in a couple of different ways. So I just illustrate a couple of features of

164
00:15:06,110 --> 00:15:10,420
COOL and get you more familiar with the syntax, and also just show some

165
00:15:10,420 --> 00:15:17,420
alternative ways to do the same thing. So you know this, this. A block here of, of

166
00:15:18,140 --> 00:15:24,110
expressions is kind of a clumsy way to, to implement the Hello World program. So

167
00:15:24,110 --> 00:15:29,149
let's get rid of that. Let's get rid of the, the block. Let's get rid of the one

168
00:15:29,149 --> 00:15:36,110
here at the end. Okay, let's just make the statement body a single expression again,

169
00:15:36,110 --> 00:15:41,839
and, and now the problem we're going to have is that the types won't match. But

170
00:15:41,839 --> 00:15:47,450
just to illustrate that, let me show it to you so let's do COOL C of one dot CL, and

171
00:15:47,450 --> 00:15:51,120
you'll see here that in complains that the inferred return type of the IO of the

172
00:15:51,120 --> 00:15:55,769
method main does not conform to the declared return type INT. So coming back

173
00:15:55,769 --> 00:16:02,769
over here, the, to the program, The, the compiler figured out that this expression,

174
00:16:03,839 --> 00:16:09,570
I dot out string, yields an object of type IO. So it returns the i object as the

175
00:16:09,570 --> 00:16:13,970
results evaluating this expression. And that does not match the type it. And so

176
00:16:13,970 --> 00:16:17,240
naturally, the compiler says, hey, something's wrong with the types. Well,

177
00:16:17,240 --> 00:16:21,200
that's easily repaired. We can just change the return type or the main method to say

178
00:16:21,200 --> 00:16:27,680
it returns something of type IO. So let's go back over here and see if that now

179
00:16:27,680 --> 00:16:34,680
works. So, we compile the program. And then we run spin on the output, and yes,

180
00:16:36,800 --> 00:16:41,610
everything still works as expected. Now, We don't have to be so specific about the

181
00:16:41,610 --> 00:16:46,480
type over here, since we're not actually using the result of the method body for

182
00:16:46,480 --> 00:16:51,550
anything. I mean, the program just exits once it prints the string. We could have

183
00:16:51,550 --> 00:16:55,670
allowed ourselves more flexibility here. We could've just declared the result type

184
00:16:55,670 --> 00:17:01,579
of main to be of type Object. So Object is the root of the class hierarchy in COOL.

185
00:17:01,579 --> 00:17:07,120
Every other class is a subclass of Object. So let's come back over h, let's save this

186
00:17:07,119 --> 00:17:14,120
first. And then we can come back over to our compilation window. We can compile it.

187
00:17:14,390 --> 00:17:21,390
And we can run it and it still works. So now another thing we can do if we want, is

188
00:17:22,540 --> 00:17:29,530
we could observe. Here that this attribute that we declare, this field I isn't really

189
00:17:29,530 --> 00:17:36,500
necessary. Here we, we allocate, you know we have a special name I when the main

190
00:17:36,500 --> 00:17:42,460
object is constructed to run the program, a new [inaudible] object is allocated to I

191
00:17:42,460 --> 00:17:46,410
and then that gets used in the main method. We can actually just do all of

192
00:17:46,410 --> 00:17:51,660
that inside the main method itself by just allocating a new [inaudible] object right

193
00:17:51,660 --> 00:17:58,660
here and then calling out string on that object. Alright, So this should also work.

194
00:18:01,230 --> 00:18:08,230
And let's check it out. So it compiles. And lo and behold, it rots. Alright, So

195
00:18:12,290 --> 00:18:15,520
coming back over here let's illustrate one more, or a couple more things that we

196
00:18:15,520 --> 00:18:22,520
could do. So, we could also say that [inaudible] inherits From IO. So we have

197
00:18:23,620 --> 00:18:28,620
to have the IO functionality somewhere in order to call the out string method. So we

198
00:18:28,620 --> 00:18:31,799
have been doing that by creating a separate object of type IO. But now we can

199
00:18:31,799 --> 00:18:36,030
say well just the main object is itself. And something that has all the

200
00:18:36,030 --> 00:18:41,470
capabilities of IO by inheriting from IO. And if you've seen any [inaudible]

201
00:18:41,470 --> 00:18:45,900
language before this will be a familiar concept. So main here gets all the

202
00:18:45,900 --> 00:18:50,230
attributes and methods of IO, in addition to whatever attributes and methods of its

203
00:18:50,230 --> 00:18:57,230
own that it will have. And now Instead of, of having to allocate a new IO object in

204
00:18:57,330 --> 00:19:02,419
order to call out string, we can just invoke it on self, Which is the name of

205
00:19:02,419 --> 00:19:07,390
the current object when the main method runs In other languages self is called

206
00:19:07,390 --> 00:19:14,390
this. Okay, and so let's we saved it, so let's go over and compile this. So it

207
00:19:14,929 --> 00:19:21,929
compiles, it compiles and, and it runs, right? So last example here, we don't have

208
00:19:24,690 --> 00:19:31,280
to name self actually in this dispatch. There's a feature that allows us to call a

209
00:19:31,280 --> 00:19:35,260
method without explicitly naming the object on which it's dispatched and

210
00:19:35,260 --> 00:19:40,440
defaults to self, so if no object is named in a dispatch then it's just a dispatched

211
00:19:40,440 --> 00:19:47,440
self. So this should also work. [sound], And indeed it does. So that concludes our

212
00:19:50,290 --> 00:19:54,100
first example. In the next couple of videos we'll look at some more complex

213
00:19:54,100 --> 00:19:55,580
examples of COOL programming.
