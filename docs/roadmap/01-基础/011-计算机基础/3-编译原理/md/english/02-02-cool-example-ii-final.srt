0
00:00:03,970 --> 00:00:07,800
Welcome back, In this video we're going to look at another example of cool

1
00:00:07,800 --> 00:00:14,800
programing. This time let's move beyond the simple hello world kind of examples

2
00:00:19,119 --> 00:00:24,400
and on to something more exciting, say, the ever popular factorial function. So,

3
00:00:24,400 --> 00:00:29,960
in order to write factorial, we'll need to open a file, which we can write some code.

4
00:00:29,960 --> 00:00:36,320
Let me start that. And recall from last time that every cool program has to have a

5
00:00:36,320 --> 00:00:42,790
main class and the main class is required to have a main method. And we don't care

6
00:00:42,790 --> 00:00:46,060
what the main method return, so we'll just have it return something a type object,

7
00:00:46,060 --> 00:00:53,060
and then we'll just fill in a skeleton here on the file. And, so now we're ready

8
00:00:53,320 --> 00:00:58,360
to write some codes. So what are we going to have the main method do? Well, before

9
00:00:58,360 --> 00:01:02,090
we can actually write factorially, before we can get to the guts of this program,

10
00:01:02,090 --> 00:01:06,360
which is actually not very difficult. We need to talk about IO some more. Because

11
00:01:06,360 --> 00:01:12,600
we're going to need to be able to, read and write, numbers. We need to be able to

12
00:01:12,600 --> 00:01:16,180
read numbers from, the, the user who's running the program, and print them back

13
00:01:16,180 --> 00:01:20,580
out. So let's just review little bit about IO, also. In order to invoke the IO

14
00:01:20,580 --> 00:01:25,140
functions, we need an IO object. And one of the IO functions is something that

15
00:01:25,140 --> 00:01:31,090
prints out a string. So let's just, write a program that we already know how to do,

16
00:01:31,090 --> 00:01:37,409
just to confirm that we remember that. And, we can compile this program. And it

17
00:01:37,409 --> 00:01:44,409
should just print one. And, let's see. Indeed it does. Okay? So it prints out the

18
00:01:46,310 --> 00:01:53,110
number one. And so now, let's come back here and let's talk about how to do input.

19
00:01:53,110 --> 00:01:57,700
So, instead of just printing out the number one, let's print out a strain that

20
00:01:57,700 --> 00:02:01,909
the user types in. So, ins-, in here, we're going to read a strain. And in order

21
00:02:01,909 --> 00:02:07,420
to do that, we need an IO object because there is another function, another method,

22
00:02:07,420 --> 00:02:14,420
called in-strain. Okay. And so this will renew this string. And return to string.

23
00:02:15,569 --> 00:02:21,860
And to make sure that we get the nice output let's concatenate on to that string

24
00:02:21,860 --> 00:02:27,209
a new line. So, this is just to. When it prints this string back out it will be

25
00:02:27,209 --> 00:02:34,209
printed on i ts own line. So, let's try compiling this, And steak. It compiles,

26
00:02:39,590 --> 00:02:44,620
And now we can run spin. Remember the bang command in UNIX runs the previous command

27
00:02:44,620 --> 00:02:48,599
that began with the same letters. And now the program runs and it waits. Cause it's

28
00:02:48,599 --> 00:02:53,800
waiting for me to type something. And if I type it type in one it prints back one and

29
00:02:53,800 --> 00:03:00,800
if I type in 42 it gives me back 42. And so now The next thing we need to talk

30
00:03:01,150 --> 00:03:06,020
about is how to convert strings into integers, because if we're going to do a

31
00:03:06,020 --> 00:03:08,879
factorial, we want to work on integers and not strings. And at the moment we're just

32
00:03:08,879 --> 00:03:14,629
reading and writing strings. So, there is a library written in cool that does

33
00:03:14,629 --> 00:03:19,690
conversion between integers and strings. And we're going to give the main class

34
00:03:19,690 --> 00:03:26,690
here the functionality of that class. Which is called A2I for ASCII to integer.

35
00:03:28,230 --> 00:03:33,060
And that defines a bunch of methods, that can convert between strings and integers.

36
00:03:33,060 --> 00:03:40,060
So let's add those, commands in here. So here, here's our string. That we've read

37
00:03:41,860 --> 00:03:48,860
in. And what we want to do now is to, convert this into an integer. So let me

38
00:03:51,610 --> 00:03:57,550
just add a couple of parens here. So there's our string, okay? And now we're

39
00:03:57,550 --> 00:04:03,650
going to invoke. On that the method I'm sorry we're going to call on that the

40
00:04:03,650 --> 00:04:10,650
function the method, A to I. Okay? And let's just double check here that we've

41
00:04:11,170 --> 00:04:15,909
got friends in the right place. So that's the argument to A2I. Now, we recall that

42
00:04:15,909 --> 00:04:18,849
when we have a dispatch to a method and it's just sitting by itself with not

43
00:04:18,849 --> 00:04:23,970
object, it's dispatched to the self object. And the self object is the object

44
00:04:23,970 --> 00:04:28,160
of the current class that we're in. In this case the main object, which has

45
00:04:28,160 --> 00:04:33,660
inherited the A2I methods, And so the A2I functions should be defined in there. Now

46
00:04:33,660 --> 00:04:38,150
we have an integer. And we can do something with that integer if we like.

47
00:04:38,150 --> 00:04:42,250
So, let's add some more [inaudible] here and let's just say we add just one to the

48
00:04:42,250 --> 00:04:47,580
integer. Okay. And then once we're done with our integer. Whatever operation it is

49
00:04:47,580 --> 00:04:51,410
that we want to do with the integer we need to convert it back to a string so

50
00:04:51,410 --> 00:04:57,160
that we can print it out. An there's an inverse function I2A that will do. So, I

51
00:04:57,160 --> 00:05:01,320
don't know if we have all the parens in the right places at this point. So,

52
00:05:01,320 --> 00:05:08,320
let's just check. Yes. That looks like that should work. So this will, read in a

53
00:05:08,430 --> 00:05:14,150
string, convert, convert it to an integer, add one to it convert it back to a string,

54
00:05:14,150 --> 00:05:18,810
concatenate on a new line, and print it out. Now let's see if all that actually

55
00:05:18,810 --> 00:05:23,650
works, so let's run the compiler and we have a problem here. It says that we have

56
00:05:23,650 --> 00:05:29,380
an undefined class A to I. And the reason is, we didn't supply the code for A2I. So

57
00:05:29,380 --> 00:05:33,690
if we look in our directory here, we'll see I've already copied in the class file

58
00:05:33,690 --> 00:05:36,960
for A2I. And I encourage you to go and look at that code. It's actually

59
00:05:36,960 --> 00:05:40,199
interesting code to see how the conversions are written in COOL.

60
00:05:40,199 --> 00:05:45,590
But now we need to talk about how to compile a program that uses a library, And

61
00:05:45,590 --> 00:05:50,310
the way you do it is very simple. You just list all the class files on the command

62
00:05:50,310 --> 00:05:53,880
line when you call up the compiler. And it will read them all in and treat them as a

63
00:05:53,880 --> 00:06:00,000
single program. So in this case we compile, compile fact together with A2I.

64
00:06:00,000 --> 00:06:07,000
And that complies. And then we can run it. [sound]. And now, if I type in three, it

65
00:06:07,580 --> 00:06:13,330
prints four. And if I type in one, it prints two. And so the program seems to be

66
00:06:13,330 --> 00:06:18,460
working. And now we're almost ready to write our factorial function. So what do

67
00:06:18,460 --> 00:06:21,900
we want to do in factorial? Well, we want to do something other than just adding

68
00:06:21,900 --> 00:06:27,770
one. Instead, we want to call, our special function factorial. So let's insert a call

69
00:06:27,770 --> 00:06:34,770
to factorial in here. Okay, and let's get rid of the plus one. And then let's check

70
00:06:35,610 --> 00:06:39,850
that we have all the parens that we need. So we need to close off the, the A2I call,

71
00:06:39,850 --> 00:06:45,669
the factorial call, The I2A call. And then that last one should be the out string

72
00:06:45,669 --> 00:06:51,770
call, And it is, Okay. So now we can add a method fact to this class, And fact is

73
00:06:51,770 --> 00:06:56,819
gonna take an integer argument. So we need a parameter here, And it's type is in

74
00:06:56,819 --> 00:07:03,710
force. And the whole thing is gonna return an integer. And then we have body of our

75
00:07:03,710 --> 00:07:09,610
function, And probably a good idea here, just to make sure that we got this much

76
00:07:09,610 --> 00:07:13,520
right, to do something simple. So let's just try to make a function that returns

77
00:07:13,520 --> 00:07:16,600
one more than it's argument. So this will do exactly the same thing that we had

78
00:07:16,600 --> 00:07:23,600
before and let's just confirm that, that is working. So EW compile with the A2I

79
00:07:24,280 --> 00:07:30,880
library and now we have a syntax error. And we see that I forgot the closing

80
00:07:30,880 --> 00:07:37,880
semicolon here for the method. Remember the, the, class body is a list of methods,

81
00:07:38,860 --> 00:07:44,870
and each method is terminated by a semicolon, Must try compiling that again.

82
00:07:44,870 --> 00:07:50,280
Now it compiles. Let's run it. We type in four gives a spec five. Alright, So looks

83
00:07:50,280 --> 00:07:54,280
right we're ready now to actually right the code for factorial. And this is gonna

84
00:07:54,280 --> 00:07:58,630
be anti climactic because it's actually a very simple code if we write it

85
00:07:58,630 --> 00:08:05,630
recursively. So let's do that. So how's that going to work? Well, everybody knows

86
00:08:07,289 --> 00:08:13,330
the definition by Hardy Hope. If I is equal to zero then the factorial of zero

87
00:08:13,330 --> 00:08:20,330
is one. And we have a keyword there then one, otherwise the factorial is going to

88
00:08:22,060 --> 00:08:29,060
be I times, the factorial of I minus one. Right, and then if statements in

89
00:08:31,690 --> 00:08:36,529
[inaudible] always end in the keyword [inaudible] so it's an if then else

90
00:08:36,529 --> 00:08:41,129
[inaudible] construct. And that is actually the entire definition. So now we

91
00:08:41,129 --> 00:08:45,179
should have a program that actually computes factorial, it compiles, so now

92
00:08:45,179 --> 00:08:52,179
let's run it. So factorial of three is six. And factorial of six, is 720 and that

93
00:08:55,639 --> 00:09:02,019
looks right. And if we try it one more time with a bigger number, we get a, we

94
00:09:02,019 --> 00:09:05,050
get a large number, we think that's probably correct. And so, anyway our

95
00:09:05,050 --> 00:09:10,519
factorial function, is working. So, now let's come back here, and just as an

96
00:09:10,519 --> 00:09:14,699
exercise, let's rewrite this code iteratively. So instead of using a

97
00:09:14,699 --> 00:09:21,439
recursive function, let's write it using a loop. And in order to that [inaudible]

98
00:09:21,439 --> 00:09:26,239
gonna get rid of that code. What are we going to need? Well, we're going to need

99
00:09:26,239 --> 00:09:32,899
an accumulator here. We're going to need a, a local variable that we can use to

100
00:09:32,899 --> 00:09:37,170
accumulate the results of the factorial computation. And the way you declare local

101
00:09:37,170 --> 00:09:40,230
variables in [inaudible] is with [inaudible] Statements, or naudibl

102
00:09:40,230 --> 00:09:45,230
expressions. So we're gonna have, let's call this, variable fact, for the, result

103
00:09:45,230 --> 00:09:48,429
of factorial. And notice here that I can have a variable that has the same name as

104
00:09:48,429 --> 00:09:52,199
the function. And the programming language, [inaudible] will not get

105
00:09:52,199 --> 00:09:57,439
confused about that, Because variables and functions, play different roles. So we'll

106
00:09:57,439 --> 00:10:03,579
have the factorial fact, excuse me, it's of type Int, and we do initialize it to

107
00:10:03,579 --> 00:10:10,139
one. Alright, so that multiplication will work. I think that the default for

108
00:10:10,139 --> 00:10:14,059
integers is to be initialized to zero and that would not be good if we're going to

109
00:10:14,059 --> 00:10:20,610
be multiplying up fact with other with other numbers. Alright, so then the, a let

110
00:10:20,610 --> 00:10:24,910
has two parts. It has the variable or variables that you are declaring. This

111
00:10:24,910 --> 00:10:28,420
could actually be a list of variables. We'll only have one this time. And then it

112
00:10:28,420 --> 00:10:34,179
has a body. The, the expression or the computation in which the fact variable is

113
00:10:34,179 --> 00:10:40,350
available. And what do we want to do? So, I think we're gonna need to have this be a

114
00:10:40,350 --> 00:10:43,049
statement block 'cause we're gonna need to have more than one statement in the

115
00:10:43,049 --> 00:10:46,910
sequence. And we'll see why in just a minute. But then we wanna have a loop. And

116
00:10:46,910 --> 00:10:52,220
so what is our loop going to do? Well, we're gonna say while I is not equal to

117
00:10:52,220 --> 00:10:59,220
zero. What do we, and what do we need to do the opening for the loop body the

118
00:11:01,110 --> 00:11:07,259
opening keyword is called loop. [sound]. And now, I think we're going to need

119
00:11:07,259 --> 00:11:11,100
another statement block here. So let's open up a block. We're gonna probably need

120
00:11:11,100 --> 00:11:17,899
to do more than one thing. The first thing we want to do is we want to have fact. Be

121
00:11:17,899 --> 00:11:24,899
fact times I, so we know that I is not zero so we need to multiply the current

122
00:11:25,459 --> 00:11:30,899
value of I into fact to accumulate the result and then we want to subtract one

123
00:11:30,899 --> 00:11:35,220
from I and notice that the assignment statement in cool is this backwards arrow.

124
00:11:35,220 --> 00:11:37,589
That's how you do assignment. It's also how you do initialization. So,

125
00:11:37,589 --> 00:11:44,569
initialization and assignment look the same. Then we can close off our statement

126
00:11:44,569 --> 00:11:50,259
block. Okay, so the body of a while loop is always a single expression. In this

127
00:11:50,259 --> 00:11:56,899
case, that expression is a block that consists of two statements. [sound] And

128
00:11:56,899 --> 00:12:03,489
then we can close the loop. And the closing for a loop is the pool key word.

129
00:12:03,489 --> 00:12:07,119
And then now we're in a statement block, so this has to end with a semicolon.

130
00:12:07,119 --> 00:12:11,959
Notice the statement block up there from the let, And now we want the result of the

131
00:12:11,959 --> 00:12:16,609
let block, or the let expression, to be factorial. So whatever the, whatever we

132
00:12:16,609 --> 00:12:19,829
got out of the while loop, whatever we computed in the while loop, we want that

133
00:12:19,829 --> 00:12:24,139
to be the result of the entire let expression. [sound] so that's the last

134
00:12:24,139 --> 00:12:29,009
statement of our blog. Remember the last statement of a statement blog, is the

135
00:12:29,009 --> 00:12:35,089
value of the blog. The body of the led is the, the result of the led, so fact will

136
00:12:35,089 --> 00:12:37,989
also be result of the whole led statements, it's just the result of the

137
00:12:37,989 --> 00:12:44,949
statement blog. And since the body of the, factorial method itself is just the led

138
00:12:44,949 --> 00:12:48,829
expression, fact will be the result of the whole thing. And so this, if we've

139
00:12:48,829 --> 00:12:53,889
written, haven't made any mistakes, should be an iterative version of factorial. So,

140
00:12:53,889 --> 00:12:59,839
let's compile this. And amazingly it complies on the first try. And now let's

141
00:12:59,839 --> 00:13:05,480
run it. [sound] And whoa! It actually works. So we got six. And let's just do

142
00:13:05,480 --> 00:13:10,059
one more test, to see that, to convince ourselves that, things are working

143
00:13:10,059 --> 00:13:16,239
reasonably well, and they are. Now, let me just point out, one, common, mistake, that

144
00:13:16,239 --> 00:13:19,629
you can easily make, and, that I make when I haven't written cool programs for a

145
00:13:19,629 --> 00:13:26,149
little while. If you're a C or programmer or a Java programmer, you might, think

146
00:13:26,149 --> 00:13:30,290
about, writing assignments, like this. So I just use the equal sign to write

147
00:13:30,290 --> 00:13:33,420
assignment. That looks completely fine if you're, if you're familiar with those

148
00:13:33,420 --> 00:13:38,889
languages, or used to programming in those languages. And now, let's see what happens

149
00:13:38,889 --> 00:13:43,279
when we try to compile this. Oh, it compiles just fine. And then what happens

150
00:13:43,279 --> 00:13:48,939
when we try to run it. Well it runs [inaudible] input so let's give it input

151
00:13:48,939 --> 00:13:53,660
and. Then we see that we've run out of heat. And that looks like an infinite

152
00:13:53,660 --> 00:13:59,119
loop. So we're going around and around the loop And consuming memory for some reason.

153
00:13:59,119 --> 00:14:02,350
And we'll, we '[laugh] get to that much later in the class. Why, why this loop

154
00:14:02,350 --> 00:14:07,720
actually ends up consuming memory. But, clearly, we don't have enough memory, in

155
00:14:07,720 --> 00:14:12,540
the loop, and, and eventually we run out. And so, so that's a sure sign Of an

156
00:14:12,540 --> 00:14:16,859
infinite look. So what is going on here? Well the thing is that equals. Equals

157
00:14:16,859 --> 00:14:22,109
operator in cool is the comparison operators. [inaudible] Well we compared I

158
00:14:22,109 --> 00:14:26,579
with O and that returns a boullion. So these are perfectly valid cool

159
00:14:26,579 --> 00:14:32,139
expressions. They just happen to be boullions. So, you don't ever actually I

160
00:14:32,139 --> 00:14:38,589
or factorial in this program. Your just comparing fact with factoid body and I

161
00:14:38,589 --> 00:14:43,829
with I minus one and the program is perfectly happy to do that. It just

162
00:14:43,829 --> 00:14:47,129
doesn't compute the factorial function. And it never terminates, because I never

163
00:14:47,129 --> 00:14:53,759
reaches zero. So that concludes our factorial example. And we'll do one more

164
00:14:53,759 --> 00:14:59,040
example next time of a more complicated, of a, of a cool program with some

165
00:14:59,040 --> 00:15:00,489
non-trivial data structures.
