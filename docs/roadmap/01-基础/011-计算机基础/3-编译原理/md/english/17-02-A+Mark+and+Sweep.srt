0
00:00:04,230 --> 00:00:07,200
In this video, we're going to talk about the first of three garbage collection

1
00:00:07,200 --> 00:00:10,870
techniques that we're going to look at in detail. First one is mark-and-sweep.

2
00:00:10,870 --> 00:00:17,870
Mark-and-sweep works in two phases. And it's called, not surprisingly, mark and

3
00:00:19,410 --> 00:00:23,769
sweep. So, the mark phase is going to trace all the reachable objects. So, when

4
00:00:23,769 --> 00:00:26,330
memory runs out and we stop to do the garbage collection, the first thing we're

5
00:00:26,330 --> 00:00:29,710
going to do is go and trace out all the reachable objects. And then the Sweep

6
00:00:29,710 --> 00:00:35,190
phase is going to collect all the garbage objects. And to support this, every object

7
00:00:35,190 --> 00:00:39,480
is going to have an extra bit somewhere in it called the mark bit. And, this is

8
00:00:39,480 --> 00:00:42,120
reserved from memory management and it's not going to be used by anything except

9
00:00:42,120 --> 00:00:46,289
the garbage collector. And initially, before we start a garbage collection, the

10
00:00:46,289 --> 00:00:50,940
mark bit of every object will always be zero. And that's going to be set to one,

11
00:00:50,940 --> 00:00:54,230
for the reachable objects in the mark phase. So, when we mark an object, we mark

12
00:00:54,230 --> 00:00:59,789
it with a And that indicates that the object is reachable. So, here is the mark

13
00:00:59,789 --> 00:01:04,360
phase. It's going to be a work list based algorithm and so initially our work list

14
00:01:04,360 --> 00:01:10,000
consists of all the roots so all the initial pointers held in registers and

15
00:01:10,000 --> 00:01:13,660
then while the work list, the to-do list is not empty, we're going to do the

16
00:01:13,660 --> 00:01:18,050
following. We pick some element v out of the to-do list we'll remove it from the

17
00:01:18,050 --> 00:01:25,050
to-do list, okay. And then, this is the crux of the algorithm. If the object v is

18
00:01:25,470 --> 00:01:30,390
not already marked then we mark it, okay. So, we say, mark bit to one and then we

19
00:01:30,390 --> 00:01:35,030
find all the pointers inside of it, alright. And we add those to our work

20
00:01:35,030 --> 00:01:39,640
list. So, everything, every point gets added to work list. Now, if v is already

21
00:01:39,640 --> 00:01:43,130
marked, well then we have already processed it and we've already add all the

22
00:01:43,130 --> 00:01:46,340
things it points to, to the work list. And so we just need to do nothing there is no

23
00:01:46,340 --> 00:01:53,340
else branch and we just drop it from the to-do list. So, once we've completed the

24
00:01:53,540 --> 00:01:57,380
mark phase and every reachable object has been marked, then the sweep phase is going

25
00:01:57,380 --> 00:02:02,350
to scan th rough the heap looking for objects that have mark bit zero. And the

26
00:02:02,350 --> 00:02:05,280
sweep phase is just going to march through all of memory. It's going to start at the

27
00:02:05,280 --> 00:02:10,229
bottom of the heap and walk over every object in the heap and check its mark bit.

28
00:02:10,229 --> 00:02:14,280
And so, any of the objects that it finds that have mark bit zero, they were not

29
00:02:14,280 --> 00:02:18,170
visited in mark phase and they're clearly not reachable. S, all those objects will

30
00:02:18,170 --> 00:02:23,569
be added to a free list. And as we go through the memory is one other detail

31
00:02:23,569 --> 00:02:27,709
that's important. Any object that has its mark bit set is gonna have its mark bit

32
00:02:27,709 --> 00:02:33,980
reset to zero. So, that way it's ready for the next garbage collection. So, here is

33
00:02:33,980 --> 00:02:40,599
the pseudo-code for the sweep phase and this will function, size of p is going to

34
00:02:40,599 --> 00:02:46,030
size of block, the size of the object that starts at pointer p, alright. And as

35
00:02:46,030 --> 00:02:50,719
you'll see this is actually, the reason that we have the size of objects encoded

36
00:02:50,719 --> 00:02:55,269
in the object in COOL. So, remember in the header for COOL objects there is a size

37
00:02:55,269 --> 00:02:58,180
field that is, so that the garbage collector as it's walking through memory

38
00:02:58,180 --> 00:03:02,620
can figure out how big the objects are. Anyway, we start at the bottom of the

39
00:03:02,620 --> 00:03:06,659
heap. And while we haven't reached the top of the heap, we do the following. We look

40
00:03:06,659 --> 00:03:10,560
at where we're pointing and then we'll always be pointing to the beginning of an

41
00:03:10,560 --> 00:03:15,349
object. So, we check to see if the mark bit of that object is one. And if it is,

42
00:03:15,349 --> 00:03:18,769
well then it was a reachable object. So, we just reset its mark bit to zero.

43
00:03:18,769 --> 00:03:23,489
Otherwise, if its mark bit was zero, then we're going to add that block of memory,

44
00:03:23,489 --> 00:03:29,060
okay, which is the size of the object to the free list. And finally, in either

45
00:03:29,060 --> 00:03:34,120
case, okay, we're going to increment p by the size of the object that it points to

46
00:03:34,120 --> 00:03:37,819
so we point to the next object. Then we'll just repeat that loop over and over again

47
00:03:37,819 --> 00:03:41,439
resetting the mark bits of things that were reached and adding things that were

48
00:03:41,439 --> 00:03:47,749
not reached for the free list until we've touched every object in the heap. Here's a

49
00:03:47,749 --> 00:03:51,749
little example. So, we're starting out here with a, a heap and we're gonna assume

50
00:03:51,749 --> 00:03:56,579
there's just one root for simplicity. And here are all the objects and initially

51
00:03:56,579 --> 00:04:01,139
their marked bits are zero and we do have a free list, an initial free list over

52
00:04:01,139 --> 00:04:04,620
here. Notice that, you know, there's a little bit of memory that is on the free

53
00:04:04,620 --> 00:04:09,639
list. Okay. So, after the mark phase, what has happened? Well, we've gone through,

54
00:04:09,639 --> 00:04:12,569
and touched all the reachable objects. So, we started with A and, of course, we set

55
00:04:12,569 --> 00:04:16,930
its mark bit to one. And then we followed pointers reachable from A, set the mark

56
00:04:16,930 --> 00:04:20,290
bit there. Follow the pointer reachable from C, set the mark bit there. And so we

57
00:04:20,290 --> 00:04:26,970
wind up A, C, and E being marked, nothing else is marked, okay. And now the sweep

58
00:04:26,970 --> 00:04:31,600
phase will go through memory, it's going to reset all the marked bits to zero. And

59
00:04:31,600 --> 00:04:36,100
as it finds unreachable objects, in this case B and D, it's going to add them to

60
00:04:36,100 --> 00:04:40,060
the free list and so what we'll wind up the free list will wind up being a linked

61
00:04:40,060 --> 00:04:45,640
list of, of, of blocks of memory that are available for future allocations.
