0
00:00:04,059 --> 00:00:08,350
In this video we're going to wrap up our series on type checking with a discussion

1
00:00:08,350 --> 00:00:15,350
of how to recover from type errors. So as with all the other front end phases, like

2
00:00:17,199 --> 00:00:20,550
flexing and parsing, it's important to recover from errors that happen during

3
00:00:20,550 --> 00:00:25,320
type checking But unlike parsing, it's much, much easier to recover from errors

4
00:00:25,320 --> 00:00:28,949
in the type checker because we already have the up stacks and text tree and so

5
00:00:28,949 --> 00:00:33,340
there's no need to skip over portions of the code as we did in parsing before we

6
00:00:33,340 --> 00:00:38,870
even knew what the structure of the program was. The problem though, is what

7
00:00:38,870 --> 00:00:43,910
type should we assign to an expression that has no legitimate type? The type

8
00:00:43,910 --> 00:00:48,370
checker works by structural induction, and it can't just get stuck. So if we find

9
00:00:48,370 --> 00:00:52,750
some sub expression that has no type that we can meaningfully give it, we still have

10
00:00:52,750 --> 00:00:56,070
to do something with it so that we can type check all the expressions that

11
00:00:56,070 --> 00:01:03,010
surround it. One possibility is to simply assign the type object as the type of any

12
00:01:03,010 --> 00:01:06,900
ill typed expression. And the intuition here is that even if we couldn't figure

13
00:01:06,900 --> 00:01:10,640
out what the type or the expression was supposed to be, certainly it was something

14
00:01:10,640 --> 00:01:15,799
that was a sub type of object. So it is certainly safe to assign any expression

15
00:01:15,799 --> 00:01:21,299
the type object. So let's consider what happens with this strategy in a simple

16
00:01:21,299 --> 00:01:25,920
piece of code. So here we have a little code fragment and we just assume here that

17
00:01:25,920 --> 00:01:30,280
X is undefined, that actually there's a bug in this code and that's at X has no

18
00:01:30,280 --> 00:01:34,560
binding. So there's no type anywhere for X. So what happens when we type check

19
00:01:34,560 --> 00:01:38,399
this? Well, we're going to recursively walk down the abstract syntax tree,

20
00:01:38,399 --> 00:01:40,969
eventually we'll get to the leaves, and we'll try to type check X. And then we'll

21
00:01:40,969 --> 00:01:46,299
discover that there is no type for X anywhere and that will result in an error

22
00:01:46,299 --> 00:01:53,299
message Saying that X is undefined And then in order to proceed with type

23
00:01:54,929 --> 00:01:59,090
checking, in order to recover, we'll have to assign X a type And so, we'll just

24
00:01:59,090 --> 00:02:04,590
assume that X has type object, because that's our recovery strategy And now we'll

25
00:02:04,590 --> 00:02:08,060
continue to type check as we walk up the abstr act syntax tree, and the next thing

26
00:02:08,060 --> 00:02:11,569
we'll try to do is to type check this plus operation. We'll see that we're adding

27
00:02:11,569 --> 00:02:17,569
something of type object to, an integer. And of course plus doesn't work on things

28
00:02:17,569 --> 00:02:24,569
of type object, so we'll get an error. Something like plus applied to an object.

29
00:02:28,939 --> 00:02:32,430
And then we'll have to decide, now that we couldn't type check this plus, what the

30
00:02:32,430 --> 00:02:36,939
type is of X+2, so this whole sub-expression and of course our recovery

31
00:02:36,939 --> 00:02:42,420
strategy is to say, well that also has type object And now the next thing up in

32
00:02:42,420 --> 00:02:45,310
the abstract syntax tree is this initialization assignment. Here we're

33
00:02:45,310 --> 00:02:50,840
assigning Y the result of this expression But we couldn't type check this expression

34
00:02:50,840 --> 00:02:54,189
so it has type object And now the type checker sees that we're assigning

35
00:02:54,189 --> 00:02:58,489
something of type object to something of type int and we get yet a third

36
00:02:58,489 --> 00:03:05,489
error Saying that we have a bad assignment, of some kind. So The nut of

37
00:03:08,379 --> 00:03:13,680
the, the problem here is that this simple recovery strategy works. If we do recover

38
00:03:13,680 --> 00:03:20,480
we continue type checking. But a single error leads potentially to, lots of other

39
00:03:20,480 --> 00:03:25,079
errors. So this is a workable solution. It, it, it achieves the goal of recovering

40
00:03:25,079 --> 00:03:29,159
But in general it will lead, to cascading errors. Once you have on one type error

41
00:03:29,159 --> 00:03:33,980
that type error will just cause many more because not very many things can be done

42
00:03:33,980 --> 00:03:38,340
with something of type object And probably the code was written assuming some more

43
00:03:38,340 --> 00:03:43,540
specific type And these errors will just propagate up the abstract syntax tree

44
00:03:43,540 --> 00:03:50,540
until some point just result in multiple errors Another possibility is to introduce

45
00:03:51,510 --> 00:03:57,209
a new type, a No type that is specifically for use with ill typed expressions And No

46
00:03:57,209 --> 00:04:01,999
type is very special. It's not a type that is available to the programmer. It's only

47
00:04:01,999 --> 00:04:05,900
available to the compiler and it's just there for error recovery and type

48
00:04:05,900 --> 00:04:10,249
checking. And the special property of No type is that it's going to be a sub type

49
00:04:10,249 --> 00:04:15,739
of every other type. So if you remember object was the opposite. Object is a super

50
00:04:15,739 --> 00:04:20,819
type of every type and that had the bad property that there are very

51
00:04:20,819 --> 00:04:25,960
few methods that defined on object and so if you plug in type object. Where you

52
00:04:25,960 --> 00:04:31,130
expected some other type probably it's not going to type check. So we can fix that

53
00:04:31,130 --> 00:04:35,240
problem by introducing no type. And no type will have this special property that

54
00:04:35,240 --> 00:04:40,360
every operation, every operation is defined for no type And furthermore we'll

55
00:04:40,360 --> 00:04:45,370
say that it produces no type as a result. So any operation in the language that

56
00:04:45,370 --> 00:04:49,780
takes an argument of type no type it will produce a result of type no type. So the

57
00:04:49,780 --> 00:04:55,490
no types will propagate. And now let's take a look at our same code fragment and

58
00:04:55,490 --> 00:05:00,270
let's work through what happens if we use no type. So, again we walk down the

59
00:05:00,270 --> 00:05:04,669
abstract syntax tree we get to this leaf X, we see that X is undefined, we

60
00:05:04,669 --> 00:05:11,669
produce an error saying X is undefined. And then we have to assign a type to X so

61
00:05:13,139 --> 00:05:20,139
we say well X has type no type and now we consider the plus operation And now plus

62
00:05:21,750 --> 00:05:26,460
is taking an augmentative type no type integer And this is fine. We're not gonna

63
00:05:26,460 --> 00:05:31,110
produce any errors that's consider to be well type and the results is also of type

64
00:05:31,110 --> 00:05:38,110
no type. And now we're doing an assignment And no type is compatible with N. No type

65
00:05:39,990 --> 00:05:44,800
is a subtype of N. So this assignment is also type correct And we don't produce any

66
00:05:44,800 --> 00:05:49,610
type of error in that stage either And so, you can see what happens here is that no

67
00:05:49,610 --> 00:05:54,430
types propagate up the abstract syntax tree just like the object types did before

68
00:05:54,430 --> 00:05:57,789
But since no type is a special type it's used only for error recovery. We can

69
00:05:57,789 --> 00:06:01,419
distinguish it from all the other regular types And we know that we shouldn't print

70
00:06:01,419 --> 00:06:08,419
out an error message after the first one is produced. So a real compiler, a

71
00:06:08,840 --> 00:06:13,860
production compiler would use something like no type, for error recovery But there

72
00:06:13,860 --> 00:06:18,430
is an implementation issue with no type. And in particular, the fact that no type

73
00:06:18,430 --> 00:06:25,000
is a subtype of every other class means that the class hierarchy is no longer a

74
00:06:25,000 --> 00:06:28,720
tree. If you think about it, you have object at the top and then you have this

75
00:06:28,720 --> 00:06:33,509
tree structure branching out. But then no type is a subtype of everything. So no

76
00:06:33,509 --> 00:06:40,240
type becomes a bottom ele ment And This is now a DAG and not a tree, and that makes

77
00:06:40,240 --> 00:06:43,389
it just slightly harder to implement. Instead of being able to just have tree

78
00:06:43,389 --> 00:06:47,669
algorithms now you have to have either have a special case for no type or just do

79
00:06:47,669 --> 00:06:52,639
something more general. And this is just enough extra hassle that I personally

80
00:06:52,639 --> 00:06:57,300
don't think it's worth doing for the course project and I recommend that you

81
00:06:57,300 --> 00:07:02,620
use the object solution and we just live with the propagating, or compounding,

82
00:07:02,620 --> 00:07:04,240
errors that, that produces.
